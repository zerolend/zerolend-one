{
  "address": "0x114EA0eD19D0aa82011381BC6a2d647588E3fB98",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interestRateData",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.ExtraData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "_flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interestRateData",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.ExtraData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SharesType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "borrowSimple",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SharesType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interestRateData",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.ExtraData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "flashLoanSimple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "forceUpdateReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceUpdateReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        }
      ],
      "name": "getAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "positionId",
          "type": "bytes32"
        }
      ],
      "name": "getBalanceByPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBalanceRaw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "lastDebtLiquidtyIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lastSupplyLiquidtyIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "debtShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyShares",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.PositionBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "positionId",
          "type": "bytes32"
        }
      ],
      "name": "getBalanceRawByPositionId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "lastDebtLiquidtyIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lastSupplyLiquidtyIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "debtShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyShares",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.PositionBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveConfigurationMap",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfigurator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "positionId",
          "type": "bytes32"
        }
      ],
      "name": "getDebtByPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHook",
      "outputs": [
        {
          "internalType": "contract IHook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "id",
          "type": "uint16"
        }
      ],
      "name": "getReserveAddressById",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "data",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.ReserveConfigurationMap",
              "name": "configuration",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "liquidityIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "liquidityRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "borrowIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint16",
              "name": "id",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "accruedToTreasuryShares",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserveFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reseveFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        }
      ],
      "name": "getReserveNormalizedIncome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        }
      ],
      "name": "getReserveNormalizedVariableDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReservesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReservesList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getTotalSupplyRaw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "debtShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyShares",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "underlyingBalance",
              "type": "uint128"
            }
          ],
          "internalType": "struct DataTypes.ReserveSupplies",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserAccountData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.UserConfigurationMap",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hook",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "rateStrategyAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "sources",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "borrowable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "frozen",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "borrowCap",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationBonus",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationThreshold",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ltv",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyCap",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.InitReserveConfig[]",
              "name": "configurations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DataTypes.InitPoolParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collat",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debt",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "pos",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "debtAmt",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interestRateData",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.ExtraData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collat",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debt",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "pos",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "debtAmt",
          "type": "uint256"
        }
      ],
      "name": "liquidateSimple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "marketBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interestRateData",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.ExtraData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SharesType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "repaySimple",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SharesType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rateStrategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveConfigurationMap",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setReserveConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "useAsCollateral",
          "type": "bool"
        }
      ],
      "name": "setUserUseReserveAsCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interestRateData",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.ExtraData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "supply",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SharesType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "positionId",
          "type": "bytes32"
        }
      ],
      "name": "supplyAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "positionId",
          "type": "bytes32"
        }
      ],
      "name": "supplyShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "supplySimple",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SharesType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "hookData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interestRateData",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataTypes.ExtraData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SharesType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "withdrawSimple",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.SharesType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5d2bc9bc58b280117596e183ae4acbc94ae7f11a9b4e0184e3d66a65dbc2131",
  "receipt": {
    "to": null,
    "from": "0xd6593B44597D90110abf5F75386f071AB9Fac605",
    "contractAddress": "0x114EA0eD19D0aa82011381BC6a2d647588E3fB98",
    "transactionIndex": 6,
    "gasUsed": "3485643",
    "logsBloom": "0x
    "blockHash": "0x7f3850f7ceed3c351113c6711c50edc540355886849e3fa5a159b0f2eb2faed4",
    "transactionHash": "0xc5d2bc9bc58b280117596e183ae4acbc94ae7f11a9b4e0184e3d66a65dbc2131",
    "logs": [],
    "blockNumber": 6486137,
    "cumulativeGasUsed": "4966460",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2834fe7fbbb1af748140962d71f4d6ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"_flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"borrow\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SharesType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"borrowSimple\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SharesType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"flashLoanSimple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"forceUpdateReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceUpdateReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"positionId\",\"type\":\"bytes32\"}],\"name\":\"getBalanceByPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBalanceRaw\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"lastDebtLiquidtyIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastSupplyLiquidtyIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"debtShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyShares\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.PositionBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"positionId\",\"type\":\"bytes32\"}],\"name\":\"getBalanceRawByPositionId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"lastDebtLiquidtyIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastSupplyLiquidtyIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"debtShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyShares\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.PositionBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfigurator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"positionId\",\"type\":\"bytes32\"}],\"name\":\"getDebtByPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHook\",\"outputs\":[{\"internalType\":\"contract IHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"getReserveAddressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"borrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accruedToTreasuryShares\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reseveFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"getReserveNormalizedVariableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getTotalSupplyRaw\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"debtShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyShares\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"underlyingBalance\",\"type\":\"uint128\"}],\"internalType\":\"struct DataTypes.ReserveSupplies\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserAccountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.UserConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rateStrategyAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"borrowable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.InitReserveConfig[]\",\"name\":\"configurations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DataTypes.InitPoolParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collat\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pos\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"debtAmt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collat\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pos\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"debtAmt\",\"type\":\"uint256\"}],\"name\":\"liquidateSimple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"marketBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"repay\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SharesType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"repaySimple\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SharesType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rateStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setReserveConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useAsCollateral\",\"type\":\"bool\"}],\"name\":\"setUserUseReserveAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"supply\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SharesType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"positionId\",\"type\":\"bytes32\"}],\"name\":\"supplyAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"positionId\",\"type\":\"bytes32\"}],\"name\":\"supplyShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"supplySimple\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SharesType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SharesType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawSimple\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.SharesType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"borrow(address,uint256,uint256,(bytes,bytes))\":{\"params\":{\"amount\":\"The amount to be borrowed\",\"asset\":\"The address of the underlying asset to borrow\",\"data\":\"Extra data that gets passed to the hook and to the interest rate strategy\",\"index\":\"The index of the user's position\"},\"returns\":{\"_0\":\"The amount of shares borrowed\"}},\"borrowSimple(address,uint256,uint256)\":{\"details\":\"See [borrow(...)](#borrow) for the full documentation. This call executes the same function with dummy data params\"},\"flashLoan(address,address,uint256,bytes,(bytes,bytes))\":{\"details\":\"IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\",\"params\":{\"amount\":\"The amount of the asset being flash-borrowed\",\"asset\":\"The address of the asset being flash-borrowed\",\"data\":\"Extra data that gets passed to the hook and to the interest rate strategy\",\"params\":\"Variadic packed params to pass to the receiver as extra information\",\"receiverAddress\":\"The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\"}},\"flashLoanSimple(address,address,uint256,bytes)\":{\"details\":\"See [flashLoan(...)](#flashLoan) for the full documentation. This call executes the same function with dummy data params\"},\"getAssetPrice(address)\":{\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"The price of the asset\"}},\"getBalance(address,address,uint256)\":{\"params\":{\"asset\":\"The address of the asset.\",\"index\":\"The index of the user's position\",\"who\":\"The user to find the balance of\"},\"returns\":{\"balance\":\"The balance of the specified asset for the given user and position idnex.\"}},\"getBalanceByPosition(address,bytes32)\":{\"params\":{\"asset\":\"The address of the asset.\",\"positionId\":\"The ID of the position.\"},\"returns\":{\"balance\":\"The balance of the specified asset in the specified position.\"}},\"getBalanceRaw(address,address,uint256)\":{\"params\":{\"asset\":\"The address of the asset\",\"index\":\"The index of the user's position\",\"who\":\"The address of the user\"}},\"getConfiguration(address)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The configuration of the reserve\"}},\"getConfigurator()\":{\"returns\":{\"_0\":\"The address of the Pool Configurator\"}},\"getDebt(address,address,uint256)\":{\"params\":{\"asset\":\"The address of the asset.\",\"index\":\"The index of the user's position\",\"who\":\"The user to find the debt of\"},\"returns\":{\"debt\":\"The debt of the specified asset for the given user and position idnex.\"}},\"getDebtByPosition(address,bytes32)\":{\"params\":{\"asset\":\"The address of the asset.\",\"positionId\":\"The ID of the position.\"},\"returns\":{\"debt\":\"The debt of the specified asset in the specified position.\"}},\"getHook()\":{\"details\":\"The hook is immutable. Once it is set, it cannot be changed.\",\"returns\":{\"_0\":\"The hook for the pool, if set.\"}},\"getReserveAddressById(uint16)\":{\"params\":{\"id\":\"The id of the reserve as stored in the DataTypes.ReserveData struct\"},\"returns\":{\"_0\":\"The address of the reserve associated with id\"}},\"getReserveData(address)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The state and configuration data of the reserve\"}},\"getReserveFactor()\":{\"details\":\"This parameter is immutable.\",\"returns\":{\"reseveFactor\":\"The amount of revenue that gets shared to governance.\"}},\"getReserveNormalizedIncome(address)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The reserve's normalized income\"}},\"getReserveNormalizedVariableDebt(address)\":{\"details\":\"WARNING: This function is intended to be used primarily by the protocol itself to get a \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current moment (approx. a borrower would get if opening a position). This means that is always used in combination with variable debt supply/balances. If using this function externally, consider that is possible to have an increasing normalized variable debt that is not equivalent to how the variable debt index would be updated in storage (e.g. only updates with non-zero variable debt supply)\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The reserve normalized variable debt\"}},\"getReservesCount()\":{\"returns\":{\"_0\":\"The count\"}},\"getReservesList()\":{\"returns\":{\"_0\":\"The addresses of the underlying assets of the initialized reserves\"}},\"getTotalSupplyRaw(address)\":{\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"The reserve supply information of the given asset\"}},\"getUserAccountData(address,uint256)\":{\"params\":{\"index\":\"The index of the user's position\",\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The total collateral of the user in the base currency used by the price feed\",\"_1\":\"The total debt of the user in the base currency used by the price feed\",\"_2\":\"The borrowing power left of the user in the base currency used by the price feed\",\"_3\":\"The liquidation threshold of the user\",\"_4\":\"The loan to value of The user\",\"_5\":\"The current health factor of the user\"}},\"getUserConfiguration(address,uint256)\":{\"params\":{\"index\":\"The index of the user's position\",\"user\":\"The user address\"},\"returns\":{\"_0\":\"The configuration of the user\"}},\"initialize((address,address[],address[],address[],(bool,bool,uint256,uint256,uint256,uint256,uint256,uint256)[]))\":{\"details\":\"This function is invoked by the factory contract when the Pool is created\"},\"liquidate(address,address,bytes32,uint256,(bytes,bytes))\":{\"params\":{\"collateralAsset\":\"The address of the underlying asset used as collateral, to receive as result of the liquidation\",\"data\":\"Extra data that gets passed to the hook and to the interest rate strategy\",\"debtAsset\":\"The address of the underlying borrowed asset to be repaid with the liquidation\",\"debtToCover\":\"The debt amount of borrowed `asset` the liquidator wants to cover\"}},\"liquidateSimple(address,address,bytes32,uint256)\":{\"details\":\"See [liquidate(...)](#liquidate) for the full documentation. This call executes the same function with dummy data params\"},\"repay(address,uint256,uint256,(bytes,bytes))\":{\"params\":{\"amount\":\"The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\",\"asset\":\"The address of the borrowed underlying asset previously borrowed\",\"data\":\"Extra data that gets passed to the hook and to the interest rate strategy\",\"index\":\"The index of the user's position\"},\"returns\":{\"_0\":\"The amount of shares repaid\"}},\"repaySimple(address,uint256,uint256)\":{\"details\":\"See [repay(...)](#repay) for the full documentation. This call executes the same function with dummy data params\"},\"revision()\":{\"returns\":{\"_0\":\"The version of this pool's implementation\"}},\"setReserveConfiguration(address,address,address,(uint256))\":{\"details\":\"Only callable by the PoolConfigurator contract\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"configuration\":\"The new configuration bitmap\",\"rateStrategyAddress\":\"The address of the rate strategy for the reserve\",\"source\":\"The address of the oracle for the reserve\"}},\"setUserUseReserveAsCollateral(address,uint256,bool)\":{\"params\":{\"asset\":\"The address of the underlying asset supplied\",\"index\":\"The index of the user's position\",\"useAsCollateral\":\"True if the user wants to use the supply as collateral, false otherwise\"}},\"supply(address,uint256,uint256,(bytes,bytes))\":{\"params\":{\"amount\":\"The amount to be supplied\",\"asset\":\"The address of the underlying asset to supply\",\"data\":\"Extra data that gets passed to the hook and to the interest rate strategy\",\"index\":\"The index of the user's position\"},\"returns\":{\"_0\":\"The amount of shares minted\"}},\"supplySimple(address,uint256,uint256)\":{\"details\":\"See [supply(...)](#supply) for the full documentation. This call executes the same function with dummy data params\"},\"withdraw(address,uint256,uint256,(bytes,bytes))\":{\"params\":{\"amount\":\"The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance\",\"asset\":\"The address of the underlying asset to withdraw\",\"data\":\"Extra data that gets passed to the hook and to the interest rate strategy\",\"index\":\"The index of the user's position\"},\"returns\":{\"_0\":\"The amount of shares burnt\"}},\"withdrawSimple(address,uint256,uint256)\":{\"details\":\"See [withdraw(...)](#withdraw) for the full documentation. This call executes the same function with dummy data params\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(address,uint256,uint256,(bytes,bytes))\":{\"notice\":\"Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower already supplied enough collateral, or he was given enough allowance by a credit delegator on the corresponding debt token (StableDebtToken or VariableDebtToken) - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet   and 100 stable/variable debt tokens, depending on the `interestRateMode`\"},\"factory()\":{\"notice\":\"The factory contract that created this contract\"},\"flashLoan(address,address,uint256,bytes,(bytes,bytes))\":{\"notice\":\"Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned.\"},\"getAssetPrice(address)\":{\"notice\":\"Returns the asset price in the base currency\"},\"getBalance(address,address,uint256)\":{\"notice\":\"Get the balance of a specific asset for a user given a position index\"},\"getBalanceByPosition(address,bytes32)\":{\"notice\":\"Get the balance of a specific asset in a specific position.\"},\"getBalanceRaw(address,address,uint256)\":{\"notice\":\"Gets the raw balance object for the asset for a given user and the position index.\"},\"getBalanceRawByPositionId(address,bytes32)\":{\"notice\":\"Gets the raw balance object for the asset for a given position id\"},\"getConfiguration(address)\":{\"notice\":\"Returns the configuration of the reserve\"},\"getConfigurator()\":{\"notice\":\"Gets the Pool Configurator\"},\"getDebt(address,address,uint256)\":{\"notice\":\"Get the debt of a specific asset for a user given a position index\"},\"getDebtByPosition(address,bytes32)\":{\"notice\":\"Get the debt of a specific asset in a specific position.\"},\"getHook()\":{\"notice\":\"Returns the current hook for the pool.\"},\"getReserveAddressById(uint16)\":{\"notice\":\"Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\"},\"getReserveData(address)\":{\"notice\":\"Returns the state and configuration of the reserve\"},\"getReserveFactor()\":{\"notice\":\"Gets the reserve factor that this pool charges. The reserve factory is the percentage of revenue that the pool shares with the governance.\"},\"getReserveNormalizedIncome(address)\":{\"notice\":\"Returns the normalized income of the reserve\"},\"getReserveNormalizedVariableDebt(address)\":{\"notice\":\"Returns the normalized variable debt per unit of asset\"},\"getReservesCount()\":{\"notice\":\"Returns the number of initialized reserves\"},\"getReservesList()\":{\"notice\":\"Returns the list of the underlying assets of all the initialized reserves\"},\"getTotalSupplyRaw(address)\":{\"notice\":\"Gets the raw reserve supply object for a given asset.\"},\"getUserAccountData(address,uint256)\":{\"notice\":\"Returns the user account data across all the reserves\"},\"getUserConfiguration(address,uint256)\":{\"notice\":\"Returns the configuration of the user across all the reserves\"},\"initialize((address,address[],address[],address[],(bool,bool,uint256,uint256,uint256,uint256,uint256,uint256)[]))\":{\"notice\":\"Initializes the Pool.\"},\"liquidate(address,address,bytes32,uint256,(bytes,bytes))\":{\"notice\":\"Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\"},\"repay(address,uint256,uint256,(bytes,bytes))\":{\"notice\":\"Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\"},\"revision()\":{\"notice\":\"Returns the version of the pool implementation\"},\"setReserveConfiguration(address,address,address,(uint256))\":{\"notice\":\"Sets the configuration bitmap of the reserve as a whole\"},\"setUserUseReserveAsCollateral(address,uint256,bool)\":{\"notice\":\"Allows suppliers to enable/disable a specific supplied asset as collateral\"},\"supply(address,uint256,uint256,(bytes,bytes))\":{\"notice\":\"Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC\"},\"withdraw(address,uint256,uint256,(bytes,bytes))\":{\"notice\":\"Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/pool/Pool.sol\":\"Pool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/core/pool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IHook} from '../../interfaces/IHook.sol';\\n\\nimport {IPoolFactory} from '../../interfaces/IPoolFactory.sol';\\nimport {IPool, IPoolSetters} from '../../interfaces/pool/IPool.sol';\\nimport {PoolGetters} from './PoolGetters.sol';\\n\\nimport {PoolSetters} from './PoolSetters.sol';\\n\\nimport {DataTypes} from './configuration/DataTypes.sol';\\nimport {ReserveLogic} from './logic/PoolLogic.sol';\\nimport {PoolLogic} from './logic/PoolLogic.sol';\\n\\ncontract Pool is PoolSetters {\\n  using ReserveLogic for DataTypes.ReserveCache;\\n  using ReserveLogic for DataTypes.ReserveData;\\n\\n  /**\\n   * @notice Initializes the Pool.\\n   * @dev This function is invoked by the factory contract when the Pool is created\\n   */\\n  function initialize(DataTypes.InitPoolParams memory params) public virtual initializer {\\n    _factory = IPoolFactory(msg.sender);\\n    _hook = IHook(params.hook);\\n\\n    for (uint256 i = 0; i < params.assets.length; i++) {\\n      PoolLogic.executeInitReserve(\\n        _reserves,\\n        _reservesList,\\n        DataTypes.InitReserveParams({\\n          asset: params.assets[i],\\n          interestRateStrategyAddress: params.rateStrategyAddresses[i],\\n          oracle: params.sources[i],\\n          reservesCount: _reservesCount,\\n          configuration: params.configurations[i]\\n        })\\n      );\\n\\n      _reservesCount++;\\n    }\\n\\n    __PoolRentrancyGuard_init();\\n  }\\n\\n  /// @inheritdoc IPool\\n  function revision() external pure virtual returns (uint256) {\\n    return 1;\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) public returns (DataTypes.SharesType memory) {\\n    return _supply(asset, amount, index, data);\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function supplySimple(address asset, uint256 amount, uint256 index) public returns (DataTypes.SharesType memory) {\\n    return _supply(asset, amount, index, DataTypes.ExtraData({interestRateData: '', hookData: ''}));\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) public returns (DataTypes.SharesType memory) {\\n    return _withdraw(asset, amount, index, data);\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function withdrawSimple(address asset, uint256 amount, uint256 index) public returns (DataTypes.SharesType memory) {\\n    return _withdraw(asset, amount, index, DataTypes.ExtraData({interestRateData: '', hookData: ''}));\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) public returns (DataTypes.SharesType memory) {\\n    return _borrow(asset, amount, index, data);\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function borrowSimple(address asset, uint256 amount, uint256 index) public returns (DataTypes.SharesType memory) {\\n    return _borrow(asset, amount, index, DataTypes.ExtraData({interestRateData: '', hookData: ''}));\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) public returns (DataTypes.SharesType memory) {\\n    return _repay(asset, amount, index, data);\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function repaySimple(address asset, uint256 amount, uint256 index) public returns (DataTypes.SharesType memory) {\\n    return _repay(asset, amount, index, DataTypes.ExtraData({interestRateData: '', hookData: ''}));\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function liquidate(address collat, address debt, bytes32 pos, uint256 debtAmt, DataTypes.ExtraData memory data) public {\\n    _liquidate(collat, debt, pos, debtAmt, data);\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function liquidateSimple(address collat, address debt, bytes32 pos, uint256 debtAmt) public {\\n    _liquidate(collat, debt, pos, debtAmt, DataTypes.ExtraData({interestRateData: '', hookData: ''}));\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function flashLoan(address receiverAddress, address asset, uint256 amount, bytes calldata params, DataTypes.ExtraData memory data) public {\\n    _flashLoan(receiverAddress, asset, amount, params, data);\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function flashLoanSimple(address receiverAddress, address asset, uint256 amount, bytes calldata params) public {\\n    _flashLoan(receiverAddress, asset, amount, params, DataTypes.ExtraData({interestRateData: '', hookData: ''}));\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function setReserveConfiguration(\\n    address asset,\\n    address rateStrategy,\\n    address source,\\n    DataTypes.ReserveConfigurationMap calldata config\\n  ) external virtual {\\n    require(msg.sender == address(_factory.configurator()), 'only configurator');\\n    PoolLogic.setReserveConfiguration(_reserves, asset, rateStrategy, source, config);\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function forceUpdateReserve(address asset) public {\\n    DataTypes.ReserveData storage reserve = _reserves[asset];\\n    DataTypes.ReserveCache memory cache = reserve.cache(_totalSupplies[asset]);\\n    reserve.updateState(0, cache);\\n  }\\n\\n  /// @inheritdoc IPoolSetters\\n  function forceUpdateReserves() external {\\n    for (uint256 i = 0; i < _reservesCount; i++) {\\n      forceUpdateReserve(_reservesList[i]);\\n    }\\n  }\\n\\n  function setUserUseReserveAsCollateral(address asset, uint256 index, bool useAsCollateral) external {\\n    // todo\\n  }\\n}\\n\",\"keccak256\":\"0x2db0d68ce0d207aaff5597869e16643e740f80228744ad8c53f9c3ce4bc46cd7\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/PoolGetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IAggregatorInterface} from '../../interfaces/IAggregatorInterface.sol';\\nimport {IHook, IPool, IPoolFactory, IPoolGetters} from '../../interfaces/pool/IPool.sol';\\n\\nimport {PoolStorage} from './PoolStorage.sol';\\nimport {DataTypes} from './configuration/DataTypes.sol';\\nimport {PositionBalanceConfiguration} from './configuration/PositionBalanceConfiguration.sol';\\n\\nimport {ReserveSuppliesConfiguration} from './configuration/ReserveSuppliesConfiguration.sol';\\nimport {TokenConfiguration} from './configuration/TokenConfiguration.sol';\\nimport {PoolLogic} from './logic/PoolLogic.sol';\\nimport {ReserveLogic} from './logic/ReserveLogic.sol';\\n\\n/**\\n * @notice Provides all the getters and the view functions for the pool\\n */\\nabstract contract PoolGetters is PoolStorage, IPool {\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using TokenConfiguration for address;\\n  using ReserveSuppliesConfiguration for DataTypes.ReserveSupplies;\\n  using PositionBalanceConfiguration for DataTypes.PositionBalance;\\n  using ReserveLogic for DataTypes.ReserveCache;\\n\\n  /// @inheritdoc IPoolGetters\\n  function getReserveData(address asset) external view virtual override returns (DataTypes.ReserveData memory) {\\n    return _reserves[asset];\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getBalanceByPosition(address asset, bytes32 positionId) external view returns (uint256 balance) {\\n    return _balances[asset][positionId].getSupplyBalance(_reserves[asset].liquidityIndex);\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getHook() external view returns (IHook) {\\n    return _hook;\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getBalance(address asset, address who, uint256 index) external view returns (uint256 balance) {\\n    bytes32 positionId = who.getPositionId(index);\\n    return _balances[asset][positionId].getSupplyBalance(_reserves[asset].liquidityIndex);\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getBalanceRawByPositionId(address asset, bytes32 positionId) external view returns (DataTypes.PositionBalance memory) {\\n    return _balances[asset][positionId];\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getBalanceRaw(address asset, address who, uint256 index) external view returns (DataTypes.PositionBalance memory) {\\n    bytes32 positionId = who.getPositionId(index);\\n    return _balances[asset][positionId];\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getTotalSupplyRaw(address asset) external view returns (DataTypes.ReserveSupplies memory) {\\n    return _totalSupplies[asset];\\n  }\\n\\n  //// @inheritdoc IPoolGetters\\n  function totalAssets(address asset) external view returns (uint256 balance) {\\n    balance = _totalSupplies[asset].getSupplyBalance(_reserves[asset].liquidityIndex);\\n  }\\n\\n  //// @inheritdoc IPoolGetters\\n  function totalDebt(address asset) external view returns (uint256 balance) {\\n    balance = _totalSupplies[asset].getDebtBalance(_reserves[asset].borrowIndex);\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getDebtByPosition(address asset, bytes32 positionId) external view returns (uint256 debt) {\\n    return _balances[asset][positionId].getDebtBalance(_reserves[asset].borrowIndex);\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getDebt(address asset, address who, uint256 index) external view returns (uint256 debt) {\\n    bytes32 positionId = who.getPositionId(index);\\n    return _balances[asset][positionId].getDebtBalance(_reserves[asset].borrowIndex);\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getUserAccountData(\\n    address user,\\n    uint256 index\\n  ) external view virtual override returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\n    bytes32 positionId = user.getPositionId(index);\\n    return PoolLogic.executeGetUserAccountData(\\n      _balances,\\n      _reserves,\\n      _reservesList,\\n      DataTypes.CalculateUserAccountDataParams({\\n        userConfig: _usersConfig[positionId],\\n        reservesCount: _reservesCount,\\n        position: positionId,\\n        pool: address(this)\\n      })\\n    );\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getConfiguration(address asset) external view virtual override returns (DataTypes.ReserveConfigurationMap memory) {\\n    return _reserves[asset].configuration;\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getUserConfiguration(address user, uint256 index) external view virtual override returns (DataTypes.UserConfigurationMap memory) {\\n    return _usersConfig[user.getPositionId(index)];\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getReserveNormalizedIncome(address reserve) external view virtual override returns (uint256) {\\n    return _reserves[reserve].getNormalizedIncome();\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getReserveNormalizedVariableDebt(address reserve) external view virtual override returns (uint256) {\\n    return _reserves[reserve].getNormalizedDebt();\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getReservesList() external view virtual override returns (address[] memory) {\\n    address[] memory reservesList = new address[](_reservesCount);\\n    for (uint256 i = 0; i < _reservesCount; i++) {\\n      reservesList[i] = _reservesList[i];\\n    }\\n    return reservesList;\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getReservesCount() external view virtual override returns (uint256) {\\n    return _reservesCount;\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getConfigurator() external view override returns (address) {\\n    return address(_factory.configurator());\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getReserveAddressById(uint16 id) external view returns (address) {\\n    return _reservesList[id];\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getAssetPrice(address reserve) public view override returns (uint256) {\\n    return uint256(IAggregatorInterface(_reserves[reserve].oracle).latestAnswer());\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function factory() external view returns (IPoolFactory) {\\n    return _factory;\\n  }\\n\\n  /// @inheritdoc IPoolGetters\\n  function getReserveFactor() external view returns (uint256 reseveFactor) {\\n    return _factory.reserveFactor();\\n  }\\n\\n  function supplyShares(address asset, bytes32 positionId) external view returns (uint256 shares) {\\n    return _balances[asset][positionId].supplyShares;\\n  }\\n\\n  function marketBalances(address asset) public view returns (uint256, uint256, uint256, uint256) {\\n    DataTypes.ReserveSupplies storage supplies = _totalSupplies[asset];\\n\\n    return (\\n      supplies.getSupplyBalance(_reserves[asset].liquidityIndex),\\n      supplies.supplyShares,\\n      supplies.getDebtBalance(_reserves[asset].borrowIndex),\\n      supplies.debtShares\\n    );\\n  }\\n\\n  function supplyAssets(address asset, bytes32 positionId) external view returns (uint256) {\\n    return _balances[asset][positionId].getSupplyBalance(_reserves[asset].liquidityIndex);\\n  }\\n}\\n\",\"keccak256\":\"0x24f65752cc49073427eaefbda9d42a77e695c9983db1d1814853d464c240ee15\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/PoolRentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\n/**\\n * @title PoolRentrancyGuard\\n * @author ZeroLend\\n * @notice This is specialized rentrancy contract that checks the rentrancy state for lending, flashloans and\\n * liquidations seperately.\\n */\\nabstract contract PoolRentrancyGuard is Initializable {\\n  enum RentrancyKind {\\n    LENDING,\\n    FLASHLOAN,\\n    LIQUIDATION\\n  }\\n\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  /// @notice _status keeps tracks of the various rentrancy statuses\\n  mapping(RentrancyKind kind => uint256 status) private _status;\\n\\n  function __PoolRentrancyGuard_init() internal onlyInitializing {\\n    _status[RentrancyKind.LENDING] = _NOT_ENTERED;\\n    _status[RentrancyKind.FLASHLOAN] = _NOT_ENTERED;\\n    _status[RentrancyKind.LIQUIDATION] = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and making it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant(RentrancyKind kind) {\\n    _nonReentrantBefore(kind);\\n    _;\\n    _nonReentrantAfter(kind);\\n  }\\n\\n  function _nonReentrantBefore(RentrancyKind kind) private {\\n    // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n    require(_status[kind] != _ENTERED, 'PoolRentrancyGuard: reentrant call');\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status[kind] = _ENTERED;\\n  }\\n\\n  function _nonReentrantAfter(RentrancyKind kind) private {\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status[kind] = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5b4714f60b4cd7a636f959a3ec03021205600a0c7a675e4b15d7809999b3a7de\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/PoolSetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IPool} from '../../interfaces/pool/IPool.sol';\\n\\nimport {PoolGetters} from './PoolGetters.sol';\\n\\nimport {PoolRentrancyGuard} from './PoolRentrancyGuard.sol';\\nimport {DataTypes} from './configuration/DataTypes.sol';\\nimport {ReserveConfiguration} from './configuration/ReserveConfiguration.sol';\\n\\nimport {PoolErrorsLib} from '../../interfaces/errors/PoolErrorsLib.sol';\\nimport {TokenConfiguration} from './configuration/TokenConfiguration.sol';\\nimport {BorrowLogic} from './logic/BorrowLogic.sol';\\nimport {FlashLoanLogic} from './logic/FlashLoanLogic.sol';\\nimport {LiquidationLogic} from './logic/LiquidationLogic.sol';\\nimport {PoolLogic} from './logic/PoolLogic.sol';\\nimport {SupplyLogic} from './logic/SupplyLogic.sol';\\nimport {PercentageMath} from './utils/PercentageMath.sol';\\n\\nabstract contract PoolSetters is PoolRentrancyGuard, PoolGetters {\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using PercentageMath for uint256;\\n  using TokenConfiguration for address;\\n\\n  function _supply(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) internal nonReentrant(RentrancyKind.LENDING) returns (DataTypes.SharesType memory res) {\\n    bytes32 pos = msg.sender.getPositionId(index);\\n    if (address(_hook) != address(0)) _hook.beforeSupply(msg.sender, pos, asset, address(this), amount, data.hookData);\\n\\n    res = SupplyLogic.executeSupply(\\n      _reserves[asset],\\n      _usersConfig[pos],\\n      _balances[asset][pos],\\n      _totalSupplies[asset],\\n      DataTypes.ExecuteSupplyParams({\\n        reserveFactor: _factory.reserveFactor(),\\n        asset: asset,\\n        amount: amount,\\n        data: data,\\n        position: pos,\\n        pool: address(this)\\n      })\\n    );\\n\\n    if (address(_hook) != address(0)) _hook.afterSupply(msg.sender, pos, asset, address(this), amount, data.hookData);\\n  }\\n\\n  function _withdraw(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) internal nonReentrant(RentrancyKind.LENDING) returns (DataTypes.SharesType memory res) {\\n    bytes32 pos = msg.sender.getPositionId(index);\\n    require(amount <= _balances[asset][pos].supplyShares, 'Insufficient Balance!');\\n\\n    if (address(_hook) != address(0)) _hook.beforeWithdraw(msg.sender, pos, asset, address(this), amount, data.hookData);\\n\\n    res = SupplyLogic.executeWithdraw(\\n      _reserves,\\n      _reservesList,\\n      _usersConfig[pos],\\n      _balances,\\n      _totalSupplies[asset],\\n      DataTypes.ExecuteWithdrawParams({\\n        reserveFactor: _factory.reserveFactor(),\\n        destination: msg.sender,\\n        asset: asset,\\n        amount: amount,\\n        position: pos,\\n        data: data,\\n        reservesCount: _reservesCount,\\n        pool: address(this)\\n      })\\n    );\\n\\n    PoolLogic.executeMintToTreasury(_reserves, asset);\\n\\n    if (address(_hook) != address(0)) _hook.afterWithdraw(msg.sender, pos, asset, address(this), amount, data.hookData);\\n  }\\n\\n  function _borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) internal nonReentrant(RentrancyKind.LENDING) returns (DataTypes.SharesType memory res) {\\n    bytes32 pos = msg.sender.getPositionId(index);\\n    if (address(_hook) != address(0)) _hook.beforeBorrow(msg.sender, pos, asset, address(this), amount, data.hookData);\\n\\n    res = BorrowLogic.executeBorrow(\\n      _reserves,\\n      _reservesList,\\n      _usersConfig[pos],\\n      _balances,\\n      _totalSupplies[asset],\\n      DataTypes.ExecuteBorrowParams({\\n        reserveFactor: _factory.reserveFactor(),\\n        asset: asset,\\n        user: msg.sender,\\n        position: pos,\\n        amount: amount,\\n        data: data,\\n        reservesCount: _reservesCount,\\n        pool: address(this)\\n      })\\n    );\\n\\n    if (address(_hook) != address(0)) _hook.afterBorrow(msg.sender, pos, asset, address(this), amount, data.hookData);\\n  }\\n\\n  function _repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) internal nonReentrant(RentrancyKind.LENDING) returns (DataTypes.SharesType memory res) {\\n    bytes32 pos = msg.sender.getPositionId(index);\\n    if (address(_hook) != address(0)) _hook.beforeRepay(msg.sender, pos, asset, address(this), amount, data.hookData);\\n\\n    res = BorrowLogic.executeRepay(\\n      _reserves[asset],\\n      _balances[asset][pos],\\n      _totalSupplies[asset],\\n      DataTypes.ExecuteRepayParams({\\n        reserveFactor: _factory.reserveFactor(),\\n        asset: asset,\\n        amount: amount,\\n        user: msg.sender,\\n        pool: address(this),\\n        position: pos,\\n        data: data\\n      })\\n    );\\n\\n    if (address(_hook) != address(0)) _hook.afterRepay(msg.sender, pos, asset, address(this), amount, data.hookData);\\n  }\\n\\n  function _liquidate(\\n    address collat,\\n    address debt,\\n    bytes32 pos,\\n    uint256 debtAmt,\\n    DataTypes.ExtraData memory data\\n  ) internal nonReentrant(RentrancyKind.LIQUIDATION) {\\n    if (address(_hook) != address(0)) _hook.beforeLiquidate(msg.sender, pos, collat, debt, debtAmt, address(this), data.hookData);\\n\\n    LiquidationLogic.executeLiquidationCall(\\n      _reserves,\\n      _reservesList,\\n      _balances,\\n      _totalSupplies,\\n      _usersConfig,\\n      DataTypes.ExecuteLiquidationCallParams({\\n        reserveFactor: _factory.reserveFactor(),\\n        reservesCount: _reservesCount,\\n        debtToCover: debtAmt,\\n        collateralAsset: collat,\\n        debtAsset: debt,\\n        position: pos,\\n        data: data,\\n        pool: address(this)\\n      })\\n    );\\n\\n    if (address(_hook) != address(0)) _hook.afterLiquidate(msg.sender, pos, collat, debt, debtAmt, address(this), data.hookData);\\n  }\\n\\n  function _flashLoan(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    DataTypes.ExtraData memory data\\n  ) public virtual nonReentrant(RentrancyKind.FLASHLOAN) {\\n    DataTypes.FlashloanSimpleParams memory flashParams = DataTypes.FlashloanSimpleParams({\\n      receiverAddress: receiverAddress,\\n      asset: asset,\\n      amount: amount,\\n      data: data,\\n      reserveFactor: _factory.reserveFactor(),\\n      params: params,\\n      flashLoanPremiumTotal: _factory.flashLoanPremiumToProtocol()\\n    });\\n    FlashLoanLogic.executeFlashLoanSimple(address(this), _reserves[asset], _totalSupplies[asset], flashParams);\\n  }\\n}\\n\",\"keccak256\":\"0x5b6689dd6f8fbcb2bcd827ecec7236c65a323a66cbbae1f722cf0e3d162bd061\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/PoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IHook} from '../../interfaces/IHook.sol';\\nimport {IPoolFactory} from '../../interfaces/IPoolFactory.sol';\\nimport {DataTypes} from './configuration/DataTypes.sol';\\n\\n/**\\n * @title PoolStorage Child Contract\\n * @author ZeroLend\\n * @notice Contract used as storage of the Pool contract.\\n * @dev It defines the storage layout of the Pool contract.\\n */\\ncontract PoolStorage {\\n  /// @notice Map of reserves and their data (underlyingAssetOfReserve => reserveData)\\n  mapping(address asset => DataTypes.ReserveData data) internal _reserves;\\n\\n  /// @notice Map of positions and their configuration data (userAddress => userConfiguration)\\n  mapping(bytes32 position => DataTypes.UserConfigurationMap config) internal _usersConfig;\\n\\n  /// @notice Map of position's individual balances\\n  mapping(address reserve => mapping(bytes32 position => DataTypes.PositionBalance balance)) internal _balances;\\n\\n  /// @notice Map of total supply of tokens\\n  mapping(address reserve => DataTypes.ReserveSupplies totalSupply) internal _totalSupplies;\\n\\n  /// @notice List of reserves as a map (reserveId => reserve).\\n  /// It is structured as a mapping for gas savings reasons, using the reserve id as index\\n  mapping(uint256 reserveId => address reserve) internal _reservesList;\\n\\n  /// @notice Number of active reserves in the pool\\n  uint16 internal _reservesCount;\\n\\n  /// @notice The original factory contract with protocol-level control variables\\n  IPoolFactory internal _factory;\\n\\n  /// @notice The assigned hook for this pool\\n  IHook internal _hook;\\n}\\n\",\"keccak256\":\"0xa577f1e08f237d4742022a749795d07edac3a2343565d40b1785245153f12069\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/configuration/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    // stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    // the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    // the current supply rate. Expressed in ray\\n    uint128 liquidityRate;\\n    // variable borrow index. Expressed in ray\\n    uint128 borrowIndex;\\n    // the current borrow rate. Expressed in ray\\n    uint128 borrowRate;\\n    // timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    // the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    // address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    // address of the oracle\\n    address oracle;\\n    // the current treasury balance in shares\\n    uint256 accruedToTreasuryShares;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    // bit 0-15: LTV\\n    // bit 16-31: Liq. threshold\\n    // bit 32-47: Liq. bonus\\n    // bit 48-55: Decimals\\n    // bit 56: reserve is active\\n    // bit 57: reserve is frozen\\n    // bit 58: borrowing is enabled\\n    // bit 59: stable rate borrowing enabled\\n    // bit 60: asset is paused\\n    // bit 61: borrowing in isolation mode is enabled\\n    // bit 62: siloed borrowing enabled\\n    // bit 63: flashloaning enabled\\n    // bit 64-79: reserve factor\\n    // bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    // bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    // bit 152-167 liquidation protocol fee\\n    // bit 168-175 eMode category\\n    // bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    // bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    // bit 252-255 unused\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct ReserveCache {\\n    ReserveConfigurationMap reserveConfiguration;\\n    uint128 currBorrowIndex;\\n    uint128 currLiquidityIndex;\\n    uint128 nextBorrowIndex;\\n    uint128 nextLiquidityIndex;\\n    uint256 currBorrowRate;\\n    uint256 currDebtShares;\\n    uint256 currLiquidityRate;\\n    uint256 nextDebtShares;\\n    uint40 reserveLastUpdateTimestamp;\\n  }\\n\\n  struct PositionBalance {\\n    uint128 lastDebtLiquidtyIndex;\\n    uint128 lastSupplyLiquidtyIndex;\\n    uint256 debtShares;\\n    uint256 supplyShares;\\n  }\\n\\n  struct ReserveSupplies {\\n    uint256 debtShares;\\n    uint256 supplyShares;\\n    uint128 underlyingBalance;\\n  }\\n\\n  struct SharesType {\\n    uint256 shares;\\n    uint256 assets;\\n  }\\n\\n  struct ExtraData {\\n    bytes hookData;\\n    bytes interestRateData;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    address collateralAsset;\\n    address debtAsset;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 debtToCover;\\n    uint256 reserveFactor;\\n    uint256 reservesCount;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address pool;\\n    address user;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n    uint256 reservesCount;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    address pool;\\n    address user;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    address destination;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n    uint256 reservesCount;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address asset;\\n    address receiverAddress;\\n    bytes params;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    address asset;\\n    address pool;\\n    address receiverAddress;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n    uint256 totalPremium;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    address pool;\\n    bytes32 position;\\n    uint256 reservesCount;\\n    UserConfigurationMap userConfig;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    address asset;\\n    address pool;\\n    bytes32 position;\\n    ReserveCache cache;\\n    uint256 amount;\\n    uint256 reservesCount;\\n    UserConfigurationMap userConfig;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 healthFactor;\\n    uint256 totalDebt;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    address reserve;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 reserveFactor;\\n    uint256 totalDebt;\\n  }\\n\\n  struct InitReserveConfig {\\n    bool borrowable;\\n    bool frozen;\\n    uint256 borrowCap;\\n    uint256 decimals;\\n    uint256 liquidationBonus;\\n    uint256 liquidationThreshold;\\n    uint256 ltv;\\n    uint256 supplyCap;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address interestRateStrategyAddress;\\n    address oracle;\\n    InitReserveConfig configuration;\\n    uint16 reservesCount;\\n  }\\n\\n  struct InitPoolParams {\\n    address hook;\\n    address[] assets;\\n    address[] rateStrategyAddresses;\\n    address[] sources;\\n    DataTypes.InitReserveConfig[] configurations;\\n  }\\n\\n  struct SeedPoolParams {\\n    address pool;\\n    address[] assets;\\n    uint256[] amounts;\\n  }\\n}\\n\",\"keccak256\":\"0xc13736e9e066217e3d83d8a6117bdf1cd71e83a8a98dffdd4bf5873295343388\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/configuration/PositionBalanceConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {PoolErrorsLib} from '../../../interfaces/errors/PoolErrorsLib.sol';\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\nimport {WadRayMath} from '../utils/WadRayMath.sol';\\n\\n/**\\n * @title PositionBalanceConfiguration\\n * @author ZeroLend\\n * @notice Used to do math between the supply/debt shares variables\\n */\\nlibrary PositionBalanceConfiguration {\\n  using WadRayMath for uint256;\\n\\n  /**\\n   * @notice Deposits `amount` units of an asset as collateral for a position\\n   * @dev Converts `amount` into `shares` and `index` so that rebase values can be tracked properly.\\n   * @param self The position to update\\n   * @param totalSupply The total supply information of the asset\\n   * @param amount The amount to deposit\\n   * @param index The current liquidity index\\n   * @return isFirst True if this is the first supply for the position\\n   * @return sharesMinted How much shares was minted in this operation\\n   */\\n  function depositCollateral(\\n    DataTypes.PositionBalance storage self,\\n    DataTypes.ReserveSupplies storage totalSupply,\\n    uint256 amount,\\n    uint128 index\\n  ) internal returns (bool isFirst, uint256 sharesMinted) {\\n    sharesMinted = amount.rayDiv(index);\\n    require(sharesMinted != 0, PoolErrorsLib.INVALID_MINT_AMOUNT);\\n    uint256 shares = self.supplyShares;\\n    self.lastSupplyLiquidtyIndex = index;\\n    self.supplyShares += sharesMinted;\\n    totalSupply.supplyShares += sharesMinted;\\n    isFirst = shares == 0;\\n  }\\n\\n  /**\\n   * @notice Borrows `amount` units of an asset as debt for a position\\n   * @dev Converts `amount` into `shares` and `index` so that rebase values can be tracked properly.\\n   * @param self The position to update\\n   * @param totalSupply The total supply information of the asset\\n   * @param amount The amount to borrow\\n   * @param index The current liquidity index\\n   * @return isFirst True if this is the first borrow for the position\\n   * @return sharesMinted How much shares was minted in this operation\\n   */\\n  function borrowDebt(\\n    DataTypes.PositionBalance storage self,\\n    DataTypes.ReserveSupplies storage totalSupply,\\n    uint256 amount,\\n    uint128 index\\n  ) internal returns (bool isFirst, uint256 sharesMinted) {\\n    sharesMinted = amount.rayDiv(index);\\n    require(sharesMinted != 0, PoolErrorsLib.INVALID_MINT_AMOUNT);\\n    uint256 shares = self.debtShares;\\n    self.lastDebtLiquidtyIndex = index;\\n    self.debtShares += sharesMinted;\\n    totalSupply.debtShares += sharesMinted;\\n    isFirst = shares == 0;\\n  }\\n\\n  /**\\n   * @notice Withdraws `amount` units of an asset as collateral for a position\\n   * @dev Converts `amount` into `shares` and `index` so that rebase values can be tracked properly.\\n   * @param self The position to update\\n   * @param supply The total supply information of the asset\\n   * @param amount The amount to withdraw\\n   * @param index The current liquidity index\\n   * @return sharesBurnt How much shares was burnt\\n   */\\n  function withdrawCollateral(\\n    DataTypes.PositionBalance storage self,\\n    DataTypes.ReserveSupplies storage supply,\\n    uint256 amount,\\n    uint128 index\\n  ) internal returns (uint256 sharesBurnt) {\\n    sharesBurnt = amount.rayDiv(index);\\n    require(sharesBurnt != 0, PoolErrorsLib.INVALID_BURN_AMOUNT);\\n    self.lastSupplyLiquidtyIndex = index;\\n    self.supplyShares -= sharesBurnt;\\n    supply.supplyShares -= sharesBurnt;\\n  }\\n\\n  /**\\n   * @notice Repays `amount` units of an asset as debt for a position\\n   * @dev Converts `amount` into `shares` and `index` so that rebase values can be tracked properly.\\n   * @param self The position to update\\n   * @param supply The total supply information of the asset\\n   * @param amount The amount to repay\\n   * @param index The current liquidity index\\n   * @return sharesBurnt How much shares was burnt\\n   */\\n  function repayDebt(\\n    DataTypes.PositionBalance storage self,\\n    DataTypes.ReserveSupplies storage supply,\\n    uint256 amount,\\n    uint128 index\\n  ) internal returns (uint256 sharesBurnt) {\\n    sharesBurnt = amount.rayDiv(index);\\n    require(sharesBurnt != 0, PoolErrorsLib.INVALID_BURN_AMOUNT);\\n    self.lastDebtLiquidtyIndex = index;\\n    self.debtShares -= sharesBurnt;\\n    supply.debtShares -= sharesBurnt;\\n  }\\n\\n  /**\\n   * @notice Get the rebased assets worth of collateral the position has\\n   * @dev Converts `shares` into `amount` and returns the rebased value\\n   * @param self The position to fetch the value for\\n   * @param index The current liquidity index\\n   */\\n  function getSupplyBalance(DataTypes.PositionBalance storage self, uint256 index) internal view returns (uint256 supply) {\\n    uint256 increase = self.supplyShares.rayMul(index) - self.supplyShares.rayMul(self.lastSupplyLiquidtyIndex);\\n    return self.supplyShares + increase;\\n  }\\n\\n  /**\\n   * @notice Get the rebased assets worth of debt the position has\\n   * @dev Converts `shares` into `amount` and returns the rebased value\\n   * @param self The position to fetch the value for\\n   * @param index The current liquidity index\\n   */\\n  function getDebtBalance(DataTypes.PositionBalance storage self, uint256 index) internal view returns (uint256 debt) {\\n    uint256 increase = self.debtShares.rayMul(index) - self.debtShares.rayMul(self.lastDebtLiquidtyIndex);\\n    return self.debtShares + increase;\\n  }\\n}\\n\",\"keccak256\":\"0x111af2ddadf9273e64707edd16e4cf15b37546664822b1ed6ddf2f016ad7dc9b\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {PoolErrorsLib} from '../../../interfaces/errors/PoolErrorsLib.sol';\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n *\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n  uint256 internal constant LTV_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_BONUS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n  uint256 internal constant DECIMALS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FLASHLOAN_ENABLED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROW_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SUPPLY_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n  uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n\\n  uint256 internal constant MAX_VALID_LTV = 65_535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65_535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65_535;\\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65_535;\\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68_719_476_735;\\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68_719_476_735;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65_535;\\n\\n  uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n  /**\\n   * @notice Sets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @param ltv The new ltv\\n   */\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n    require(ltv <= MAX_VALID_LTV, PoolErrorsLib.INVALID_LTV);\\n    self.data = (self.data & LTV_MASK) | ltv;\\n  }\\n\\n  /**\\n   * @notice Gets the Loan to Value of the reserve\\n   * @dev If the asset is frozen, then the LTV is set to 0\\n   * @param self The reserve configuration\\n   * @return The loan to value\\n   */\\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    bool frozen = (self.data & ~FROZEN_MASK) != 0;\\n    return frozen ? 0 : self.data & ~LTV_MASK;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @param threshold The new liquidation threshold\\n   */\\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, PoolErrorsLib.INVALID_LIQ_THRESHOLD);\\n\\n    self.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation threshold\\n   */\\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @param bonus The new liquidation bonus\\n   */\\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, PoolErrorsLib.INVALID_LIQ_BONUS);\\n\\n    self.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation bonus\\n   */\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @param decimals The decimals\\n   */\\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\\n    require(decimals <= MAX_VALID_DECIMALS, PoolErrorsLib.INVALID_DECIMALS);\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @return The decimals of the asset\\n   */\\n  function getDecimals(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @param frozen The frozen state\\n   */\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n    self.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @return The frozen state\\n   */\\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\n   */\\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n    self.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrowing state\\n   */\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @param borrowCap The borrow cap\\n   */\\n  function setBorrowCap(DataTypes.ReserveConfigurationMap memory self, uint256 borrowCap) internal pure {\\n    require(borrowCap <= MAX_VALID_BORROW_CAP, PoolErrorsLib.INVALID_BORROW_CAP);\\n\\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrow cap\\n   */\\n  function getBorrowCap(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @param supplyCap The supply cap\\n   */\\n  function setSupplyCap(DataTypes.ReserveConfigurationMap memory self, uint256 supplyCap) internal pure {\\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, PoolErrorsLib.INVALID_SUPPLY_CAP);\\n\\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The supply cap\\n   */\\n  function getSupplyCap(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Gets the configuration flags of the reserve\\n   * @param self The reserve configuration\\n   * @return The state flag representing frozen\\n   * @return The state flag representing borrowing enabled\\n   */\\n  function getFlags(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool, bool) {\\n    uint256 dataLocal = self.data;\\n    return ((dataLocal & ~FROZEN_MASK) != 0, (dataLocal & ~BORROWING_MASK) != 0);\\n  }\\n\\n  /**\\n   * @notice Gets the configuration parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing ltv\\n   * @return The state param representing liquidation threshold\\n   * @return The state param representing liquidation bonus\\n   * @return The state param representing reserve decimals\\n   * @return The state param representing reserve factor\\n   */\\n  function getParams(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      dataLocal & ~LTV_MASK,\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xd44f5c4ca8c5a0b9cc1bcc9ea084db3c0c0990b7ef1c832fc1b149f473a8c3d5\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/configuration/ReserveSuppliesConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\nimport {WadRayMath} from '../utils/WadRayMath.sol';\\n\\n/**\\n * @title ReserveSuppliesConfiguration\\n * @author ZeroLend\\n * @notice Used to do math between the total supply/debt shares\\n */\\nlibrary ReserveSuppliesConfiguration {\\n  using WadRayMath for uint256;\\n\\n  /**\\n   * @notice Get the rebased assets worth of collateral the position has\\n   * @dev Converts `shares` into `amount` and returns the rebased value\\n   * @param self The position to fetch the value for\\n   * @param index The current liquidity index\\n   */\\n  function getSupplyBalance(DataTypes.ReserveSupplies storage self, uint256 index) internal view returns (uint256 supply) {\\n    supply = self.supplyShares.rayMul(index);\\n  }\\n\\n  /**\\n   * @notice Get the rebased assets worth of debt the position has\\n   * @dev Converts `shares` into `amount` and returns the rebased value\\n   * @param self The position to fetch the value for\\n   * @param index The current liquidity index\\n   */\\n  function getDebtBalance(DataTypes.ReserveSupplies storage self, uint256 index) internal view returns (uint256 debt) {\\n    debt = self.debtShares.rayMul(index);\\n  }\\n}\\n\",\"keccak256\":\"0x8b6feac87bb49bdfa33b03ced15ebcc913d2513c8e8d45babf4766d9db74e510\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/configuration/TokenConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nlibrary TokenConfiguration {\\n  function getPositionId(address user, uint256 index) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(user, 'index', index));\\n  }\\n}\\n\",\"keccak256\":\"0x9e17739fb3053c7592b3cc89d618500b966a667bd31b8a55c43dade00ffe9e15\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/configuration/UserConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {PoolErrorsLib} from '../../../interfaces/errors/PoolErrorsLib.sol';\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\nimport {ReserveConfiguration} from './ReserveConfiguration.sol';\\n\\n/**\\n * @title UserConfiguration library\\n *\\n * @notice Implements the bitmap logic to handle the user configuration\\n */\\nlibrary UserConfiguration {\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n  uint256 internal constant BORROWING_MASK = 0x5555555555555555555555555555555555555555555555555555555555555555;\\n  uint256 internal constant COLLATERAL_MASK = 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\\n\\n  /**\\n   * @notice Sets if the user is borrowing the reserve identified by reserveIndex\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @param borrowing True if the user is borrowing the reserve, false otherwise\\n   */\\n  function setBorrowing(DataTypes.UserConfigurationMap storage self, uint256 reserveIndex, bool borrowing) internal {\\n    unchecked {\\n      uint256 bit = 1 << (reserveIndex << 1);\\n      if (borrowing) {\\n        self.data |= bit;\\n      } else {\\n        self.data &= ~bit;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets if the user is using as collateral the reserve identified by reserveIndex\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @param usingAsCollateral True if the user is using the reserve as collateral, false otherwise\\n   */\\n  function setUsingAsCollateral(DataTypes.UserConfigurationMap storage self, uint256 reserveIndex, bool usingAsCollateral) internal {\\n    unchecked {\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, PoolErrorsLib.INVALID_RESERVE_INDEX);\\n      uint256 bit = 1 << ((reserveIndex << 1) + 1);\\n      if (usingAsCollateral) {\\n        self.data |= bit;\\n      } else {\\n        self.data &= ~bit;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns if a user has been using the reserve for borrowing or as collateral\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\n   */\\n  function isUsingAsCollateralOrBorrowing(DataTypes.UserConfigurationMap memory self, uint256 reserveIndex) internal pure returns (bool) {\\n    unchecked {\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, PoolErrorsLib.INVALID_RESERVE_INDEX);\\n      return (self.data >> (reserveIndex << 1)) & 3 != 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Validate a user has been using the reserve for borrowing\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @return True if the user has been using a reserve for borrowing, false otherwise\\n   */\\n  function isBorrowing(DataTypes.UserConfigurationMap memory self, uint256 reserveIndex) internal pure returns (bool) {\\n    unchecked {\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, PoolErrorsLib.INVALID_RESERVE_INDEX);\\n      return (self.data >> (reserveIndex << 1)) & 1 != 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Validate a user has been using the reserve as collateral\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @return True if the user has been using a reserve as collateral, false otherwise\\n   */\\n  function isUsingAsCollateral(DataTypes.UserConfigurationMap memory self, uint256 reserveIndex) internal pure returns (bool) {\\n    unchecked {\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, PoolErrorsLib.INVALID_RESERVE_INDEX);\\n      return (self.data >> ((reserveIndex << 1) + 1)) & 1 != 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if a user has been supplying only one reserve as collateral\\n   * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\\n   * @param self The configuration object\\n   * @return True if the user has been supplying as collateral one reserve, false otherwise\\n   */\\n  function isUsingAsCollateralOne(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n    uint256 collateralData = self.data & COLLATERAL_MASK;\\n    return collateralData != 0 && (collateralData & (collateralData - 1) == 0);\\n  }\\n\\n  /**\\n   * @notice Checks if a user has been supplying any reserve as collateral\\n   * @param self The configuration object\\n   * @return True if the user has been supplying as collateral any reserve, false otherwise\\n   */\\n  function isUsingAsCollateralAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n    return self.data & COLLATERAL_MASK != 0;\\n  }\\n\\n  /**\\n   * @notice Checks if a user has been borrowing only one asset\\n   * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\\n   * @param self The configuration object\\n   * @return True if the user has been supplying as collateral one reserve, false otherwise\\n   */\\n  function isBorrowingOne(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n    uint256 borrowingData = self.data & BORROWING_MASK;\\n    return borrowingData != 0 && (borrowingData & (borrowingData - 1) == 0);\\n  }\\n\\n  /**\\n   * @notice Checks if a user has been borrowing from any reserve\\n   * @param self The configuration object\\n   * @return True if the user has been borrowing any reserve, false otherwise\\n   */\\n  function isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n    return self.data & BORROWING_MASK != 0;\\n  }\\n\\n  /**\\n   * @notice Checks if a user has not been using any reserve for borrowing or supply\\n   * @param self The configuration object\\n   * @return True if the user has not been borrowing or supplying any reserve, false otherwise\\n   */\\n  function isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n    return self.data == 0;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the first asset flagged in the bitmap given the corresponding bitmask\\n   * @param self The configuration object\\n   * @return The index of the first asset flagged in the bitmap once the corresponding mask is applied\\n   */\\n  function _getFirstAssetIdByMask(DataTypes.UserConfigurationMap memory self, uint256 mask) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 bitmapData = self.data & mask;\\n      uint256 firstAssetPosition = bitmapData & ~(bitmapData - 1);\\n      uint256 id;\\n\\n      while ((firstAssetPosition >>= 2) != 0) {\\n        id += 1;\\n      }\\n      return id;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3126bb9a6d3571aa5a31c86d5fb16b906ca5e1040e881fabe80c7c8932483deb\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/logic/BorrowLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IPool} from '../../../interfaces/pool/IPool.sol';\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\nimport {PositionBalanceConfiguration} from '../configuration/PositionBalanceConfiguration.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\n\\nimport {PoolEventsLib} from '../../../interfaces/events/PoolEventsLib.sol';\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {ValidationLogic} from './ValidationLogic.sol';\\nimport {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/math/SafeCast.sol';\\n\\n/**\\n * @title BorrowLogic library\\n * @notice Implements the base logic for all the actions related to borrowing\\n */\\nlibrary BorrowLogic {\\n  using ReserveLogic for DataTypes.ReserveCache;\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using SafeERC20 for IERC20;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using PositionBalanceConfiguration for DataTypes.PositionBalance;\\n  using SafeCast for uint256;\\n\\n  /**\\n   * @notice Implements the borrow feature. Borrowing allows users that provided collateral to draw liquidity from the\\n   * protocol proportionally to their collateralization power.\\n   * @dev  Emits the `Borrow()` event\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\n   * @param params The additional parameters needed to execute the borrow function\\n   */\\n  function executeBorrow(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    mapping(address => mapping(bytes32 => DataTypes.PositionBalance)) storage _balances,\\n    DataTypes.ReserveSupplies storage totalSupplies,\\n    DataTypes.ExecuteBorrowParams memory params\\n  ) public returns (DataTypes.SharesType memory borrowed) {\\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n    DataTypes.ReserveCache memory cache = reserve.cache(totalSupplies);\\n\\n    reserve.updateState(params.reserveFactor, cache);\\n\\n    ValidationLogic.validateBorrow(\\n      _balances,\\n      reservesData,\\n      reservesList,\\n      DataTypes.ValidateBorrowParams({\\n        cache: cache,\\n        userConfig: userConfig,\\n        asset: params.asset,\\n        position: params.position,\\n        amount: params.amount,\\n        reservesCount: params.reservesCount,\\n        pool: params.pool\\n      })\\n    );\\n\\n    // mint debt tokens\\n    DataTypes.PositionBalance storage b = _balances[params.asset][params.position];\\n    bool isFirstBorrowing;\\n    (isFirstBorrowing, borrowed.shares) = b.borrowDebt(totalSupplies, params.amount, cache.nextBorrowIndex);\\n    cache.nextDebtShares = totalSupplies.debtShares;\\n\\n    // if first borrowing, flag that\\n    if (isFirstBorrowing) userConfig.setBorrowing(reserve.id, true);\\n\\n    reserve.updateInterestRates(\\n      totalSupplies,\\n      cache,\\n      params.asset,\\n      IPool(params.pool).getReserveFactor(),\\n      0,\\n      params.amount,\\n      params.position,\\n      params.data.interestRateData\\n    );\\n\\n    IERC20(params.asset).safeTransfer(params.user, params.amount);\\n\\n    emit PoolEventsLib.Borrow(params.asset, params.user, params.position, params.amount, reserve.borrowRate);\\n\\n    borrowed.assets = params.amount;\\n  }\\n\\n  /**\\n   * @notice Implements the repay feature. Repaying transfers the underlying back to the aToken and clears the\\n   * equivalent amount of debt for the user by burning the corresponding debt token.\\n   * @dev  Emits the `Repay()` event\\n   * @param reserve The state of the reserve\\n   * @param balances The balance of the position\\n   * @param totalSupplies The total supply of the reserve\\n   * @param params The additional parameters needed to execute the repay function\\n   * @return payback The actual amount being repaid\\n   */\\n  function executeRepay(\\n    DataTypes.ReserveData storage reserve,\\n    DataTypes.PositionBalance storage balances,\\n    DataTypes.ReserveSupplies storage totalSupplies,\\n    DataTypes.ExecuteRepayParams memory params\\n  ) external returns (DataTypes.SharesType memory payback) {\\n    DataTypes.ReserveCache memory cache = reserve.cache(totalSupplies);\\n    reserve.updateState(params.reserveFactor, cache);\\n    payback.assets = balances.getDebtBalance(cache.nextBorrowIndex);\\n\\n    // Allows a user to max repay without leaving dust from interest.\\n    if (params.amount == type(uint256).max) {\\n      params.amount = balances.getDebtBalance(cache.nextBorrowIndex);\\n      payback.assets = params.amount;\\n    }\\n\\n    ValidationLogic.validateRepay(params.amount, payback.assets);\\n\\n    // If paybackAmount is more than what the user wants to payback, the set it to the\\n    // user input (ie params.amount)\\n    if (params.amount < payback.assets) payback.assets = params.amount;\\n\\n    reserve.updateInterestRates(\\n      totalSupplies,\\n      cache,\\n      params.asset,\\n      IPool(params.pool).getReserveFactor(),\\n      payback.assets,\\n      0,\\n      params.position,\\n      params.data.interestRateData\\n    );\\n\\n    // update balances and total supplies\\n    payback.shares = balances.repayDebt(totalSupplies, payback.assets, cache.nextBorrowIndex);\\n    cache.nextDebtShares = totalSupplies.debtShares;\\n\\n    IERC20(params.asset).safeTransferFrom(msg.sender, address(this), payback.assets);\\n    emit PoolEventsLib.Repay(params.asset, params.position, msg.sender, payback.assets);\\n  }\\n}\\n\",\"keccak256\":\"0x305ba6088b9de1dcfb42e2a82a34b618f914e451440c440a653acd1fc2c6ee68\",\"license\":\"MIT\"},\"contracts/core/pool/logic/FlashLoanLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFlashLoanSimpleReceiver} from '../../../interfaces/IFlashLoanSimpleReceiver.sol';\\nimport {IPool} from '../../../interfaces/pool/IPool.sol';\\n\\nimport {PoolErrorsLib} from '../../../interfaces/errors/PoolErrorsLib.sol';\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\nimport {PercentageMath} from '../utils/PercentageMath.sol';\\nimport {WadRayMath} from '../utils/WadRayMath.sol';\\n\\nimport {PoolEventsLib} from '../../../interfaces/events/PoolEventsLib.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {ValidationLogic} from './ValidationLogic.sol';\\nimport {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/math/SafeCast.sol';\\n\\n/**\\n * @title FlashLoanLogic library\\n * @notice Implements the logic for the flash loans\\n */\\nlibrary FlashLoanLogic {\\n  using ReserveLogic for DataTypes.ReserveCache;\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using SafeERC20 for IERC20;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using SafeCast for uint256;\\n\\n  // Helper struct for internal variables used in the `executeFlashLoan` function\\n  struct FlashLoanLocalVars {\\n    IFlashLoanSimpleReceiver receiver;\\n    uint256 i;\\n    address currentAsset;\\n    uint256 currentAmount;\\n    uint256[] totalPremiums;\\n    uint256 flashloanPremiumTotal;\\n  }\\n\\n  /**\\n   * @notice Implements the simple flashloan feature that allow users to access liquidity of ONE reserve for one\\n   * transaction as long as the amount taken plus fee is returned.\\n   * @dev Does not waive fee for approved flashborrowers nor allow taking on debt instead of repaying to save gas\\n   * @dev At the end of the transaction the pool will pull amount borrowed + fee from the receiver,\\n   * if the receiver have not approved the pool the transaction will revert.\\n   * @dev Emits the `FlashLoan()` event\\n   * @param _reserve The state of the flashloaned reserve\\n   * @param _params The additional parameters needed to execute the simple flashloan function\\n   */\\n  function executeFlashLoanSimple(\\n    address _pool,\\n    DataTypes.ReserveData storage _reserve,\\n    DataTypes.ReserveSupplies storage _totalSupplies,\\n    DataTypes.FlashloanSimpleParams memory _params\\n  ) external {\\n    // The usual action flow (cache -> updateState -> validation -> changeState -> updateRates)\\n    // is altered to (validation -> user payload -> cache -> updateState -> changeState -> updateRates) for flashloans.\\n    // This is done to protect against reentrance and rate manipulation within the user specified payload.\\n\\n    ValidationLogic.validateFlashloanSimple(_reserve);\\n\\n    IFlashLoanSimpleReceiver receiver = IFlashLoanSimpleReceiver(_params.receiverAddress);\\n    uint256 totalPremium = _params.amount.percentMul(_params.flashLoanPremiumTotal);\\n    IERC20(_params.asset).transfer(_params.receiverAddress, _params.amount);\\n\\n    require(\\n      receiver.executeOperation(_params.asset, _params.amount, totalPremium, msg.sender, _params.params),\\n      PoolErrorsLib.INVALID_FLASHLOAN_EXECUTOR_RETURN\\n    );\\n\\n    _handleFlashLoanRepayment(\\n      _reserve,\\n      _totalSupplies,\\n      DataTypes.FlashLoanRepaymentParams({\\n        reserveFactor: _params.reserveFactor,\\n        pool: _pool,\\n        asset: _params.asset,\\n        receiverAddress: _params.receiverAddress,\\n        amount: _params.amount,\\n        totalPremium: totalPremium\\n      })\\n    );\\n  }\\n\\n  /**\\n   * @notice Handles repayment of flashloaned assets + premium\\n   * @dev Will pull the amount + premium from the receiver, so must have approved pool\\n   * @param _reserve The state of the flashloaned reserve\\n   * @param _params The additional parameters needed to execute the repayment function\\n   */\\n  function _handleFlashLoanRepayment(\\n    DataTypes.ReserveData storage _reserve,\\n    DataTypes.ReserveSupplies storage _totalSupplies,\\n    DataTypes.FlashLoanRepaymentParams memory _params\\n  ) internal {\\n    uint256 amountPlusPremium = _params.amount + _params.totalPremium;\\n\\n    DataTypes.ReserveCache memory cache = _reserve.cache(_totalSupplies);\\n    _reserve.updateState(_params.reserveFactor, cache);\\n\\n    _reserve.accruedToTreasuryShares += _params.totalPremium.rayDiv(cache.nextLiquidityIndex).toUint128();\\n\\n    _reserve.updateInterestRates(_totalSupplies, cache, _params.asset, IPool(_params.pool).getReserveFactor(), amountPlusPremium, 0, '', '');\\n\\n    IERC20(_params.asset).safeTransferFrom(_params.receiverAddress, address(_params.pool), amountPlusPremium);\\n\\n    // todo\\n    // IAToken(cache.aTokenAddress).handleRepayment(\\n    //   params.receiverAddress,\\n    //   params.receiverAddress,\\n    //   amountPlusPremium\\n    // );\\n\\n    emit PoolEventsLib.FlashLoan(_params.receiverAddress, msg.sender, _params.asset, _params.amount, _params.totalPremium);\\n  }\\n}\\n\",\"keccak256\":\"0xe75a76c337c27f690fd8ddf8724a64ca95ebe00e90a5cbb0069703b5a7d5a6a3\",\"license\":\"MIT\"},\"contracts/core/pool/logic/GenericLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IPool} from '../../../interfaces/pool/IPool.sol';\\n\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\nimport {PositionBalanceConfiguration} from '../configuration/PositionBalanceConfiguration.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\nimport {PercentageMath} from '../utils/PercentageMath.sol';\\nimport {WadRayMath} from '../utils/WadRayMath.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';\\n\\n/**\\n * @title GenericLogic library\\n * @notice Implements protocol-level logic to calculate and validate the state of a user\\n */\\nlibrary GenericLogic {\\n  using PercentageMath for uint256;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using PositionBalanceConfiguration for DataTypes.PositionBalance;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n  using WadRayMath for uint256;\\n\\n  struct CalculateUserAccountDataVars {\\n    uint256 assetPrice;\\n    uint256 assetUnit;\\n    uint256 PositionBalanceInBaseCurrency;\\n    uint256 decimals;\\n    uint256 ltv;\\n    uint256 liquidationThreshold;\\n    uint256 i;\\n    uint256 healthFactor;\\n    uint256 totalCollateralInBaseCurrency;\\n    uint256 totalDebtInBaseCurrency;\\n    uint256 avgLtv;\\n    uint256 avgLiquidationThreshold;\\n    uint256 eModeAssetPrice;\\n    uint256 eModeLtv;\\n    uint256 eModeLiqThreshold;\\n    uint256 eModeAssetCategory;\\n    address currentReserveAddress;\\n    bool hasZeroLtvCollateral;\\n    bool isInEModeCategory;\\n  }\\n\\n  /**\\n   * @notice Calculates the user data across the reserves.\\n   * @dev It includes the total liquidity/collateral/borrow balances in the base currency used by the price feed,\\n   * the average Loan To Value, the average Liquidation Ratio, and the Health factor.\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param params Additional parameters needed for the calculation\\n   * @return The total collateral of the user in the base currency used by the price feed\\n   * @return The total debt of the user in the base currency used by the price feed\\n   * @return The average ltv of the user\\n   * @return The average liquidation threshold of the user\\n   * @return The health factor of the user\\n   * @return True if the ltv is zero, false otherwise\\n   */\\n  function calculateUserAccountData(\\n    mapping(address => mapping(bytes32 => DataTypes.PositionBalance)) storage _balances,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    DataTypes.CalculateUserAccountDataParams memory params\\n  ) internal view returns (uint256, uint256, uint256, uint256, uint256, bool) {\\n    if (params.userConfig.isEmpty()) {\\n      return (0, 0, 0, 0, type(uint256).max, false);\\n    }\\n\\n    CalculateUserAccountDataVars memory vars;\\n\\n    while (vars.i < params.reservesCount) {\\n      if (!params.userConfig.isUsingAsCollateralOrBorrowing(vars.i)) {\\n        unchecked {\\n          ++vars.i;\\n        }\\n        continue;\\n      }\\n\\n      vars.currentReserveAddress = reservesList[vars.i];\\n\\n      if (vars.currentReserveAddress == address(0)) {\\n        unchecked {\\n          ++vars.i;\\n        }\\n        continue;\\n      }\\n\\n      DataTypes.ReserveData storage currentReserve = reservesData[vars.currentReserveAddress];\\n\\n      (vars.ltv, vars.liquidationThreshold,, vars.decimals,) = currentReserve.configuration.getParams();\\n\\n      unchecked {\\n        vars.assetUnit = 10 ** vars.decimals;\\n      }\\n\\n      vars.assetPrice = IPool(params.pool).getAssetPrice(vars.currentReserveAddress);\\n\\n      if (vars.liquidationThreshold != 0 && params.userConfig.isUsingAsCollateral(vars.i)) {\\n        vars.PositionBalanceInBaseCurrency = _getPositionBalanceInBaseCurrency(\\n          _balances[vars.currentReserveAddress][params.position], currentReserve, vars.assetPrice, vars.assetUnit\\n        );\\n\\n        vars.totalCollateralInBaseCurrency += vars.PositionBalanceInBaseCurrency;\\n\\n        if (vars.ltv != 0) {\\n          vars.avgLtv += vars.PositionBalanceInBaseCurrency * (vars.ltv);\\n        } else {\\n          vars.hasZeroLtvCollateral = true;\\n        }\\n\\n        vars.avgLiquidationThreshold +=\\n          vars.PositionBalanceInBaseCurrency * (vars.isInEModeCategory ? vars.eModeLiqThreshold : vars.liquidationThreshold);\\n      }\\n\\n      if (params.userConfig.isBorrowing(vars.i)) {\\n        vars.totalDebtInBaseCurrency += _getUserDebtInBaseCurrency(\\n          _balances[vars.currentReserveAddress][params.position], currentReserve, vars.assetPrice, vars.assetUnit\\n        );\\n      }\\n\\n      unchecked {\\n        ++vars.i;\\n      }\\n    }\\n\\n    unchecked {\\n      vars.avgLtv = vars.totalCollateralInBaseCurrency != 0 ? vars.avgLtv / vars.totalCollateralInBaseCurrency : 0;\\n      vars.avgLiquidationThreshold =\\n        vars.totalCollateralInBaseCurrency != 0 ? vars.avgLiquidationThreshold / vars.totalCollateralInBaseCurrency : 0;\\n    }\\n\\n    vars.healthFactor = (vars.totalDebtInBaseCurrency == 0)\\n      ? type(uint256).max\\n      : (vars.totalCollateralInBaseCurrency.percentMul(vars.avgLiquidationThreshold)).wadDiv(vars.totalDebtInBaseCurrency);\\n    return (\\n      vars.totalCollateralInBaseCurrency,\\n      vars.totalDebtInBaseCurrency,\\n      vars.avgLtv,\\n      vars.avgLiquidationThreshold,\\n      vars.healthFactor,\\n      vars.hasZeroLtvCollateral\\n    );\\n  }\\n\\n  /**\\n   * @notice Calculates the maximum amount that can be borrowed depending on the available collateral, the total debt\\n   * and the average Loan To Value\\n   * @param totalCollateralInBaseCurrency The total collateral in the base currency used by the price feed\\n   * @param totalDebtInBaseCurrency The total borrow balance in the base currency used by the price feed\\n   * @param ltv The average loan to value\\n   * @return The amount available to borrow in the base currency of the used by the price feed\\n   */\\n  function calculateAvailableBorrows(\\n    uint256 totalCollateralInBaseCurrency,\\n    uint256 totalDebtInBaseCurrency,\\n    uint256 ltv\\n  ) internal pure returns (uint256) {\\n    uint256 availableBorrowsInBaseCurrency = totalCollateralInBaseCurrency.percentMul(ltv);\\n\\n    if (availableBorrowsInBaseCurrency < totalDebtInBaseCurrency) {\\n      return 0;\\n    }\\n\\n    availableBorrowsInBaseCurrency = availableBorrowsInBaseCurrency - totalDebtInBaseCurrency;\\n    return availableBorrowsInBaseCurrency;\\n  }\\n\\n  /**\\n   * @notice Calculates total debt of the user in the based currency used to normalize the values of the assets\\n   * @param reserve The data of the reserve for which the total debt of the user is being calculated\\n   * @param assetPrice The price of the asset for which the total debt of the user is being calculated\\n   * @param assetUnit The value representing one full unit of the asset (10^decimals)\\n   * @return The total debt of the user normalized to the base currency\\n   */\\n  function _getUserDebtInBaseCurrency(\\n    DataTypes.PositionBalance storage balance,\\n    DataTypes.ReserveData storage reserve,\\n    uint256 assetPrice,\\n    uint256 assetUnit\\n  ) private view returns (uint256) {\\n    // fetching variable debt\\n    uint256 userTotalDebt = balance.debtShares;\\n    if (userTotalDebt != 0) userTotalDebt = userTotalDebt.rayMul(reserve.getNormalizedDebt());\\n    userTotalDebt = assetPrice * userTotalDebt;\\n\\n    unchecked {\\n      return userTotalDebt / assetUnit;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates total balance of the user in the based currency used by the price oracle\\n   * @param reserve The data of the reserve for which the total balance of the user is being calculated\\n   * @param assetPrice The price of the asset for which the total balance of the user is being calculated\\n   * @param assetUnit The value representing one full unit of the asset (10^decimals)\\n   * @return The total balance of the user normalized to the base currency of the price oracle\\n   */\\n  function _getPositionBalanceInBaseCurrency(\\n    DataTypes.PositionBalance storage _balance,\\n    DataTypes.ReserveData storage reserve,\\n    uint256 assetPrice,\\n    uint256 assetUnit\\n  ) private view returns (uint256) {\\n    uint256 normalizedIncome = reserve.getNormalizedIncome();\\n    uint256 balance = (_balance.supplyShares.rayMul(normalizedIncome)) * assetPrice;\\n\\n    unchecked {\\n      return balance / assetUnit;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x88fe605d221d13d73c34243579300938ce627ed82987f59256e5849dfbac4b4c\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/logic/LiquidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IPool} from '../../../interfaces/pool/IPool.sol';\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\n\\nimport {PositionBalanceConfiguration} from '../configuration/PositionBalanceConfiguration.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\n\\nimport {TokenConfiguration} from '../configuration/TokenConfiguration.sol';\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\nimport {PercentageMath} from '../utils/PercentageMath.sol';\\n\\nimport {PoolEventsLib} from '../../../interfaces/events/PoolEventsLib.sol';\\nimport {WadRayMath} from '../utils/WadRayMath.sol';\\nimport {GenericLogic} from './GenericLogic.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {ValidationLogic} from './ValidationLogic.sol';\\nimport {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/**\\n * @title LiquidationLogic library\\n * @notice Implements actions involving management of collateral in the protocol, the main one being the liquidations\\n */\\nlibrary LiquidationLogic {\\n  using PercentageMath for uint256;\\n  using PositionBalanceConfiguration for DataTypes.PositionBalance;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using ReserveLogic for DataTypes.ReserveCache;\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using SafeERC20 for IERC20;\\n  using TokenConfiguration for address;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n  using WadRayMath for uint256;\\n\\n  /**\\n   * @dev Default percentage of borrower's debt to be repaid in a liquidation.\\n   * @dev Percentage applied when the users health factor is above `CLOSE_FACTOR_HF_THRESHOLD`\\n   * Expressed in bps, a value of 0.5e4 results in 50.00%\\n   */\\n  uint256 internal constant DEFAULT_LIQUIDATION_CLOSE_FACTOR = 0.5e4;\\n\\n  /**\\n   * @dev Maximum percentage of borrower's debt to be repaid in a liquidation\\n   * @dev Percentage applied when the users health factor is below `CLOSE_FACTOR_HF_THRESHOLD`\\n   * Expressed in bps, a value of 1e4 results in 100.00%\\n   */\\n  uint256 public constant MAX_LIQUIDATION_CLOSE_FACTOR = 1e4;\\n\\n  /**\\n   * @dev This constant represents below which health factor value it is possible to liquidate\\n   * an amount of debt corresponding to `MAX_LIQUIDATION_CLOSE_FACTOR`.\\n   * A value of 0.95e18 results in 0.95\\n   */\\n  uint256 public constant CLOSE_FACTOR_HF_THRESHOLD = 0.95e18;\\n\\n  struct LiquidationCallLocalVars {\\n    uint256 userCollateralBalance;\\n    uint256 userDebt;\\n    uint256 actualDebtToLiquidate;\\n    uint256 actualCollateralToLiquidate;\\n    uint256 liquidationBonus;\\n    uint256 healthFactor;\\n    uint256 liquidationProtocolFeeAmount;\\n    address collateralPriceSource;\\n    address debtPriceSource;\\n    address asset;\\n    DataTypes.ReserveCache debtReserveCache;\\n  }\\n\\n  /**\\n   * @notice Function to liquidate a position if its Health Factor drops below 1. The caller (liquidator)\\n   * covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   * a proportional amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @dev Emits the `LiquidationCall()` event\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param usersConfig The users configuration mapping that track the supplied/borrowed assets\\n   * @param params The additional parameters needed to execute the liquidation function\\n   */\\n  function executeLiquidationCall(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    mapping(address => mapping(bytes32 => DataTypes.PositionBalance)) storage balances,\\n    mapping(address => DataTypes.ReserveSupplies) storage totalSupplies,\\n    mapping(bytes32 => DataTypes.UserConfigurationMap) storage usersConfig,\\n    DataTypes.ExecuteLiquidationCallParams memory params\\n  ) external {\\n    LiquidationCallLocalVars memory vars;\\n\\n    DataTypes.ReserveData storage collateralReserve = reservesData[params.collateralAsset];\\n    DataTypes.ReserveData storage debtReserve = reservesData[params.debtAsset];\\n    DataTypes.UserConfigurationMap storage userConfig = usersConfig[params.position];\\n    vars.debtReserveCache = debtReserve.cache(totalSupplies[params.debtAsset]);\\n    debtReserve.updateState(params.reserveFactor, vars.debtReserveCache);\\n\\n    (,,,, vars.healthFactor,) = GenericLogic.calculateUserAccountData(\\n      balances,\\n      reservesData,\\n      reservesList,\\n      DataTypes.CalculateUserAccountDataParams({\\n        userConfig: userConfig,\\n        reservesCount: params.reservesCount,\\n        position: params.position,\\n        pool: params.pool\\n      })\\n    );\\n\\n    (vars.userDebt, vars.actualDebtToLiquidate) = _calculateDebt(\\n      // vars.debtReserveCache,\\n      params,\\n      vars.healthFactor,\\n      balances\\n    );\\n\\n    ValidationLogic.validateLiquidationCall(\\n      userConfig,\\n      collateralReserve,\\n      DataTypes.ValidateLiquidationCallParams({\\n        debtReserveCache: vars.debtReserveCache,\\n        totalDebt: vars.userDebt,\\n        healthFactor: vars.healthFactor\\n      })\\n    );\\n\\n    (vars.collateralPriceSource, vars.debtPriceSource, vars.liquidationBonus) = _getConfigurationData(collateralReserve, params);\\n\\n    vars.userCollateralBalance = balances[vars.asset][params.position].supplyShares;\\n\\n    (vars.actualCollateralToLiquidate, vars.actualDebtToLiquidate, vars.liquidationProtocolFeeAmount) =\\n    _calculateAvailableCollateralToLiquidate(\\n      collateralReserve,\\n      vars.debtReserveCache,\\n      vars.actualDebtToLiquidate,\\n      vars.userCollateralBalance,\\n      vars.liquidationBonus,\\n      IPool(params.pool).getAssetPrice(params.collateralAsset),\\n      IPool(params.pool).getAssetPrice(params.debtAsset),\\n      IPool(params.pool).factory().liquidationProtocolFeePercentage()\\n    );\\n\\n    if (vars.userDebt == vars.actualDebtToLiquidate) {\\n      userConfig.setBorrowing(debtReserve.id, false);\\n    }\\n\\n    // If the collateral being liquidated is equal to the user balance,\\n    // we set the currency as not being used as collateral anymore\\n    if (vars.actualCollateralToLiquidate + vars.liquidationProtocolFeeAmount == vars.userCollateralBalance) {\\n      userConfig.setUsingAsCollateral(collateralReserve.id, false);\\n      emit PoolEventsLib.ReserveUsedAsCollateralDisabled(params.collateralAsset, params.position);\\n    }\\n\\n    _repayDebtTokens(params, vars, balances[params.debtAsset], totalSupplies[params.debtAsset]);\\n\\n    debtReserve.updateInterestRates(\\n      totalSupplies[params.debtAsset],\\n      vars.debtReserveCache,\\n      params.debtAsset,\\n      IPool(params.pool).getReserveFactor(),\\n      vars.actualDebtToLiquidate,\\n      0,\\n      '',\\n      ''\\n    );\\n\\n    _burnCollateralTokens(\\n      collateralReserve, params, vars, balances[params.collateralAsset][params.position], totalSupplies[params.collateralAsset]\\n    );\\n\\n    // Transfer fee to treasury if it is non-zero\\n    if (vars.liquidationProtocolFeeAmount != 0) {\\n      uint256 liquidityIndex = collateralReserve.getNormalizedIncome();\\n      uint256 scaledDownLiquidationProtocolFee = vars.liquidationProtocolFeeAmount.rayDiv(liquidityIndex);\\n      // todo\\n      uint256 scaledDownUserBalance = balances[params.collateralAsset][params.position].supplyShares;\\n      // To avoid trying to send more aTokens than available on balance, due to 1 wei imprecision\\n      if (scaledDownLiquidationProtocolFee > scaledDownUserBalance) {\\n        vars.liquidationProtocolFeeAmount = scaledDownUserBalance.rayMul(liquidityIndex);\\n      }\\n\\n      IERC20(params.collateralAsset).transfer(IPool(params.pool).factory().treasury(), vars.liquidationProtocolFeeAmount);\\n      // vars.collateralAToken.transferOnLiquidation(\\n      //   params.position,\\n      //   vars.collateralAToken.RESERVE_TREASURY_ADDRESS(),\\n      //   vars.liquidationProtocolFeeAmount\\n      // );\\n    }\\n\\n    // Transfers the debt asset being repaid to the aToken, where the liquidity is kept\\n    IERC20(params.debtAsset).safeTransferFrom(msg.sender, address(params.pool), vars.actualDebtToLiquidate);\\n\\n    emit PoolEventsLib.LiquidationCall(\\n      params.collateralAsset, params.debtAsset, params.position, vars.actualDebtToLiquidate, vars.actualCollateralToLiquidate, msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @notice Burns the collateral aTokens and transfers the underlying to the liquidator.\\n   * @dev   The function also updates the state and the interest rate of the collateral reserve.\\n   *\\n   * @param collateralReserve The data of the collateral reserve\\n   * @param params The additional parameters needed to execute the liquidation function\\n   * @param vars The executeLiquidationCall() function local vars\\n   */\\n  function _burnCollateralTokens(\\n    DataTypes.ReserveData storage collateralReserve,\\n    DataTypes.ExecuteLiquidationCallParams memory params,\\n    LiquidationCallLocalVars memory vars,\\n    DataTypes.PositionBalance storage balances,\\n    DataTypes.ReserveSupplies storage totalSupplies\\n  ) internal {\\n    DataTypes.ReserveCache memory collateralReserveCache = collateralReserve.cache(totalSupplies);\\n    collateralReserve.updateState(params.reserveFactor, collateralReserveCache);\\n    collateralReserve.updateInterestRates(\\n      totalSupplies,\\n      collateralReserveCache,\\n      params.collateralAsset,\\n      0,\\n      IPool(params.pool).getReserveFactor(),\\n      vars.actualCollateralToLiquidate,\\n      params.position,\\n      params.data.interestRateData\\n    );\\n\\n    // Burn the equivalent amount of aToken, sending the underlying to the liquidator\\n    balances.withdrawCollateral(totalSupplies, vars.actualCollateralToLiquidate, collateralReserveCache.nextLiquidityIndex);\\n    IERC20(params.collateralAsset).transfer(msg.sender, vars.actualCollateralToLiquidate);\\n  }\\n\\n  /**\\n   * @notice Burns the debt tokens of the user up to the amount being repaid by the liquidator.\\n   * @dev The function alters the `debtReserveCache` state in `vars` to update the debt related data.\\n   *\\n   * @param params The additional parameters needed to execute the liquidation function\\n   * @param vars the executeLiquidationCall() function local vars\\n   */\\n  function _repayDebtTokens(\\n    DataTypes.ExecuteLiquidationCallParams memory params,\\n    LiquidationCallLocalVars memory vars,\\n    mapping(bytes32 => DataTypes.PositionBalance) storage balances,\\n    DataTypes.ReserveSupplies storage totalSupplies\\n  ) internal {\\n    uint256 burnt = balances[params.position].repayDebt(totalSupplies, vars.actualDebtToLiquidate, vars.debtReserveCache.nextBorrowIndex);\\n    vars.debtReserveCache.nextDebtShares = burnt;\\n  }\\n\\n  /**\\n   * @notice Calculates the total debt of the user and the actual amount to liquidate depending on the health factor\\n   * and corresponding close factor.\\n   *\\n   * @dev If the Health Factor is below CLOSE_FACTOR_HF_THRESHOLD, the close factor is increased to MAX_LIQUIDATION_CLOSE_FACTOR\\n   * @param params The additional parameters needed to execute the liquidation function\\n   * @param healthFactor The health factor of the position\\n   * @return The debt of the user\\n   * @return The actual debt to liquidate as a function of the closeFactor\\n   */\\n  function _calculateDebt(\\n    DataTypes.ExecuteLiquidationCallParams memory params,\\n    uint256 healthFactor,\\n    mapping(address => mapping(bytes32 => DataTypes.PositionBalance)) storage balances\\n  ) internal view returns (uint256, uint256) {\\n    uint256 userDebt = balances[params.debtAsset][params.position].debtShares;\\n\\n    uint256 closeFactor = healthFactor > CLOSE_FACTOR_HF_THRESHOLD ? DEFAULT_LIQUIDATION_CLOSE_FACTOR : MAX_LIQUIDATION_CLOSE_FACTOR;\\n\\n    uint256 maxLiquidatableDebt = userDebt.percentMul(closeFactor);\\n\\n    uint256 actualDebtToLiquidate = params.debtToCover > maxLiquidatableDebt ? maxLiquidatableDebt : params.debtToCover;\\n\\n    return (userDebt, actualDebtToLiquidate);\\n  }\\n\\n  /**\\n   * @notice Returns the configuration data for the debt and the collateral reserves.\\n   * @param collateralReserve The data of the collateral reserve\\n   * @param params The additional parameters needed to execute the liquidation function\\n   *\\n   * @return The address to use as price source for the collateral\\n   * @return The address to use as price source for the debt\\n   * @return The liquidation bonus to apply to the collateral\\n   */\\n  function _getConfigurationData(\\n    DataTypes.ReserveData storage collateralReserve,\\n    DataTypes.ExecuteLiquidationCallParams memory params\\n  ) internal view returns (address, address, uint256) {\\n    uint256 liquidationBonus = collateralReserve.configuration.getLiquidationBonus();\\n\\n    address collateralPriceSource = params.collateralAsset;\\n    address debtPriceSource = params.debtAsset;\\n\\n    return (collateralPriceSource, debtPriceSource, liquidationBonus);\\n  }\\n\\n  struct AvailableCollateralToLiquidateLocalVars {\\n    uint256 collateralPrice;\\n    uint256 debtAssetPrice;\\n    uint256 maxCollateralToLiquidate;\\n    uint256 baseCollateral;\\n    uint256 bonusCollateral;\\n    uint256 debtAssetDecimals;\\n    uint256 collateralDecimals;\\n    uint256 collateralAssetUnit;\\n    uint256 debtAssetUnit;\\n    uint256 collateralAmount;\\n    uint256 debtAmountNeeded;\\n    uint256 liquidationProtocolFeePercentage;\\n    uint256 liquidationProtocolFee;\\n  }\\n\\n  /**\\n   * @notice Calculates how much of a specific collateral can be liquidated, given\\n   * a certain amount of debt asset.\\n   *\\n   * @dev This function needs to be called after all the checks to validate the liquidation have been performed,\\n   *   otherwise it might fail.\\n   *\\n   * @param collateralReserve The data of the collateral reserve\\n   * @param debtReserveCache The cached data of the debt reserve\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param userCollateralBalance The collateral balance for the specific `collateralAsset` of the user being liquidated\\n   * @param liquidationBonus The collateral bonus percentage to receive as result of the liquidation\\n   * @return The maximum amount that is possible to liquidate given all the liquidation constraints (user balance, close factor)\\n   * @return The amount to repay with the liquidation\\n   * @return The fee taken from the liquidation bonus amount to be paid to the protocol\\n   */\\n  function _calculateAvailableCollateralToLiquidate(\\n    DataTypes.ReserveData storage collateralReserve,\\n    DataTypes.ReserveCache memory debtReserveCache,\\n    uint256 debtToCover,\\n    uint256 userCollateralBalance,\\n    uint256 liquidationBonus,\\n    uint256 collateralPrice,\\n    uint256 debtAssetPrice,\\n    uint256 liquidationProtocolFeePercentage\\n  ) internal view returns (uint256, uint256, uint256) {\\n    AvailableCollateralToLiquidateLocalVars memory vars;\\n\\n    vars.collateralPrice = collateralPrice; // oracle.getAssetPrice(collateralAsset);\\n    vars.debtAssetPrice = debtAssetPrice; // oracle.getAssetPrice(debtAsset);\\n\\n    vars.collateralDecimals = collateralReserve.configuration.getDecimals();\\n    vars.debtAssetDecimals = debtReserveCache.reserveConfiguration.getDecimals();\\n\\n    unchecked {\\n      vars.collateralAssetUnit = 10 ** vars.collateralDecimals;\\n      vars.debtAssetUnit = 10 ** vars.debtAssetDecimals;\\n    }\\n\\n    // This is the base collateral to liquidate based on the given debt to cover\\n    vars.baseCollateral = ((vars.debtAssetPrice * debtToCover * vars.collateralAssetUnit)) / (vars.collateralPrice * vars.debtAssetUnit);\\n\\n    vars.maxCollateralToLiquidate = vars.baseCollateral.percentMul(liquidationBonus);\\n\\n    if (vars.maxCollateralToLiquidate > userCollateralBalance) {\\n      vars.collateralAmount = userCollateralBalance;\\n      vars.debtAmountNeeded = (\\n        (vars.collateralPrice * vars.collateralAmount * vars.debtAssetUnit) / (vars.debtAssetPrice * vars.collateralAssetUnit)\\n      ).percentDiv(liquidationBonus);\\n    } else {\\n      vars.collateralAmount = vars.maxCollateralToLiquidate;\\n      vars.debtAmountNeeded = debtToCover;\\n    }\\n\\n    if (liquidationProtocolFeePercentage != 0) {\\n      vars.bonusCollateral = vars.collateralAmount - vars.collateralAmount.percentDiv(liquidationBonus);\\n      vars.liquidationProtocolFee = vars.bonusCollateral.percentMul(liquidationProtocolFeePercentage);\\n      return (vars.collateralAmount - vars.liquidationProtocolFee, vars.debtAmountNeeded, vars.liquidationProtocolFee);\\n    } else {\\n      return (vars.collateralAmount, vars.debtAmountNeeded, 0);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb982a65e1b0f990abf0e5dcbdd9020086a8d6bf6e3ed1e70ea75f33147357007\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/logic/PoolLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {PoolErrorsLib} from '../../../interfaces/errors/PoolErrorsLib.sol';\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\n\\nimport {PoolEventsLib} from '../../../interfaces/events/PoolEventsLib.sol';\\nimport {PercentageMath} from '../utils/PercentageMath.sol';\\nimport {WadRayMath} from '../utils/WadRayMath.sol';\\nimport {GenericLogic} from './GenericLogic.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {ValidationLogic} from './ValidationLogic.sol';\\nimport {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\n\\n/**\\n * @title PoolLogic library\\n * @notice Implements the logic for Pool specific functions\\n */\\nlibrary PoolLogic {\\n  using PercentageMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using WadRayMath for uint256;\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n  /**\\n   * @notice Initialize an asset reserve and add the reserve to the list of reserves\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param params Additional parameters needed for initiation\\n   */\\n  function executeInitReserve(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    DataTypes.InitReserveParams memory params\\n  ) external {\\n    require(Address.isContract(params.asset), PoolErrorsLib.NOT_CONTRACT);\\n    require(Address.isContract(params.interestRateStrategyAddress), PoolErrorsLib.NOT_CONTRACT);\\n    require(Address.isContract(params.oracle), PoolErrorsLib.NOT_CONTRACT);\\n\\n    DataTypes.ReserveConfigurationMap memory config;\\n    config.setLtv(params.configuration.ltv);\\n    config.setLiquidationThreshold(params.configuration.liquidationThreshold);\\n    config.setLiquidationBonus(params.configuration.liquidationBonus);\\n    config.setDecimals(params.configuration.decimals);\\n    config.setFrozen(params.configuration.frozen);\\n    config.setBorrowingEnabled(params.configuration.borrowable);\\n    config.setBorrowCap(params.configuration.borrowCap);\\n    config.setSupplyCap(params.configuration.supplyCap);\\n\\n    setReserveConfiguration(reservesData, params.asset, params.interestRateStrategyAddress, params.oracle, config);\\n\\n    reservesData[params.asset].init(params.interestRateStrategyAddress);\\n\\n    bool reserveAlreadyAdded = reservesData[params.asset].id != 0 || reservesList[0] == params.asset;\\n    require(!reserveAlreadyAdded, PoolErrorsLib.RESERVE_ALREADY_ADDED);\\n\\n    reservesData[params.asset].id = params.reservesCount;\\n    reservesList[params.reservesCount] = params.asset;\\n\\n    emit PoolEventsLib.ReserveInitialized(params.asset, params.interestRateStrategyAddress, params.oracle);\\n  }\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param reservesData The state of all the reserves\\n   * @param asset The reserves for which the minting needs to be executed\\n   */\\n  function executeMintToTreasury(mapping(address => DataTypes.ReserveData) storage reservesData, address asset) external {\\n    DataTypes.ReserveData storage reserve = reservesData[asset];\\n\\n    uint256 accruedToTreasuryShares = reserve.accruedToTreasuryShares;\\n\\n    if (accruedToTreasuryShares != 0) {\\n      reserve.accruedToTreasuryShares = 0;\\n      uint256 normalizedIncome = reserve.getNormalizedIncome();\\n      uint256 amountToMint = accruedToTreasuryShares.rayMul(normalizedIncome);\\n\\n      // todo mint and unwrap to treasury\\n      // IAToken(reserve.aTokenAddress).mintToTreasury(amountToMint, normalizedIncome);\\n\\n      emit PoolEventsLib.MintedToTreasury(asset, amountToMint);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param params Additional params needed for the calculation\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function executeGetUserAccountData(\\n    mapping(address => mapping(bytes32 => DataTypes.PositionBalance)) storage _balances,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    DataTypes.CalculateUserAccountDataParams memory params\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    )\\n  {\\n    (totalCollateralBase, totalDebtBase, ltv, currentLiquidationThreshold, healthFactor,) =\\n      GenericLogic.calculateUserAccountData(_balances, reservesData, reservesList, params);\\n    availableBorrowsBase = GenericLogic.calculateAvailableBorrows(totalCollateralBase, totalDebtBase, ltv);\\n  }\\n\\n  function setReserveConfiguration(\\n    mapping(address => DataTypes.ReserveData) storage _reserves,\\n    address asset,\\n    address rateStrategyAddress,\\n    address source,\\n    DataTypes.ReserveConfigurationMap memory config\\n  ) public {\\n    require(asset != address(0), PoolErrorsLib.ZERO_ADDRESS_NOT_VALID);\\n    _reserves[asset].configuration = config;\\n\\n    // set if values are non-0\\n    if (rateStrategyAddress != address(0)) _reserves[asset].interestRateStrategyAddress = rateStrategyAddress;\\n    if (source != address(0)) _reserves[asset].oracle = source;\\n\\n    require(config.getDecimals() >= 6, 'not enough decimals');\\n\\n    // validation of the parameters: the LTV can\\n    // only be lower or equal than the liquidation threshold\\n    // (otherwise a loan against the asset would cause instantaneous liquidation)\\n    require(config.getLtv() <= config.getLiquidationThreshold(), PoolErrorsLib.INVALID_RESERVE_PARAMS);\\n\\n    if (config.getLiquidationThreshold() != 0) {\\n      // liquidation bonus must be bigger than 100.00%, otherwise the liquidator would receive less\\n      // collateral than needed to cover the debt\\n      require(config.getLiquidationBonus() > PercentageMath.PERCENTAGE_FACTOR, PoolErrorsLib.INVALID_RESERVE_PARAMS);\\n\\n      // if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment\\n      // a loan is taken there is enough collateral available to cover the liquidation bonus\\n      require(\\n        config.getLiquidationThreshold().percentMul(config.getLiquidationBonus()) <= PercentageMath.PERCENTAGE_FACTOR,\\n        PoolErrorsLib.INVALID_RESERVE_PARAMS\\n      );\\n\\n      emit PoolEventsLib.CollateralConfigurationChanged(\\n        asset, config.getLtv(), config.getLiquidationThreshold(), config.getLiquidationThreshold()\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0d2422d8e83f0bb3fb825d0153f06e55c0c805f75a8574ece79d2ace4843f38e\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IReserveInterestRateStrategy} from '../../../interfaces/IReserveInterestRateStrategy.sol';\\n\\nimport {PoolErrorsLib} from '../../../interfaces/errors/PoolErrorsLib.sol';\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\nimport {ReserveSuppliesConfiguration} from '../configuration/ReserveSuppliesConfiguration.sol';\\nimport {MathUtils} from '../utils/MathUtils.sol';\\nimport {PercentageMath} from '../utils/PercentageMath.sol';\\nimport {WadRayMath} from '../utils/WadRayMath.sol';\\nimport {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport {PoolEventsLib} from '../../../interfaces/events/PoolEventsLib.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/math/SafeCast.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @notice Implements the logic to update the reserves state\\n */\\nlibrary ReserveLogic {\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using SafeCast for uint256;\\n  using SafeERC20 for IERC20;\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using ReserveSuppliesConfiguration for DataTypes.ReserveSupplies;\\n\\n  /**\\n   * @notice Returns the ongoing normalized income for the reserve.\\n   * @dev A value of 1e27 means there is no income. As time passes, the income is accrued\\n   * @dev A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n   * @param reserve The reserve object\\n   * @return The normalized income, expressed in ray\\n   */\\n  function getNormalizedIncome(DataTypes.ReserveData storage reserve) internal view returns (uint256) {\\n    uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n    //solium-disable-next-line\\n    if (timestamp == block.timestamp) {\\n      //if the index was updated in the same block, no need to perform any calculation\\n      return reserve.liquidityIndex;\\n    } else {\\n      return MathUtils.calculateLinearInterest(reserve.liquidityRate, timestamp).rayMul(reserve.liquidityIndex);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the ongoing normalized variable debt for the reserve.\\n   * @dev A value of 1e27 means there is no debt. As time passes, the debt is accrued\\n   * @dev A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\n   * @param reserve The reserve object\\n   * @return The normalized variable debt, expressed in ray\\n   */\\n  function getNormalizedDebt(DataTypes.ReserveData storage reserve) internal view returns (uint256) {\\n    uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n    //solium-disable-next-line\\n    if (timestamp == block.timestamp) {\\n      //if the index was updated in the same block, no need to perform any calculation\\n      return reserve.borrowIndex;\\n    } else {\\n      return MathUtils.calculateCompoundedInterest(reserve.borrowRate, timestamp).rayMul(reserve.borrowIndex);\\n    }\\n  }\\n\\n  /**\\n   * @notice Updates the liquidity cumulative index and the variable borrow index.\\n   * @param self The reserve object\\n   * @param _cache The caching layer for the reserve data\\n   * @param _reserveFactor The reserve factor that is used to calculate how much revenue gets shared\\n   */\\n  function updateState(DataTypes.ReserveData storage self, uint256 _reserveFactor, DataTypes.ReserveCache memory _cache) internal {\\n    // If time didn't pass since last stored timestamp, skip state update\\n    if (self.lastUpdateTimestamp == uint40(block.timestamp)) return;\\n\\n    _updateIndexes(self, _cache);\\n    _accrueToTreasury(_reserveFactor, self, _cache);\\n\\n    self.lastUpdateTimestamp = uint40(block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income. Used for example\\n   * to accumulate the flashloan fee to the reserve, and spread it between all the suppliers.\\n   * @param reserve The reserve object\\n   * @param totalLiquidity The total liquidity available in the reserve\\n   * @param amount The amount to accumulate\\n   * @return The next liquidity index of the reserve\\n   */\\n  function cumulateToLiquidityIndex(\\n    DataTypes.ReserveData storage reserve,\\n    uint256 totalLiquidity,\\n    uint256 amount\\n  ) internal returns (uint256) {\\n    // next liquidity index is calculated this way: `((amount / totalLiquidity) + 1) * liquidityIndex`\\n    // division `amount / totalLiquidity` done in ray for precision\\n    uint256 result = (amount.wadToRay().rayDiv(totalLiquidity.wadToRay()) + WadRayMath.RAY).rayMul(reserve.liquidityIndex);\\n    reserve.liquidityIndex = result.toUint128();\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Initializes a reserve.\\n   * @param reserve The reserve object\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function init(DataTypes.ReserveData storage reserve, address interestRateStrategyAddress) internal {\\n    reserve.liquidityIndex = uint128(WadRayMath.RAY);\\n    reserve.borrowIndex = uint128(WadRayMath.RAY);\\n    reserve.interestRateStrategyAddress = interestRateStrategyAddress;\\n  }\\n\\n  struct UpdateInterestRatesLocalVars {\\n    uint256 nextLiquidityRate;\\n    uint256 nextBorrowRate;\\n    uint256 totalDebt;\\n  }\\n\\n  /**\\n   * @notice Updates the current variable borrow rate and the current liquidity rate.\\n   * @param _reserve The reserve reserve to be updated\\n   * @param _cache The caching layer for the reserve data\\n   * @param _reserveAddress The address of the reserve to be updated\\n   * @param _reserveFactor How much % of the interest goes to the treasury\\n   * @param _liquidityAdded The amount of liquidity added to the protocol (supply or repay) in the previous action\\n   * @param _liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\\n   * @param _position The position of the user executing the interest rate updates\\n   * @param _data Any extra data to be passed to the interest rate strategy\\n   */\\n  function updateInterestRates(\\n    DataTypes.ReserveData storage _reserve,\\n    DataTypes.ReserveSupplies storage totalSupplies,\\n    DataTypes.ReserveCache memory _cache,\\n    address _reserveAddress,\\n    uint256 _reserveFactor,\\n    uint256 _liquidityAdded,\\n    uint256 _liquidityTaken,\\n    bytes32 _position,\\n    bytes memory _data\\n  ) internal {\\n    UpdateInterestRatesLocalVars memory vars;\\n\\n    vars.totalDebt = _cache.nextDebtShares.rayMul(_cache.nextBorrowIndex);\\n\\n    (vars.nextLiquidityRate, vars.nextBorrowRate) = IReserveInterestRateStrategy(_reserve.interestRateStrategyAddress)\\n      .calculateInterestRates(\\n      _position,\\n      _data,\\n      DataTypes.CalculateInterestRatesParams({\\n        liquidityAdded: _liquidityAdded,\\n        liquidityTaken: _liquidityTaken,\\n        totalDebt: vars.totalDebt,\\n        reserveFactor: _reserveFactor,\\n        reserve: _reserveAddress\\n      })\\n    );\\n\\n    _reserve.liquidityRate = vars.nextLiquidityRate.toUint128();\\n    _reserve.borrowRate = vars.nextBorrowRate.toUint128();\\n\\n    if (_liquidityAdded > 0) totalSupplies.underlyingBalance += _liquidityAdded.toUint128();\\n    else if (_liquidityTaken > 0) totalSupplies.underlyingBalance -= _liquidityTaken.toUint128();\\n\\n    emit PoolEventsLib.ReserveDataUpdated(\\n      _reserveAddress, vars.nextLiquidityRate, vars.nextBorrowRate, _cache.nextLiquidityIndex, _cache.nextBorrowIndex\\n    );\\n  }\\n\\n  struct AccrueToTreasuryLocalVars {\\n    uint256 prevtotalDebt;\\n    uint256 currtotalDebt;\\n    uint256 totalDebtAccrued;\\n    uint256 amountToMint;\\n  }\\n\\n  /**\\n   * @notice Mints part of the repaid interest to the reserve treasury as a function of the reserve factor for the\\n   * specific asset.\\n   * @param _reserve The reserve to be updated\\n   * @param _cache The caching layer for the reserve data\\n   */\\n  function _accrueToTreasury(uint256 reserveFactor, DataTypes.ReserveData storage _reserve, DataTypes.ReserveCache memory _cache) internal {\\n    if (reserveFactor == 0) return;\\n    AccrueToTreasuryLocalVars memory vars;\\n\\n    // calculate the total variable debt at moment of the last interaction\\n    vars.prevtotalDebt = _cache.currDebtShares.rayMul(_cache.currBorrowIndex);\\n\\n    // calculate the new total variable debt after accumulation of the interest on the index\\n    vars.currtotalDebt = _cache.currDebtShares.rayMul(_cache.nextBorrowIndex);\\n\\n    // debt accrued is the sum of the current debt minus the sum of the debt at the last update\\n    vars.totalDebtAccrued = vars.currtotalDebt - vars.prevtotalDebt;\\n\\n    vars.amountToMint = vars.totalDebtAccrued.percentMul(reserveFactor);\\n\\n    if (vars.amountToMint != 0) _reserve.accruedToTreasuryShares += vars.amountToMint.rayDiv(_cache.nextLiquidityIndex).toUint128();\\n  }\\n\\n  /**\\n   * @notice Updates the reserve indexes and the timestamp of the update.\\n   * @param _reserve The reserve reserve to be updated\\n   * @param _cache The cache layer holding the cached protocol data\\n   */\\n  function _updateIndexes(DataTypes.ReserveData storage _reserve, DataTypes.ReserveCache memory _cache) internal {\\n    // Only cumulating on the supply side if there is any income being produced\\n    // The case of Reserve Factor 100% is not a problem (liquidityRate == 0),\\n    // as liquidity index should not be updated\\n    if (_cache.currLiquidityRate != 0) {\\n      uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(_cache.currLiquidityRate, _cache.reserveLastUpdateTimestamp);\\n      _cache.nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(_cache.currLiquidityIndex).toUint128();\\n      _reserve.liquidityIndex = _cache.nextLiquidityIndex;\\n    }\\n\\n    // Variable borrow index only gets updated if there is any variable debt.\\n    // cache.currBorrowRate != 0 is not a correct validation,\\n    // because a positive base variable rate can be stored on\\n    // cache.currBorrowRate, but the index should not increase\\n    if (_cache.currDebtShares != 0) {\\n      uint256 cumulatedBorrowInterest = MathUtils.calculateCompoundedInterest(_cache.currBorrowRate, _cache.reserveLastUpdateTimestamp);\\n      _cache.nextBorrowIndex = cumulatedBorrowInterest.rayMul(_cache.currBorrowIndex).toUint128();\\n      _reserve.borrowIndex = _cache.nextBorrowIndex;\\n    }\\n  }\\n\\n  /**\\n   * @notice Creates a cache object to avoid repeated storage reads and external contract calls when updating state and\\n   * interest rates.\\n   * @param reserve The reserve object for which the cache will be filled\\n   * @param supplies The total supply object for the reserve asset\\n   * @return The cache object\\n   */\\n  function cache(\\n    DataTypes.ReserveData storage reserve,\\n    DataTypes.ReserveSupplies storage supplies\\n  ) internal view returns (DataTypes.ReserveCache memory) {\\n    DataTypes.ReserveCache memory _cache;\\n\\n    _cache.currLiquidityIndex = _cache.nextLiquidityIndex = reserve.liquidityIndex;\\n    _cache.currLiquidityRate = reserve.liquidityRate;\\n    _cache.currBorrowIndex = _cache.nextBorrowIndex = reserve.borrowIndex;\\n    _cache.currBorrowRate = reserve.borrowRate;\\n    _cache.reserveConfiguration = reserve.configuration;\\n    _cache.reserveLastUpdateTimestamp = reserve.lastUpdateTimestamp;\\n    _cache.currDebtShares = _cache.nextDebtShares = supplies.debtShares;\\n\\n    return _cache;\\n  }\\n}\\n\",\"keccak256\":\"0x29385e957b54a77212dcf4c88358b462ebe2ff739e4dbb4dd4df5bd661ae8b7f\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/logic/SupplyLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IPool} from '../../../interfaces/pool/IPool.sol';\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\n\\nimport {PositionBalanceConfiguration} from '../configuration/PositionBalanceConfiguration.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\n\\nimport {PoolErrorsLib} from '../../../interfaces/errors/PoolErrorsLib.sol';\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\nimport {PercentageMath} from '../utils/PercentageMath.sol';\\n\\nimport {PoolEventsLib} from '../../../interfaces/events/PoolEventsLib.sol';\\nimport {WadRayMath} from '../utils/WadRayMath.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {ValidationLogic} from './ValidationLogic.sol';\\nimport {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/**\\n * @title SupplyLogic library\\n * @notice Implements the base logic for supply/withdraw\\n */\\nlibrary SupplyLogic {\\n  using PercentageMath for uint256;\\n  using PositionBalanceConfiguration for DataTypes.PositionBalance;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using ReserveLogic for DataTypes.ReserveCache;\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using SafeERC20 for IERC20;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n  using WadRayMath for uint256;\\n\\n  /**\\n   * @notice Implements the supply feature. Through `supply()`, users supply assets to the ZeroLend protocol.\\n   * @dev Emits the `Supply()` event.\\n   * @dev In the first supply action, `ReserveUsedAsCollateralEnabled()` is emitted, if the asset can be enabled as\\n   * collateral.\\n   * @param reserve The state of the reserves\\n   * @param userConfig The state of the position\\n   * @param balance The balance of the position\\n   * @param totalSupplies The total supplies of the reserve\\n   * @param params The additional parameters needed to execute the supply function\\n   */\\n  function executeSupply(\\n    DataTypes.ReserveData storage reserve,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    DataTypes.PositionBalance storage balance,\\n    DataTypes.ReserveSupplies storage totalSupplies,\\n    DataTypes.ExecuteSupplyParams memory params\\n  ) external returns (DataTypes.SharesType memory minted) {\\n    DataTypes.ReserveCache memory cache = reserve.cache(totalSupplies);\\n    reserve.updateState(params.reserveFactor, cache);\\n\\n    ValidationLogic.validateSupply(cache, reserve, params, params.pool);\\n    reserve.updateInterestRates(\\n      totalSupplies,\\n      cache,\\n      params.asset,\\n      IPool(params.pool).getReserveFactor(),\\n      params.amount,\\n      0,\\n      params.position,\\n      params.data.interestRateData\\n    );\\n\\n    // take the asset from the user and mint the shares\\n    IERC20(params.asset).safeTransferFrom(msg.sender, address(this), params.amount);\\n    bool isFirst;\\n    (isFirst, minted.shares) = balance.depositCollateral(totalSupplies, params.amount, cache.nextLiquidityIndex);\\n\\n    // if this is the user's first deposit, enable the reserve as collateral\\n    if (isFirst && ValidationLogic.validateUseAsCollateral(userConfig, cache.reserveConfiguration)) {\\n      userConfig.setUsingAsCollateral(reserve.id, true);\\n      emit PoolEventsLib.ReserveUsedAsCollateralEnabled(params.asset, params.position);\\n    }\\n\\n    emit PoolEventsLib.Supply(params.asset, params.position, minted.shares);\\n\\n    minted.assets = params.amount;\\n  }\\n\\n  /**\\n   * @notice Implements the withdraw feature. Through `withdraw()`, users redeem their aTokens for the underlying asset\\n   * previously supplied in the ZeroLend protocol.\\n   * @dev Emits the `Withdraw()` event.\\n   * @dev If the user withdraws everything, `ReserveUsedAsCollateralDisabled()` is emitted.\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\n   * @param params The additional parameters needed to execute the withdraw function\\n   */\\n  function executeWithdraw(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    mapping(address => mapping(bytes32 => DataTypes.PositionBalance)) storage balances,\\n    DataTypes.ReserveSupplies storage totalSupplies,\\n    DataTypes.ExecuteWithdrawParams memory params\\n  ) external returns (DataTypes.SharesType memory burnt) {\\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n    DataTypes.ReserveCache memory cache = reserve.cache(totalSupplies);\\n    reserve.updateState(params.reserveFactor, cache);\\n\\n    uint256 balance = balances[params.asset][params.position].getSupplyBalance(cache.nextLiquidityIndex);\\n\\n    // repay with max amount should clear off all debt\\n    if (params.amount == type(uint256).max) params.amount = balance;\\n\\n    ValidationLogic.validateWithdraw(params.amount, balance);\\n\\n    reserve.updateInterestRates(\\n      totalSupplies,\\n      cache,\\n      params.asset,\\n      IPool(params.pool).getReserveFactor(),\\n      0,\\n      params.amount,\\n      params.position,\\n      params.data.interestRateData\\n    );\\n\\n    bool isCollateral = userConfig.isUsingAsCollateral(reserve.id);\\n\\n    // if the user is withdrawing everything then disable usage as collateral\\n    if (isCollateral && params.amount == balance) {\\n      userConfig.setUsingAsCollateral(reserve.id, false);\\n      emit PoolEventsLib.ReserveUsedAsCollateralDisabled(params.asset, params.position);\\n    }\\n\\n    // Burn debt. Which is burn supply, update total supply and send tokens to the user\\n    burnt.shares = balances[params.asset][params.position].withdrawCollateral(totalSupplies, params.amount, cache.nextLiquidityIndex);\\n    IERC20(params.asset).safeTransfer(params.destination, params.amount);\\n\\n    // if the user is borrowing any asset, validate the HF and LTVs\\n    if (isCollateral && userConfig.isBorrowingAny()) {\\n      ValidationLogic.validateHFAndLtv(balances, reservesData, reservesList, userConfig, params);\\n    }\\n\\n    emit PoolEventsLib.Withdraw(params.asset, params.position, params.destination, params.amount);\\n\\n    burnt.assets = params.amount;\\n  }\\n}\\n\",\"keccak256\":\"0x996fd3f1c93f760aebc5471475e79202fd0f6f96ee15502d13ba956f9c5ed00d\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/logic/ValidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IReserveInterestRateStrategy} from '../../../interfaces/IReserveInterestRateStrategy.sol';\\nimport {IPool} from '../../../interfaces/pool/IPool.sol';\\n\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\n\\nimport {PoolErrorsLib} from '../../../interfaces/errors/PoolErrorsLib.sol';\\nimport {TokenConfiguration} from '../configuration/TokenConfiguration.sol';\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\nimport {PercentageMath} from '../utils/PercentageMath.sol';\\nimport {WadRayMath} from '../utils/WadRayMath.sol';\\n\\nimport {GenericLogic} from './GenericLogic.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {IAccessControl} from '@openzeppelin/contracts/access/IAccessControl.sol';\\nimport {IERC20} from '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport {SafeCast} from '@openzeppelin/contracts/utils/math/SafeCast.sol';\\n\\n/**\\n * @title ReserveLogic library\\n *\\n * @notice Implements functions to validate the different actions of the protocol\\n */\\nlibrary ValidationLogic {\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using SafeCast for uint256;\\n  using SafeERC20 for IERC20;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n  using Address for address;\\n  using TokenConfiguration for address;\\n\\n  // Factor to apply to \\\"only-variable-debt\\\" liquidity rate to get threshold for rebalancing, expressed in bps\\n  // A value of 0.9e4 results in 90%\\n  uint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 0.9e4;\\n\\n  // Minimum health factor allowed under any circumstance\\n  // A value of 0.95e18 results in 0.95\\n  uint256 public constant MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 0.95e18;\\n\\n  /**\\n   * @dev Minimum health factor to consider a user position healthy\\n   * A value of 1e18 results in 1\\n   */\\n  uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1e18;\\n\\n  /**\\n   * @notice Validates a supply action.\\n   * @param cache The cached data of the reserve\\n   * @param params The amount to be supplied\\n   */\\n  function validateSupply(\\n    DataTypes.ReserveCache memory cache,\\n    DataTypes.ReserveData storage reserve,\\n    DataTypes.ExecuteSupplyParams memory params,\\n    address pool\\n  ) internal view {\\n    require(params.amount != 0, PoolErrorsLib.INVALID_AMOUNT);\\n\\n    (bool isFrozen,) = cache.reserveConfiguration.getFlags();\\n    require(!isFrozen, PoolErrorsLib.RESERVE_FROZEN);\\n\\n    uint256 supplyCap = cache.reserveConfiguration.getSupplyCap();\\n    // todo\\n    require(\\n      supplyCap == 0\\n        || (\\n          (IERC20(params.asset).balanceOf(pool) + uint256(reserve.accruedToTreasuryShares)).rayMul(cache.nextLiquidityIndex) + params.amount\\n        ) <= supplyCap * (10 ** cache.reserveConfiguration.getDecimals()),\\n      PoolErrorsLib.SUPPLY_CAP_EXCEEDED\\n    );\\n  }\\n\\n  /**\\n   * @notice Validates a withdraw action.\\n   * @param amount The amount to be withdrawn\\n   * @param userBalance The balance of the user\\n   */\\n  function validateWithdraw(uint256 amount, uint256 userBalance) internal pure {\\n    require(amount != 0, PoolErrorsLib.INVALID_AMOUNT);\\n    require(amount <= userBalance, PoolErrorsLib.NOT_ENOUGH_AVAILABLE_USER_BALANCE);\\n  }\\n\\n  struct ValidateBorrowLocalVars {\\n    uint256 currentLtv;\\n    uint256 collateralNeededInBaseCurrency;\\n    uint256 userCollateralInBaseCurrency;\\n    uint256 userDebtInBaseCurrency;\\n    uint256 availableLiquidity;\\n    uint256 healthFactor;\\n    uint256 totalDebt;\\n    uint256 totalSupplyVariableDebt;\\n    uint256 reserveDecimals;\\n    uint256 borrowCap;\\n    uint256 amountInBaseCurrency;\\n    uint256 assetUnit;\\n    bool isFrozen;\\n    bool borrowingEnabled;\\n  }\\n\\n  /**\\n   * @notice Validates a borrow action.\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param params Additional params needed for the validation\\n   */\\n  function validateBorrow(\\n    mapping(address => mapping(bytes32 => DataTypes.PositionBalance)) storage _balances,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    DataTypes.ValidateBorrowParams memory params\\n  ) internal view {\\n    require(params.amount != 0, PoolErrorsLib.INVALID_AMOUNT);\\n\\n    ValidateBorrowLocalVars memory vars;\\n\\n    (vars.isFrozen, vars.borrowingEnabled) = params.cache.reserveConfiguration.getFlags();\\n\\n    require(!vars.isFrozen, PoolErrorsLib.RESERVE_FROZEN);\\n    require(vars.borrowingEnabled, PoolErrorsLib.BORROWING_NOT_ENABLED);\\n\\n    vars.reserveDecimals = params.cache.reserveConfiguration.getDecimals();\\n    vars.borrowCap = params.cache.reserveConfiguration.getBorrowCap();\\n    unchecked {\\n      vars.assetUnit = 10 ** vars.reserveDecimals;\\n    }\\n\\n    if (vars.borrowCap != 0) {\\n      vars.totalSupplyVariableDebt = params.cache.currDebtShares.rayMul(params.cache.nextBorrowIndex);\\n\\n      vars.totalDebt = vars.totalSupplyVariableDebt + params.amount;\\n\\n      unchecked {\\n        require(vars.totalDebt <= vars.borrowCap * vars.assetUnit, PoolErrorsLib.BORROW_CAP_EXCEEDED);\\n      }\\n    }\\n\\n    (vars.userCollateralInBaseCurrency, vars.userDebtInBaseCurrency, vars.currentLtv,, vars.healthFactor,) = GenericLogic\\n      .calculateUserAccountData(\\n      _balances,\\n      reservesData,\\n      reservesList,\\n      DataTypes.CalculateUserAccountDataParams({\\n        userConfig: params.userConfig,\\n        reservesCount: params.reservesCount,\\n        position: params.position,\\n        pool: params.pool\\n      })\\n    );\\n\\n    require(vars.userCollateralInBaseCurrency != 0, PoolErrorsLib.COLLATERAL_BALANCE_IS_ZERO);\\n    require(vars.currentLtv != 0, PoolErrorsLib.LTV_VALIDATION_FAILED);\\n\\n    require(vars.healthFactor > HEALTH_FACTOR_LIQUIDATION_THRESHOLD, PoolErrorsLib.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD);\\n\\n    vars.amountInBaseCurrency = IPool(params.pool).getAssetPrice(params.asset) * params.amount;\\n    unchecked {\\n      vars.amountInBaseCurrency /= vars.assetUnit;\\n    }\\n\\n    //add the current already borrowed amount to the amount requested to calculate the total collateral needed.\\n    vars.collateralNeededInBaseCurrency = (vars.userDebtInBaseCurrency + vars.amountInBaseCurrency).percentDiv(vars.currentLtv); //LTV is\\n    // calculated in percentage\\n\\n    require(vars.collateralNeededInBaseCurrency <= vars.userCollateralInBaseCurrency, PoolErrorsLib.COLLATERAL_CANNOT_COVER_NEW_BORROW);\\n  }\\n\\n  /**\\n   * @notice Validates a repay action.\\n   * @param amountSent The amount sent for the repayment. Can be an actual value or uint(-1)\\n   * @param variableDebt The borrow balance of the user\\n   */\\n  function validateRepay(uint256 amountSent, uint256 variableDebt) internal pure {\\n    require(amountSent != 0, PoolErrorsLib.INVALID_AMOUNT);\\n    require(amountSent != type(uint256).max, PoolErrorsLib.NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF);\\n    require((variableDebt != 0), PoolErrorsLib.NO_DEBT_OF_SELECTED_TYPE);\\n  }\\n\\n  /**\\n   * @notice Validates a flashloan action.\\n   * @param reserve The state of the reserve\\n   */\\n  function validateFlashloanSimple(DataTypes.ReserveData storage reserve) internal view {\\n    DataTypes.ReserveConfigurationMap memory configuration = reserve.configuration;\\n    require(!configuration.getFrozen(), PoolErrorsLib.RESERVE_FROZEN);\\n  }\\n\\n  struct ValidateLiquidationCallLocalVars {\\n    bool collateralReserveActive;\\n    bool collateralReservePaused;\\n    bool principalReserveActive;\\n    bool principalReservePaused;\\n    bool isCollateralEnabled;\\n  }\\n\\n  /**\\n   * @notice Validates the liquidation action.\\n   * @param userConfig The user configuration mapping\\n   * @param collateralReserve The reserve data of the collateral\\n   * @param params Additional parameters needed for the validation\\n   */\\n  function validateLiquidationCall(\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    DataTypes.ReserveData storage collateralReserve,\\n    DataTypes.ValidateLiquidationCallParams memory params\\n  ) internal view {\\n    ValidateLiquidationCallLocalVars memory vars;\\n\\n    require(params.healthFactor < HEALTH_FACTOR_LIQUIDATION_THRESHOLD, PoolErrorsLib.HEALTH_FACTOR_NOT_BELOW_THRESHOLD);\\n\\n    vars.isCollateralEnabled =\\n      collateralReserve.configuration.getLiquidationThreshold() != 0 && userConfig.isUsingAsCollateral(collateralReserve.id);\\n\\n    //if collateral isn't enabled as collateral by user, it cannot be liquidated\\n    require(vars.isCollateralEnabled, PoolErrorsLib.COLLATERAL_CANNOT_BE_LIQUIDATED);\\n    require(params.totalDebt != 0, PoolErrorsLib.SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER);\\n  }\\n\\n  /**\\n   * @notice Validates the health factor of a user.\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param userConfig The state of the user for the specific reserve\\n   * @param position The user to validate health factor of\\n   * @param reservesCount The number of available reserves\\n   * @param oracle The price oracle\\n   */\\n  function validateHealthFactor(\\n    mapping(address => mapping(bytes32 => DataTypes.PositionBalance)) storage _balances,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    DataTypes.UserConfigurationMap memory userConfig,\\n    bytes32 position,\\n    uint256 reservesCount,\\n    address oracle\\n  ) internal view returns (uint256, bool) {\\n    (,,,, uint256 healthFactor, bool hasZeroLtvCollateral) = GenericLogic.calculateUserAccountData(\\n      _balances,\\n      reservesData,\\n      reservesList,\\n      DataTypes.CalculateUserAccountDataParams({userConfig: userConfig, reservesCount: reservesCount, position: position, pool: oracle})\\n    );\\n\\n    require(healthFactor >= HEALTH_FACTOR_LIQUIDATION_THRESHOLD, PoolErrorsLib.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD);\\n\\n    return (healthFactor, hasZeroLtvCollateral);\\n  }\\n\\n  /**\\n   * @notice Validates the health factor of a user and the ltv of the asset being withdrawn.\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param userConfig The state of the user for the specific reserve\\n   * @param params The params to calculate HF and Ltv for\\n   */\\n  function validateHFAndLtv(\\n    mapping(address => mapping(bytes32 => DataTypes.PositionBalance)) storage _balances,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    DataTypes.UserConfigurationMap memory userConfig,\\n    DataTypes.ExecuteWithdrawParams memory params\\n  ) internal view {\\n    DataTypes.ReserveData memory reserve = reservesData[params.asset];\\n\\n    (, bool hasZeroLtvCollateral) =\\n      validateHealthFactor(_balances, reservesData, reservesList, userConfig, params.position, params.reservesCount, params.pool);\\n\\n    require(!hasZeroLtvCollateral || reserve.configuration.getLtv() == 0, PoolErrorsLib.LTV_VALIDATION_FAILED);\\n  }\\n\\n  /**\\n   * @notice Validates the action of activating the asset as collateral.\\n   * @dev Only possible if the asset has non-zero LTV and the user is not in isolation mode\\n   * @param userConfig the user configuration\\n   * @param reserveConfig The reserve configuration\\n   * @return True if the asset can be activated as collateral, false otherwise\\n   */\\n  function validateUseAsCollateral(\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    DataTypes.ReserveConfigurationMap memory reserveConfig\\n  ) internal view returns (bool) {\\n    if (reserveConfig.getLtv() == 0) return false;\\n    if (!userConfig.isUsingAsCollateralAny()) return true;\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0x467bbc7f54f1fd4ad4ccca06c816b6474f4608e75499652b791a468706a26edb\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/utils/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\n/**\\n * @title MathUtils library\\n * @notice Provides functions to perform linear and compounded interest calculations\\n */\\nlibrary MathUtils {\\n  using WadRayMath for uint256;\\n\\n  /// @dev Ignoring leap years\\n  uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n  /**\\n   * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate linearly accumulated during the timeDelta, in ray\\n   */\\n  function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 result = rate * (block.timestamp - uint256(lastUpdateTimestamp));\\n    unchecked {\\n      result = result / SECONDS_PER_YEAR;\\n    }\\n\\n    return WadRayMath.RAY + result;\\n  }\\n\\n  /**\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great\\n   * gas cost reductions. The whitepaper contains reference to the approximation and a table showing the margin of\\n   * error per different time periods\\n   *\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   */\\n  function calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp, uint256 currentTimestamp) internal pure returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 exp = currentTimestamp - uint256(lastUpdateTimestamp);\\n\\n    if (exp == 0) {\\n      return WadRayMath.RAY;\\n    }\\n\\n    uint256 expMinusOne;\\n    uint256 expMinusTwo;\\n    uint256 basePowerTwo;\\n    uint256 basePowerThree;\\n    unchecked {\\n      expMinusOne = exp - 1;\\n\\n      expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n      basePowerTwo = rate.rayMul(rate) / (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\\n      basePowerThree = basePowerTwo.rayMul(rate) / SECONDS_PER_YEAR;\\n    }\\n\\n    uint256 secondTerm = exp * expMinusOne * basePowerTwo;\\n    unchecked {\\n      secondTerm /= 2;\\n    }\\n    uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;\\n    unchecked {\\n      thirdTerm /= 6;\\n    }\\n\\n    return WadRayMath.RAY + (rate * exp) / SECONDS_PER_YEAR + secondTerm + thirdTerm;\\n  }\\n\\n  /**\\n   * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n   * @param rate The interest rate (in ray)\\n   * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n   * @return The interest rate compounded between lastUpdateTimestamp and current block timestamp, in ray\\n   */\\n  function calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\\n    return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\n  }\\n}\\n\",\"keccak256\":\"0x3ba05d0fa69896a8bee6d77716de05c4bab8cf2f65ccf87f53d99b3ec8c6595a\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/utils/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\n/**\\n * @title PercentageMath library\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary PercentageMath {\\n  // Maximum percentage factor (100.00%)\\n  uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n  // Half percentage factor (50.00%)\\n  uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n  /**\\n   * @notice Executes a percentage multiplication\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return result value percentmul percentage\\n   */\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\n    // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n    assembly {\\n      if iszero(or(iszero(percentage), iszero(gt(value, div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage))))) { revert(0, 0) }\\n\\n      result := div(add(mul(value, percentage), HALF_PERCENTAGE_FACTOR), PERCENTAGE_FACTOR)\\n    }\\n  }\\n\\n  /**\\n   * @notice Executes a percentage division\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return result value percentdiv percentage\\n   */\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\n    // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n    assembly {\\n      if or(iszero(percentage), iszero(iszero(gt(value, div(sub(not(0), div(percentage, 2)), PERCENTAGE_FACTOR))))) { revert(0, 0) }\\n\\n      result := div(add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)), percentage)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xefca727923a1e56076b240ce7613c96b0708da169fb6f1616d9810140678a8b8\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\n/**\\n * @title WadRayMath library\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary WadRayMath {\\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant HALF_WAD = 0.5e18;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant HALF_RAY = 0.5e27;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a*b, in wad\\n   */\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) { revert(0, 0) }\\n\\n      c := div(add(mul(a, b), HALF_WAD), WAD)\\n    }\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a/b, in wad\\n   */\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) { revert(0, 0) }\\n\\n      c := div(add(mul(a, WAD), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raymul b\\n   */\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) { revert(0, 0) }\\n\\n      c := div(add(mul(a, b), HALF_RAY), RAY)\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raydiv b\\n   */\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) { revert(0, 0) }\\n\\n      c := div(add(mul(a, RAY), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @return b = a converted to wad, rounded half up to the nearest wad\\n   */\\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n    assembly {\\n      b := div(a, WAD_RAY_RATIO)\\n      let remainder := mod(a, WAD_RAY_RATIO)\\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) { b := add(b, 1) }\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @return b = a converted in ray\\n   */\\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n    // to avoid overflow, b/WAD_RAY_RATIO == a\\n    assembly {\\n      b := mul(a, WAD_RAY_RATIO)\\n\\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) { revert(0, 0) }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb6ead6abaca638d2926a72f43c0fbe4e6935b24998b6cbe5726f6da4add36731\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\ninterface IAggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x6422549dac8d980bcd7f2f40a4f570834fee38827b384a077a9f306d4006db1c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFlashLoanSimpleReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IPool} from './pool/IPool.sol';\\n\\n/**\\n * @title IFlashLoanSimpleReceiver\\n * @notice Defines the basic interface of a flashloan-receiver contract.\\n * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n */\\ninterface IFlashLoanSimpleReceiver {\\n  /**\\n   * @notice Executes an operation after receiving the flash-borrowed asset\\n   * @dev Ensure that the contract can return the debt + premium, e.g., has\\n   *      enough funds to repay and has approved the Pool to pull the total amount\\n   * @param asset The address of the flash-borrowed asset\\n   * @param amount The amount of the flash-borrowed asset\\n   * @param premium The fee of the flash-borrowed asset\\n   * @param initiator The address of the flashloan initiator\\n   * @param params The byte-encoded params passed when initiating the flashloan\\n   * @return True if the execution of the operation succeeds, false otherwise\\n   */\\n  function executeOperation(\\n    address asset,\\n    uint256 amount,\\n    uint256 premium,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n\\n  function POOL() external view returns (IPool);\\n}\\n\",\"keccak256\":\"0x0858de6a478f30be7185f85c9a32b9c99c6e245aa554cb2a8074415f56fb27ff\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IHook.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\ninterface IHook {\\n  function afterInitialize(address sender, address pool) external returns (bytes4);\\n\\n  function beforeSupply(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterSupply(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeWithdraw(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterWithdraw(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeRepay(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterRepay(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeBorrow(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterBorrow(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeLiquidate(\\n    address liquidator,\\n    bytes32 position,\\n    address collateralAsset,\\n    address debtAsset,\\n    uint256 debtToCover,\\n    address pool,\\n    bytes calldata hookData\\n  ) external;\\n\\n  function afterLiquidate(\\n    address liquidator,\\n    bytes32 position,\\n    address collateralAsset,\\n    address debtAsset,\\n    uint256 debtToCover,\\n    address pool,\\n    bytes calldata hookData\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe52fad9c754d28923fb0e53ac7ab463889c9f2ba5511bccf1bfd1347502640ef\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\nimport {IPool} from './pool/IPool.sol';\\n\\n/**\\n * @title IPoolConfigurator\\n * @notice Defines the basic interface for a Pool configurator.\\n */\\ninterface IPoolConfigurator {\\n  /**\\n   * @dev Emitted when borrowing is enabled or disabled on a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if borrowing is enabled, false otherwise\\n   */\\n  event ReserveBorrowing(address indexed asset, bool enabled);\\n\\n  /**\\n   * @dev Emitted when a reserve is frozen or unfrozen\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param frozen True if reserve is frozen, false otherwise\\n   */\\n  event ReserveFrozen(address indexed asset, bool frozen);\\n\\n  /**\\n   * @dev Emitted when a reserve factor is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldReserveFactor The old reserve factor, expressed in bps\\n   * @param newReserveFactor The new reserve factor, expressed in bps\\n   */\\n  event ReserveFactorChanged(address indexed asset, uint256 oldReserveFactor, uint256 newReserveFactor);\\n\\n  /**\\n   * @dev Emitted when the borrow cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldBorrowCap The old borrow cap\\n   * @param newBorrowCap The new borrow cap\\n   */\\n  event BorrowCapChanged(address indexed asset, uint256 oldBorrowCap, uint256 newBorrowCap);\\n\\n  /**\\n   * @dev Emitted when the supply cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldSupplyCap The old supply cap\\n   * @param newSupplyCap The new supply cap\\n   */\\n  event SupplyCapChanged(address indexed asset, uint256 oldSupplyCap, uint256 newSupplyCap);\\n\\n  /**\\n   * @dev Emitted when a reserve interest strategy contract is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldStrategy The address of the old interest strategy contract\\n   * @param newStrategy The address of the new interest strategy contract\\n   */\\n  event ReserveInterestRateStrategyChanged(address indexed asset, address oldStrategy, address newStrategy);\\n\\n  /**\\n   * @notice Configures borrowing on a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if borrowing needs to be enabled, false otherwise\\n   */\\n  function setReserveBorrowing(IPool pool, address asset, bool enabled) external;\\n\\n  /**\\n   * @notice Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow\\n   * or rate swap but allows repayments, liquidations, rate rebalances and withdrawals.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param freeze True if the reserve needs to be frozen, false otherwise\\n   */\\n  function setReserveFreeze(IPool pool, address asset, bool freeze) external;\\n\\n  function initRoles(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Sets the interest rate strategy of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newRateStrategyAddress The address of the new interest strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(IPool pool, address asset, address newRateStrategyAddress) external;\\n\\n  /**\\n   * @notice Freezes the pool reserves. In the frozen state only withdraw and repay can be done\\n   * @param freeze True if protocol needs to be frozen, false otherwise\\n   */\\n  function setPoolFreeze(IPool pool, bool freeze) external;\\n\\n  /**\\n   * @notice Updates the borrow cap of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newBorrowCap The new borrow cap of the reserve\\n   */\\n  function setBorrowCap(IPool pool, address asset, uint256 newBorrowCap) external;\\n\\n  /**\\n   * @notice Updates the supply cap of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newSupplyCap The new supply cap of the reserve\\n   */\\n  function setSupplyCap(IPool pool, address asset, uint256 newSupplyCap) external;\\n\\n  function getPoolAssetConfiguration(IPool pool, address asset) external view returns (DataTypes.InitReserveConfig memory config);\\n\\n  function getPoolFullConfig(IPool pool) external view returns (DataTypes.InitPoolParams memory config);\\n}\\n\",\"keccak256\":\"0x6c74e4c79eec6caaada4ed103fc09edd00f638a62e159f65cfa1ff0c1818cc5e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\n\\nimport {IPoolConfigurator} from './IPoolConfigurator.sol';\\nimport {IPool} from './pool/IPool.sol';\\nimport {IBeacon} from '@openzeppelin/contracts/proxy/beacon/IBeacon.sol';\\n\\ninterface IPoolFactory is IBeacon {\\n  event PoolCreated(IPool indexed pool, uint256 indexed index, address creator);\\n  event ImplementationUpdated(address indexed old, address indexed updated, address owner);\\n  event TreasuryUpdated(address indexed old, address indexed updated, address owner);\\n  event ReserveFactorUpdated(uint256 indexed old, uint256 indexed updated, address owner);\\n  event ConfiguratorUpdated(address indexed old, address indexed updated, address owner);\\n  event RewardsControllerUpdated(address indexed old, address indexed updated, address owner);\\n  event FlashLoanPremiumToProtocolUpdated(uint256 indexed old, uint256 indexed updated, address owner);\\n\\n  function configurator() external view returns (IPoolConfigurator);\\n\\n  function createPool(DataTypes.InitPoolParams memory params) external returns (IPool pool);\\n\\n  function setConfigurator(address impl) external;\\n\\n  function flashLoanPremiumToProtocol() external view returns (uint256);\\n\\n  function liquidationProtocolFeePercentage() external view returns (uint256);\\n\\n  function pools(uint256 index) external view returns (IPool);\\n\\n  function isPool(address pool) external view returns (bool);\\n\\n  function poolsLength() external view returns (uint256);\\n\\n  function reserveFactor() external view returns (uint256);\\n\\n  function rewardsController() external view returns (address);\\n\\n  function setFlashloanPremium(uint256 updated) external;\\n\\n  function setImplementation(address updated) external;\\n\\n  function setReserveFactor(uint256 updated) external;\\n\\n  function setRewardsController(address _controller) external;\\n\\n  function setTreasury(address updated) external;\\n\\n  function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4c9bdad8e9b261f8aa51e551ffbd407894f06091ec1d82afb308ffeb7efa00b5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\n\\n/**\\n * @title IReserveInterestRateStrategy\\n * @notice Interface for the calculation of the interest rates\\n */\\ninterface IReserveInterestRateStrategy {\\n  /**\\n   * @notice Calculates the interest rates depending on the reserve's state and configurations\\n   * @param params The parameters needed to calculate interest rates\\n   * @return liquidityRate The liquidity rate expressed in rays\\n   * @return variableBorrowRate The variable borrow rate expressed in rays\\n   */\\n  function calculateInterestRates(\\n    bytes32 position,\\n    bytes memory extraData,\\n    DataTypes.CalculateInterestRatesParams memory params\\n  ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xd1ace78086e5b7ace988b77d7bf5345bc880480edecdf850a1424bc3cf3ed155\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/errors/PoolErrorsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\n/**\\n * @title PoolErrorsLib\\n * @notice Defines the errors for a ZeroLend Pool.\\n */\\nlibrary PoolErrorsLib {\\n  string public constant CALLER_NOT_POOL_ADMIN = 'CALLER_NOT_POOL_ADMIN'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = 'CALLER_NOT_EMERGENCY_ADMIN'; // 'The caller of the function is not an emergency\\n  // admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = 'CALLER_NOT_POOL_OR_EMERGENCY_ADMIN'; // 'The caller of the function is not a\\n  // pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = 'CALLER_NOT_RISK_OR_POOL_ADMIN'; // 'The caller of the function is not a risk or\\n  // pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = 'CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN'; // 'The caller of the function\\n  // is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = 'CALLER_NOT_BRIDGE'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = 'ADDRESSES_PROVIDER_NOT_REGISTERED'; // 'Pool addresses provider is not\\n  // registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = 'INVALID_ADDRESSES_PROVIDER_ID'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = 'NOT_CONTRACT'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = 'CALLER_NOT_POOL_CONFIGURATOR'; // 'The caller of the function is not the pool\\n  // configurator'\\n  string public constant CALLER_NOT_ATOKEN = 'CALLER_NOT_ATOKEN'; // 'The caller of the function is not an AToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = 'INVALID_ADDRESSES_PROVIDER'; // 'The address of the pool addresses provider is\\n  // invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = 'INVALID_FLASHLOAN_EXECUTOR_RETURN'; // 'Invalid return value of the flashloan\\n  // executor function'\\n  string public constant RESERVE_ALREADY_ADDED = 'RESERVE_ALREADY_ADDED'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = 'NO_MORE_RESERVES_ALLOWED'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = 'RESERVE_LIQUIDITY_NOT_ZERO'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = 'FLASHLOAN_PREMIUM_INVALID'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = 'INVALID_RESERVE_PARAMS'; // 'Invalid risk parameters for the reserve'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = 'BRIDGE_PROTOCOL_FEE_INVALID'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = 'CALLER_MUST_BE_POOL'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = 'INVALID_MINT_AMOUNT'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = 'INVALID_BURN_AMOUNT'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = 'INVALID_AMOUNT'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = 'RESERVE_INACTIVE'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = 'RESERVE_FROZEN'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = 'RESERVE_PAUSED'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = 'BORROWING_NOT_ENABLED'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = 'STABLE_BORROWING_NOT_ENABLED'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = 'NOT_ENOUGH_AVAILABLE_USER_BALANCE'; // 'User cannot withdraw more than the\\n  // available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = 'INVALID_INTEREST_RATE_MODE_SELECTED'; // 'Invalid interest rate mode\\n  // selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = 'COLLATERAL_BALANCE_IS_ZERO'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = 'HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD'; // 'Health\\n  // factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = 'COLLATERAL_CANNOT_COVER_NEW_BORROW'; // 'There is not enough collateral to\\n  // cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = 'COLLATERAL_SAME_AS_BORROWING_CURRENCY'; // 'Collateral is (mostly) the\\n  // same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = 'AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE'; // 'The requested amount is\\n  // greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = 'NO_DEBT_OF_SELECTED_TYPE'; // 'For repayment of a specific type of debt, the user needs\\n  // to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = 'NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF'; // 'To repay on behalf of a user\\n  // an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = 'NO_OUTSTANDING_STABLE_DEBT'; // 'User does not have outstanding stable rate debt on\\n  // this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = 'NO_OUTSTANDING_VARIABLE_DEBT'; // 'User does not have outstanding variable rate\\n  // debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = 'UNDERLYING_BALANCE_ZERO'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = 'INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET'; // 'Interest rate\\n  // rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = 'HEALTH_FACTOR_NOT_BELOW_THRESHOLD'; // 'Health factor is not below the\\n  // threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = 'COLLATERAL_CANNOT_BE_LIQUIDATED'; // 'The collateral chosen cannot be\\n  // liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = 'SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER'; // 'User did not borrow the\\n  // specified currency'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = 'INCONSISTENT_FLASHLOAN_PARAMS'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = 'BORROW_CAP_EXCEEDED'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = 'SUPPLY_CAP_EXCEEDED'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = 'UNBACKED_MINT_CAP_EXCEEDED'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = 'DEBT_CEILING_EXCEEDED'; // 'Debt ceiling is exceeded'\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = 'UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO'; // 'Claimable rights over underlying\\n  // not zero (aToken supply or accruedToTreasuryShares)'\\n  string public constant STABLE_DEBT_NOT_ZERO = 'STABLE_DEBT_NOT_ZERO'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = 'VARIABLE_DEBT_SUPPLY_NOT_ZERO'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = 'LTV_VALIDATION_FAILED'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = 'INCONSISTENT_EMODE_CATEGORY'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = 'PRICE_ORACLE_SENTINEL_CHECK_FAILED'; // 'Price oracle sentinel validation\\n  // failed'\\n  string public constant RESERVE_ALREADY_INITIALIZED = 'RESERVE_ALREADY_INITIALIZED'; // 'Reserve has already been initialized'\\n  string public constant LTV_ZERO = 'LTV_ZERO'; // 'ltv is zero'\\n  string public constant INVALID_LTV = 'INVALID_LTV'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = 'INVALID_LIQ_THRESHOLD'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = 'INVALID_LIQ_BONUS'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = 'INVALID_DECIMALS'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = 'INVALID_RESERVE_FACTOR'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = 'INVALID_BORROW_CAP'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = 'INVALID_SUPPLY_CAP'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = 'INVALID_LIQUIDATION_PROTOCOL_FEE'; // 'Invalid liquidation protocol fee for the\\n  // reserve'\\n  string public constant INVALID_EMODE_CATEGORY = 'INVALID_EMODE_CATEGORY'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = 'INVALID_UNBACKED_MINT_CAP'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = 'INVALID_DEBT_CEILING'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = 'INVALID_RESERVE_INDEX'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = 'ACL_ADMIN_CANNOT_BE_ZERO'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = 'INCONSISTENT_PARAMS_LENGTH'; // 'Array parameters that should be equal length are\\n  // not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = 'ZERO_ADDRESS_NOT_VALID'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = 'INVALID_EXPIRATION'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = 'INVALID_SIGNATURE'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = 'OPERATION_NOT_SUPPORTED'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = 'DEBT_CEILING_NOT_ZERO'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = 'ASSET_NOT_LISTED'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = 'INVALID_OPTIMAL_USAGE_RATIO'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = 'INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO'; // 'Invalid optimal\\n  // stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = 'UNDERLYING_CANNOT_BE_RESCUED'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = 'ADDRESSES_PROVIDER_ALREADY_ADDED'; // 'Reserve has already been added to\\n  // reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = 'POOL_ADDRESSES_DO_NOT_MATCH'; // 'The token implementation pool address and the pool\\n  // address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = 'STABLE_BORROWING_ENABLED'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = 'SILOED_BORROWING_VIOLATION'; // 'User is trying to borrow multiple assets including a\\n  // siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = 'RESERVE_DEBT_NOT_ZERO'; // the total debt of the reserve needs to be 0\\n  string public constant FLASHLOAN_DISABLED = 'FLASHLOAN_DISABLED'; // FlashLoaning for this asset is disabled\\n}\\n\",\"keccak256\":\"0xc03b563005a3864189c39646769eaf33108e46864a754b57aecef2f40c5362b4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/events/PoolEventsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\n/**\\n * @title PoolEventsLib\\n * @notice Defines the events for a ZeroLend Pool.\\n */\\nlibrary PoolEventsLib {\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param position The position to update\\n   * @param amount The amount supplied\\n   */\\n  event Supply(address indexed reserve, bytes32 indexed position, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param position The position to update\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, bytes32 indexed position, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param position The position to update\\n   * @param amount The amount borrowed out\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   */\\n  event Borrow(address indexed reserve, address user, bytes32 indexed position, uint256 amount, uint256 borrowRate);\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param position The position of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   */\\n  event Repay(address indexed reserve, bytes32 indexed position, address indexed repayer, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param position The position to update\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, bytes32 indexed position);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param position The position to update\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, bytes32 indexed position);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   */\\n  event FlashLoan(address indexed target, address initiator, address indexed asset, uint256 amount, uint256 premium);\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param position The position to liquidate\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    bytes32 indexed position,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param borrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve, uint256 liquidityRate, uint256 variableBorrowRate, uint256 liquidityIndex, uint256 borrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @dev Emitted when the collateralization risk parameters for the specified asset are updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param ltv The loan to value of the asset when used as collateral\\n   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n   * @param liquidationBonus The bonus liquidators receive to liquidate this asset\\n   */\\n  event CollateralConfigurationChanged(address indexed asset, uint256 ltv, uint256 liquidationThreshold, uint256 liquidationBonus);\\n\\n  /**\\n   * @dev Emitted when a reserve is initialized.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oracle The address of the oracle\\n   * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve\\n   */\\n  event ReserveInitialized(address indexed asset, address oracle, address interestRateStrategyAddress);\\n}\\n\",\"keccak256\":\"0x7298fb2653901485b13f9a719a4a6a5040e369acbacbf489dd62e418d9881354\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\nimport {IHook} from '../IHook.sol';\\n\\nimport {IPoolFactory} from '../IPoolFactory.sol';\\nimport {IPoolGetters} from './IPoolGetters.sol';\\nimport {IPoolSetters} from './IPoolSetters.sol';\\n\\n/**\\n * @title IPool\\n * @notice Defines the basic interface for a ZeroLend Pool.\\n */\\ninterface IPool is IPoolGetters, IPoolSetters {\\n  /**\\n   * Returns the version of the pool implementation\\n   * @return version The version of this pool's implementation\\n   */\\n  function revision() external view returns (uint256 version);\\n\\n  /**\\n   * @notice Initializes the pool with the given parameters. This call sets all the assets and their configs (LTV/LT/Oracle etc..)\\n   * in one call. Since assets once created cannot be changed, this has to be done within the initialize call itself.\\n   * @dev This is function is called by the factory contract.\\n   * @param params The init parameters for the pool. See {DataTypes-InitPoolParams}\\n   */\\n  function initialize(DataTypes.InitPoolParams memory params) external;\\n}\\n\",\"keccak256\":\"0x402265219fd814693ca335b97ecdfc397d707997596336e96facdcd26eb2d8b4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPoolGetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\nimport {IHook} from '../IHook.sol';\\nimport {IPoolFactory} from '../IPoolFactory.sol';\\n\\ninterface IPoolGetters {\\n  /**\\n   * @notice Get the balance of a specific asset in a specific position.\\n   * @param asset The address of the asset.\\n   * @param positionId The ID of the position.\\n   * @return balance The balance of the specified asset in the specified position.\\n   */\\n  function getBalanceByPosition(address asset, bytes32 positionId) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Get the balance of a specific asset for a user given a position index\\n   * @param asset The address of the asset.\\n   * @param who The user to find the balance of\\n   * @param index The index of the user's position\\n   * @return balance The balance of the specified asset for the given user and position idnex.\\n   */\\n  function getBalance(address asset, address who, uint256 index) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Get the debt of a specific asset for a user given a position index\\n   * @param asset The address of the asset.\\n   * @param who The user to find the debt of\\n   * @param index The index of the user's position\\n   * @return debt The debt of the specified asset for the given user and position idnex.\\n   */\\n  function getDebt(address asset, address who, uint256 index) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Get the debt of a specific asset in a specific position.\\n   * @param asset The address of the asset.\\n   * @param positionId The ID of the position.\\n   * @return debt The debt of the specified asset in the specified position.\\n   */\\n  function getDebtByPosition(address asset, bytes32 positionId) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Gets the reserve factor that this pool charges. The reserve factory is the percentage of\\n   * revenue that the pool shares with the governance.\\n   * @dev This parameter is immutable.\\n   * @return reseveFactor The amount of revenue that gets shared to governance.\\n   */\\n  function getReserveFactor() external view returns (uint256 reseveFactor);\\n\\n  /**\\n   * @notice The factory contract that created this contract\\n   */\\n  function factory() external view returns (IPoolFactory f);\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @param index The index of the user's position\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user,\\n    uint256 index\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @param index The index of the user's position\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(address user, uint256 index) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the number of initialized reserves\\n   * @return The count\\n   */\\n  function getReservesCount() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the current hook for the pool.\\n   * @dev The hook is immutable. Once it is set, it cannot be changed.\\n   * @return The hook for the pool, if set.\\n   */\\n  function getHook() external view returns (IHook);\\n\\n  /**\\n   * @notice Gets the raw balance object for the asset for a given position id\\n   */\\n  function getBalanceRawByPositionId(address asset, bytes32 positionId) external view returns (DataTypes.PositionBalance memory);\\n\\n  /**\\n   * @notice Gets the raw balance object for the asset for a given user and the position index.\\n   * @param asset The address of the asset\\n   * @param who The address of the user\\n   * @param index The index of the user's position\\n   */\\n  function getBalanceRaw(address asset, address who, uint256 index) external view returns (DataTypes.PositionBalance memory);\\n\\n  /**\\n   * @notice Gets the raw reserve supply object for a given asset.\\n   * @param asset The address of the asset\\n   * @return data The reserve supply information of the given asset\\n   */\\n  function getTotalSupplyRaw(address asset) external view returns (DataTypes.ReserveSupplies memory data);\\n\\n  /**\\n   * @notice Gets the Pool Configurator\\n   * @return The address of the Pool Configurator\\n   */\\n  function getConfigurator() external view returns (address);\\n\\n  function totalAssets(address asset) external view returns (uint256 balance);\\n\\n  function totalDebt(address asset) external view returns (uint256 balance);\\n\\n  function supplyShares(address asset, bytes32 positionId) external view returns (uint256 shares);\\n\\n  function marketBalances(address asset)\\n    external\\n    view\\n    returns (uint256 totalSupplyAssets, uint256 totalSupplyShares, uint256 totalBorrowAssets, uint256 totalBorrowShares);\\n\\n  function supplyAssets(address asset, bytes32 positionId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc58b1c9b2920e038ad3229012b0ff8e587f2fedef0c4ae397351ea9a44a98065\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPoolSetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\nimport {IHook} from '../IHook.sol';\\nimport {IPoolFactory} from '../IPoolFactory.sol';\\n\\ninterface IPoolSetters {\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the rate strategy for the reserve\\n   * @param source The address of the oracle for the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setReserveConfiguration(\\n    address asset,\\n    address rateStrategyAddress,\\n    address source,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return minted The amount of shares minted\\n   */\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory minted);\\n\\n  /**\\n   * @dev See [supply(...)](#supply) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function supplySimple(address asset, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return burnt The amount of shares burnt\\n   */\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory burnt);\\n\\n  /**\\n   * @dev See [withdraw(...)](#withdraw) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function withdrawSimple(address asset, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory minted);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return borrowed The amount of shares borrowed\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory borrowed);\\n\\n  /**\\n   * @dev See [borrow(...)](#borrow) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function borrowSimple(address asset, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return repaid The amount of shares repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory repaid);\\n\\n  /**\\n   * @dev See [repay(...)](#repay) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function repaySimple(address asset, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param index The index of the user's position\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, uint256 index, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  function liquidate(\\n    address collateralAsset,\\n    address debtAsset,\\n    bytes32 position,\\n    uint256 debtToCover,\\n    DataTypes.ExtraData memory data\\n  ) external;\\n\\n  /**\\n   * @dev See [liquidate(...)](#liquidate) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function liquidateSimple(address collateralAsset, address debtAsset, bytes32 position, uint256 debtToCover) external;\\n\\n  /**\\n   * @dev See [flashLoan(...)](#flashLoan) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function flashLoanSimple(address receiverAddress, address asset, uint256 amount, bytes calldata params) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration.\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    DataTypes.ExtraData memory data\\n  ) external;\\n\\n  function forceUpdateReserves() external;\\n\\n  function forceUpdateReserve(address asset) external;\\n}\\n\",\"keccak256\":\"0xcb7319c0582e232d0fca0963acc984465e6a1d0acd6de529c78125434fb47dd5\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c80639a62d6b71161015c578063c45a0155116100ce578063eba086e711610087578063eba086e714610452578063f3e0ffbf146106c9578063f7af06af146106dc578063f86beb91146106ef578063fb4a8d4d14610702578063fdaeebd11461071557600080fd5b8063c45a015514610631578063c619fc1514610648578063d15e00531461065b578063d1946dbc1461066e578063d466d68f14610683578063e80b5b5f1461069657600080fd5b8063b189b7c411610120578063b189b7c414610592578063b3596f07146105a5578063b36d5e8b146105b8578063b55bd84d146105cb578063b69fbec8146105dc578063c44b11f7146105ef57600080fd5b80639a62d6b71461052f5780639b7ae5ec14610551578063a0f7022a14610559578063a13701f51461056c578063a67c04c21461057f57600080fd5b806352751797116101f557806367060c2e116101b957806367060c2e1461047857806368488ca5146104b65780636d2b42bd146104c957806372218d0414610509578063754e312e146105155780637cc963801461052857600080fd5b806352751797146103fd578063598bf786146104425780635f558e531461044a5780636049a52d1461045257806361e5f3541461046557600080fd5b806335ea6a751161024757806335ea6a751461037e578063386497fd1461039e5780633c5d0ff2146103b157806343f6ee3c146103c457806349b16a7d146103d7578063526666f1146103ea57600080fd5b80631d8b6313146102845780631ff517ff146102b757806322f78ad6146102d8578063279c1de8146102ed5780632fb8721c14610345575b600080fd5b610297610292366004612f13565b610728565b604080518251815260209283015192810192909252015b60405180910390f35b6102ca6102c5366004612f48565b610784565b6040519081526020016102ae565b6102eb6102e63660046130f5565b6107c2565b005b6103006102fb36600461316a565b6107d6565b6040516102ae919060006080820190506001600160801b0380845116835280602085015116602084015250604083015160408301526060830151606083015292915050565b6102ca61035336600461316a565b6001600160a01b03919091166000908152603560209081526040808320938352929052206002015490565b61039161038c366004612f48565b610847565b6040516102ae9190613196565b6102ca6103ac366004612f48565b610917565b6102976103bf36600461327c565b610938565b6102eb6103d2366004613450565b610961565b6102976103e5366004612f13565b610c34565b6102976103f836600461327c565b610c86565b61042a61040b366004613539565b61ffff166000908152603760205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016102ae565b6102eb610ca6565b6102ca610ced565b6102ca61046036600461316a565b610d6b565b6102ca61047336600461355d565b610dab565b61048b610486366004612f48565b610e06565b604080518251815260208084015190820152918101516001600160801b0316908201526060016102ae565b6102ca6104c436600461316a565b610e7e565b6104dc6104d736600461316a565b610ebe565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016102ae565b60385461ffff166102ca565b61029761052336600461327c565b610fd7565b60016102ca565b61054261053d36600461316a565b610ff7565b604051905181526020016102ae565b61042a611042565b6102eb61056736600461359e565b6110bb565b6102eb61057a36600461364a565b611215565b6102eb61058d3660046136e0565b505050565b6102ca6105a036600461355d565b61122b565b6102ca6105b3366004612f48565b611286565b6102eb6105c636600461371e565b611304565b6039546001600160a01b031661042a565b6102976105ea366004612f13565b611344565b6105426105fd366004612f48565b60408051602080820183526000918290526001600160a01b0393909316815260338352819020815192830190915254815290565b6038546201000090046001600160a01b031661042a565b6102eb610656366004613790565b611396565b6102ca610669366004612f48565b6113db565b6106766113fc565b6040516102ae91906137d6565b61029761069136600461327c565b6114bc565b6106a96106a4366004612f48565b6114dc565b6040805194855260208501939093529183015260608201526080016102ae565b6102ca6106d7366004612f48565b611563565b6102eb6106ea36600461364a565b61159b565b6102976106fd366004612f13565b6117af565b61030061071036600461355d565b611801565b6102eb610723366004612f48565b61188b565b604080518082019091526000808252602082015261077a8484846040518060400160405280604051806020016040528060008152508152602001604051806020016040528060008152508152506118c9565b90505b9392505050565b6001600160a01b038116600090815260336020908152604080832060020154603690925282206107bc916001600160801b0316611b64565b92915050565b6107cf8585858585611b73565b5050505050565b6107de612e59565b506001600160a01b0382166000908152603560209081526040808320848452825291829020825160808101845281546001600160801b038082168352600160801b9091041692810192909252600181015492820192909252600290910154606082015292915050565b61084f612e93565b506001600160a01b0390811660009081526033602090815260409182902082516101608101845281546101408201908152815260018201546001600160801b0380821694830194909452600160801b9081900484169482019490945260028201548084166060830152939093049091166080830152600381015464ffffffffff811660a084015261ffff6501000000000082041660c08401526701000000000000009004831660e0830152600481015490921661010082015260059091015461012082015290565b6001600160a01b03811660009081526033602052604081206107bc90611dd4565b604080518082019091526000808252602082015261095885858585611e2a565b95945050505050565b600054610100900460ff16158080156109815750600054600160ff909116105b8061099b5750303b15801561099b575060005460ff166001145b610a035760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610a26576000805461ff0019166101001790555b6038805462010000600160b01b0319163362010000021790558151603980546001600160a01b0319166001600160a01b0390921691909117905560005b826020015151811015610be15773__$243a6cee9cb18965f5c0fe8cae0faec7ed$__6369fc1bdf603360376040518060a0016040528088602001518781518110610aaf57610aaf613823565b60200260200101516001600160a01b0316815260200188604001518781518110610adb57610adb613823565b60200260200101516001600160a01b0316815260200188606001518781518110610b0757610b07613823565b60200260200101516001600160a01b0316815260200188608001518781518110610b3357610b33613823565b602090810291909101810151825260385461ffff169101526040516001600160e01b031960e086901b168152610b6e93929190600401613839565b60006040518083038186803b158015610b8657600080fd5b505af4158015610b9a573d6000803e3d6000fd5b50506038805461ffff16925090506000610bb3836138fc565b91906101000a81548161ffff021916908361ffff160217905550508080610bd99061391d565b915050610a63565b50610bea612073565b8015610c30576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b604080518082019091526000808252602082015261077a848484604051806040016040528060405180602001604052806000815250815260200160405180602001604052806000815250815250611e2a565b604080518082019091526000808252602082015261095885858585612156565b60005b60385461ffff16811015610cea57600081815260376020526040902054610cd8906001600160a01b031661188b565b80610ce28161391d565b915050610ca9565b50565b6000603860029054906101000a90046001600160a01b03166001600160a01b0316634322b7146040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190613936565b905090565b6001600160a01b03821660009081526033602090815260408083206001015460358352818420858552909252822061077d916001600160801b031661248e565b600080610dc16001600160a01b038516846124e6565b6001600160a01b0386166000908152603360209081526040808320600101546035835281842085855290925290912091925061095891906001600160801b031661248e565b610e336040518060600160405280600081526020016000815260200160006001600160801b031681525090565b506001600160a01b0316600090815260366020908152604091829020825160608101845281548152600182015492810192909252600201546001600160801b03169181019190915290565b6001600160a01b03821660009081526033602090815260408083206002015460358352818420858552909252822061077d916001600160801b031661253b565b6000808080808080610ed96001600160a01b038a16896124e6565b60408051608081018252308152602080820184815260385461ffff168385019081526000868152603484528590208551938401865254835260608401928352935163f0dd5f0960e01b815260356004820152603360248201526037604482015292516001600160a01b03166064840152516084830152915160a482015290515160c482015290915073__$243a6cee9cb18965f5c0fe8cae0faec7ed$__9063f0dd5f099060e40160c060405180830381865af4158015610f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc1919061394f565b949e939d50919b50995097509095509350505050565b604080518082019091526000808252602082015261095885858585612584565b6040805160208101909152600081526034600061101d6001600160a01b038616856124e6565b8152602080820192909252604090810160002081519283019091525481529392505050565b6000603860029054906101000a90046001600160a01b03166001600160a01b0316632b507df86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190613999565b603860029054906101000a90046001600160a01b03166001600160a01b0316632b507df86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561110e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111329190613999565b6001600160a01b0316336001600160a01b0316146111865760405162461bcd60e51b815260206004820152601160248201527037b7363c9031b7b73334b3bab930ba37b960791b60448201526064016109fa565b604051632472484560e21b8152603360048201526001600160a01b0380861660248301528085166044830152831660648201528135608482015273__$243a6cee9cb18965f5c0fe8cae0faec7ed$__906391c921149060a40160006040518083038186803b1580156111f757600080fd5b505af415801561120b573d6000803e3d6000fd5b5050505050505050565b61122386868686868661159b565b505050505050565b6000806112416001600160a01b038516846124e6565b6001600160a01b0386166000908152603360209081526040808320600201546035835281842085855290925290912091925061095891906001600160801b031661253b565b6001600160a01b03808216600090815260336020908152604080832060049081015482516350d25bcd60e01b81529251949516936350d25bcd93838301939092908290030181865afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc9190613936565b6107cf858585858560405180604001604052806040518060200160405280600081525081526020016040518060200160405280600081525081525061159b565b604080518082019091526000808252602082015261077a848484604051806040016040528060405180602001604052806000815250815260200160405180602001604052806000815250815250612584565b6113d584848484604051806040016040528060405180602001604052806000815250815260200160405180602001604052806000815250815250611b73565b50505050565b6001600160a01b03811660009081526033602052604081206107bc906127da565b60385460609060009061ffff166001600160401b0381111561142057611420612f65565b604051908082528060200260200182016040528015611449578160200160208202803683370190505b50905060005b60385461ffff168110156114b65760008181526037602052604090205482516001600160a01b039091169083908390811061148c5761148c613823565b6001600160a01b0390921660209283029190910190910152806114ae8161391d565b91505061144f565b50919050565b6040805180820190915260008082526020820152610958858585856118c9565b6001600160a01b038116600090815260366020908152604080832060339092528220600101548291829182919061151d9082906001600160801b031661282a565b60018201546001600160a01b0388166000908152603360205260409020600201546115529084906001600160801b0316611b64565b925491989097509195509350915050565b6001600160a01b038116600090815260336020908152604080832060010154603690925282206107bc916001600160801b031661282a565b60016115a68161283c565b60006040518060e00160405280886001600160a01b03168152602001896001600160a01b0316815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602080820186905260408083018a905260385481516309e8a6df60e01b81529151606090940193620100009091046001600160a01b0316926309e8a6df92600480820193918290030181865afa158015611668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168c9190613936565b8152602001603860029054906101000a90046001600160a01b03166001600160a01b0316634322b7146040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117089190613936565b90526001600160a01b038816600090815260336020908152604080832060369092529182902091516356ae2b9f60e01b815292935073__$f440defa7d9116432d51b4b8d8a7c97a4a$__926356ae2b9f9261176c9230929091908790600401613a2a565b60006040518083038186803b15801561178457600080fd5b505af4158015611798573d6000803e3d6000fd5b50505050506117a681612909565b50505050505050565b604080518082019091526000808252602082015261077a848484604051806040016040528060405180602001604052806000815250815260200160405180602001604052806000815250815250612156565b611809612e59565b600061181e6001600160a01b038516846124e6565b6001600160a01b038616600090815260356020908152604080832093835292815290829020825160808101845281546001600160801b038082168352600160801b909104169281019290925260018101549282019290925260029091015460608201529150509392505050565b6001600160a01b0381166000908152603360209081526040808320603690925282209091906118bb908390612920565b905061058d826000836129b5565b604080518082019091526000808252602082015260006118e88161283c565b60006118f433866124e6565b6039549091506001600160a01b03161561197657603954845160405163b22e2bcb60e01b81526001600160a01b039092169163b22e2bcb9161194391339186918d9130918e9190600401613ac9565b600060405180830381600087803b15801561195d57600080fd5b505af1158015611971573d6000803e3d6000fd5b505050505b6001600160a01b038088166000818152603360209081526040808320868452603483528184208585526035845282852088865284528285208686526036855294839020835160c0810185529687523087860152868401899052606087018c9052608087018e905260385484516310c8adc560e21b8152945173__$6b8590065f9498378365994f3dbde8e7da$__99630587fd889995989497949693959460a08601946201000090940490911692634322b71492600480830193928290030181865afa158015611a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6d9190613936565b8152506040518663ffffffff1660e01b8152600401611a90959493929190613b17565b6040805180830381865af4158015611aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad09190613b9d565b6039549093506001600160a01b031615611b5157603954845160405162d3c97d60e21b81526001600160a01b039092169163034f25f491611b1e91339186918d9130918e9190600401613ac9565b600060405180830381600087803b158015611b3857600080fd5b505af1158015611b4c573d6000803e3d6000fd5b505050505b50611b5b81612909565b50949350505050565b815460009061077d9083612a00565b6002611b7e8161283c565b6039546001600160a01b031615611bfe576039548251604051637e505c0760e01b81526001600160a01b0390921691637e505c0791611bcb91339189918c918c918b913091600401613bcf565b600060405180830381600087803b158015611be557600080fd5b505af1158015611bf9573d6000803e3d6000fd5b505050505b73__$321a6e15da61f94683499c6fc4078a6664$__639406fcf7603360376035603660346040518061010001604052808e6001600160a01b031681526020018d6001600160a01b03168152602001306001600160a01b031681526020018c81526020018a81526020018b8152602001603860029054906101000a90046001600160a01b03166001600160a01b0316634322b7146040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce49190613936565b815260385461ffff166020909101526040516001600160e01b031960e089901b168152611d1996959493929190600401613c9d565b60006040518083038186803b158015611d3157600080fd5b505af4158015611d45573d6000803e3d6000fd5b50506039546001600160a01b0316159150611dcb9050576039548251604051630127e79f60e01b81526001600160a01b0390921691630127e79f91611d9891339189918c918c918b913091600401613bcf565b600060405180830381600087803b158015611db257600080fd5b505af1158015611dc6573d6000803e3d6000fd5b505050505b61122381612909565b600381015460009064ffffffffff16428103611dfc575050600201546001600160801b031690565b600283015461077d906001600160801b0380821691611e2491600160801b9091041684612a44565b90612a00565b60408051808201909152600080825260208201526000611e498161283c565b6000611e5533866124e6565b6039549091506001600160a01b031615611ed75760395484516040516326e43d4160e21b81526001600160a01b0390921691639b90f50491611ea491339186918d9130918e9190600401613ac9565b600060405180830381600087803b158015611ebe57600080fd5b505af1158015611ed2573d6000803e3d6000fd5b505050505b6001600160a01b0380881660008181526033602090815260408083206035835281842087855283528184208585526036845293829020825160e0810184529586523086850152338684015260608601889052608086018b905260a086018d905260385483516310c8adc560e21b8152935173__$0c85fc270047731e733974e5c7bb75d4b8$__98639e17b42798949796939560c08601946201000090940490911692634322b714926004808401938290030181865afa158015611f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc29190613936565b8152506040518563ffffffff1660e01b8152600401611fe49493929190613cce565b6040805180830381865af4158015612000573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120249190613b9d565b6039549093506001600160a01b031615611b5157603954845160405163714169ed60e11b81526001600160a01b039092169163e282d3da91611b1e91339186918d9130918e9190600401613ac9565b600054610100900460ff166120de5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109fa565b600160208190527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb498190557fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f81905560026000527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f55565b604080518082019091526000808252602082015260006121758161283c565b600061218133866124e6565b6001600160a01b03881660009081526035602090815260408083208484529091529020600201549091508611156121f25760405162461bcd60e51b8152602060048201526015602482015274496e73756666696369656e742042616c616e63652160581b60448201526064016109fa565b6039546001600160a01b0316156122715760395484516040516305d98abd60e41b81526001600160a01b0390921691635d98abd09161223e91339186918d9130918e9190600401613ac9565b600060405180830381600087803b15801561225857600080fd5b505af115801561226c573d6000803e3d6000fd5b505050505b60008181526034602090815260408083206001600160a01b03808c1680865260368552948390208351610100810185529586523386860152308685015260608601879052608086018a905260a086018c905260385484516310c8adc560e21b8152945173__$6b8590065f9498378365994f3dbde8e7da$__976366f9f343976033976037979660359695939460c086019462010000900490911692634322b71492600480820193918290030181865afa158015612332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123569190613936565b815260385461ffff166020909101526040516001600160e01b031960e089901b16815261238b96959493929190600401613c9d565b6040805180830381865af41580156123a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cb9190613b9d565b604051633e4c478560e11b8152603360048201526001600160a01b038916602482015290935073__$243a6cee9cb18965f5c0fe8cae0faec7ed$__90637c988f0a9060440160006040518083038186803b15801561242857600080fd5b505af415801561243c573d6000803e3d6000fd5b50506039546001600160a01b0316159150611b51905057603954845160405163688194c960e11b81526001600160a01b039092169163d103299291611b1e91339186918d9130918e9190600401613ac9565b8154600283015460009182916124b391600160801b90046001600160801b0316612a00565b60028501546124c29085612a00565b6124cc9190613d6f565b90508084600201546124de9190613d82565b949350505050565b6040516bffffffffffffffffffffffff19606084901b166020820152640d2dcc8caf60db1b60348201526039810182905260009060590160405160208183030381529060405280519060200120905092915050565b815460018301546000918291612559916001600160801b0316612a00565b60018501546125689085612a00565b6125729190613d6f565b90508084600101546124de9190613d82565b604080518082019091526000808252602082015260006125a38161283c565b60006125af33866124e6565b6039549091506001600160a01b031615612631576039548451604051632d1a6e7b60e11b81526001600160a01b0390921691635a34dcf6916125fe91339186918d9130918e9190600401613ac9565b600060405180830381600087803b15801561261857600080fd5b505af115801561262c573d6000803e3d6000fd5b505050505b60008181526034602090815260408083206001600160a01b03808c1680865260368552948390208351610100810185529586523086860152338685015260608601879052608086018a905260a086018c905260385484516310c8adc560e21b8152945173__$0c85fc270047731e733974e5c7bb75d4b8$",
  "libraries": {
    "LiquidationLogic": "0x3732598124Bb23Ec7a191C71B8127E11BF61eAF7",
    "SupplyLogic": "0x135b337530eAfF12Ea63c6D49d03Bd4680997dE8",
    "FlashLoanLogic": "0xC4B7703c617A219973E3C6c5CB2d277f8c5c2942",
    "BorrowLogic": "0x7242CB02248F1F265b8120BC4044F1a3ADEDa7FC",
    "PoolLogic": "0x5adbB370D2369256682aaB1556B9a0155693297B"
  },
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "borrow(address,uint256,uint256,(bytes,bytes))": {
        "params": {
          "amount": "The amount to be borrowed",
          "asset": "The address of the underlying asset to borrow",
          "data": "Extra data that gets passed to the hook and to the interest rate strategy",
          "index": "The index of the user's position"
        },
        "returns": {
          "_0": "The amount of shares borrowed"
        }
      },
      "borrowSimple(address,uint256,uint256)": {
        "details": "See [borrow(...)](#borrow) for the full documentation. This call executes the same function with dummy data params"
      },
      "flashLoan(address,address,uint256,bytes,(bytes,bytes))": {
        "details": "IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.",
        "params": {
          "amount": "The amount of the asset being flash-borrowed",
          "asset": "The address of the asset being flash-borrowed",
          "data": "Extra data that gets passed to the hook and to the interest rate strategy",
          "params": "Variadic packed params to pass to the receiver as extra information",
          "receiverAddress": "The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface"
        }
      },
      "flashLoanSimple(address,address,uint256,bytes)": {
        "details": "See [flashLoan(...)](#flashLoan) for the full documentation. This call executes the same function with dummy data params"
      },
      "getAssetPrice(address)": {
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "The price of the asset"
        }
      },
      "getBalance(address,address,uint256)": {
        "params": {
          "asset": "The address of the asset.",
          "index": "The index of the user's position",
          "who": "The user to find the balance of"
        },
        "returns": {
          "balance": "The balance of the specified asset for the given user and position idnex."
        }
      },
      "getBalanceByPosition(address,bytes32)": {
        "params": {
          "asset": "The address of the asset.",
          "positionId": "The ID of the position."
        },
        "returns": {
          "balance": "The balance of the specified asset in the specified position."
        }
      },
      "getBalanceRaw(address,address,uint256)": {
        "params": {
          "asset": "The address of the asset",
          "index": "The index of the user's position",
          "who": "The address of the user"
        }
      },
      "getConfiguration(address)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The configuration of the reserve"
        }
      },
      "getConfigurator()": {
        "returns": {
          "_0": "The address of the Pool Configurator"
        }
      },
      "getDebt(address,address,uint256)": {
        "params": {
          "asset": "The address of the asset.",
          "index": "The index of the user's position",
          "who": "The user to find the debt of"
        },
        "returns": {
          "debt": "The debt of the specified asset for the given user and position idnex."
        }
      },
      "getDebtByPosition(address,bytes32)": {
        "params": {
          "asset": "The address of the asset.",
          "positionId": "The ID of the position."
        },
        "returns": {
          "debt": "The debt of the specified asset in the specified position."
        }
      },
      "getHook()": {
        "details": "The hook is immutable. Once it is set, it cannot be changed.",
        "returns": {
          "_0": "The hook for the pool, if set."
        }
      },
      "getReserveAddressById(uint16)": {
        "params": {
          "id": "The id of the reserve as stored in the DataTypes.ReserveData struct"
        },
        "returns": {
          "_0": "The address of the reserve associated with id"
        }
      },
      "getReserveData(address)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The state and configuration data of the reserve"
        }
      },
      "getReserveFactor()": {
        "details": "This parameter is immutable.",
        "returns": {
          "reseveFactor": "The amount of revenue that gets shared to governance."
        }
      },
      "getReserveNormalizedIncome(address)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The reserve's normalized income"
        }
      },
      "getReserveNormalizedVariableDebt(address)": {
        "details": "WARNING: This function is intended to be used primarily by the protocol itself to get a \"dynamic\" variable index based on time, current stored index and virtual rate at the current moment (approx. a borrower would get if opening a position). This means that is always used in combination with variable debt supply/balances. If using this function externally, consider that is possible to have an increasing normalized variable debt that is not equivalent to how the variable debt index would be updated in storage (e.g. only updates with non-zero variable debt supply)",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The reserve normalized variable debt"
        }
      },
      "getReservesCount()": {
        "returns": {
          "_0": "The count"
        }
      },
      "getReservesList()": {
        "returns": {
          "_0": "The addresses of the underlying assets of the initialized reserves"
        }
      },
      "getTotalSupplyRaw(address)": {
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "The reserve supply information of the given asset"
        }
      },
      "getUserAccountData(address,uint256)": {
        "params": {
          "index": "The index of the user's position",
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The total collateral of the user in the base currency used by the price feed",
          "_1": "The total debt of the user in the base currency used by the price feed",
          "_2": "The borrowing power left of the user in the base currency used by the price feed",
          "_3": "The liquidation threshold of the user",
          "_4": "The loan to value of The user",
          "_5": "The current health factor of the user"
        }
      },
      "getUserConfiguration(address,uint256)": {
        "params": {
          "index": "The index of the user's position",
          "user": "The user address"
        },
        "returns": {
          "_0": "The configuration of the user"
        }
      },
      "initialize((address,address[],address[],address[],(bool,bool,uint256,uint256,uint256,uint256,uint256,uint256)[]))": {
        "details": "This function is invoked by the factory contract when the Pool is created"
      },
      "liquidate(address,address,bytes32,uint256,(bytes,bytes))": {
        "params": {
          "collateralAsset": "The address of the underlying asset used as collateral, to receive as result of the liquidation",
          "data": "Extra data that gets passed to the hook and to the interest rate strategy",
          "debtAsset": "The address of the underlying borrowed asset to be repaid with the liquidation",
          "debtToCover": "The debt amount of borrowed `asset` the liquidator wants to cover"
        }
      },
      "liquidateSimple(address,address,bytes32,uint256)": {
        "details": "See [liquidate(...)](#liquidate) for the full documentation. This call executes the same function with dummy data params"
      },
      "repay(address,uint256,uint256,(bytes,bytes))": {
        "params": {
          "amount": "The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`",
          "asset": "The address of the borrowed underlying asset previously borrowed",
          "data": "Extra data that gets passed to the hook and to the interest rate strategy",
          "index": "The index of the user's position"
        },
        "returns": {
          "_0": "The amount of shares repaid"
        }
      },
      "repaySimple(address,uint256,uint256)": {
        "details": "See [repay(...)](#repay) for the full documentation. This call executes the same function with dummy data params"
      },
      "revision()": {
        "returns": {
          "_0": "The version of this pool's implementation"
        }
      },
      "setReserveConfiguration(address,address,address,(uint256))": {
        "details": "Only callable by the PoolConfigurator contract",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "configuration": "The new configuration bitmap",
          "rateStrategyAddress": "The address of the rate strategy for the reserve",
          "source": "The address of the oracle for the reserve"
        }
      },
      "setUserUseReserveAsCollateral(address,uint256,bool)": {
        "params": {
          "asset": "The address of the underlying asset supplied",
          "index": "The index of the user's position",
          "useAsCollateral": "True if the user wants to use the supply as collateral, false otherwise"
        }
      },
      "supply(address,uint256,uint256,(bytes,bytes))": {
        "params": {
          "amount": "The amount to be supplied",
          "asset": "The address of the underlying asset to supply",
          "data": "Extra data that gets passed to the hook and to the interest rate strategy",
          "index": "The index of the user's position"
        },
        "returns": {
          "_0": "The amount of shares minted"
        }
      },
      "supplySimple(address,uint256,uint256)": {
        "details": "See [supply(...)](#supply) for the full documentation. This call executes the same function with dummy data params"
      },
      "withdraw(address,uint256,uint256,(bytes,bytes))": {
        "params": {
          "amount": "The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance",
          "asset": "The address of the underlying asset to withdraw",
          "data": "Extra data that gets passed to the hook and to the interest rate strategy",
          "index": "The index of the user's position"
        },
        "returns": {
          "_0": "The amount of shares burnt"
        }
      },
      "withdrawSimple(address,uint256,uint256)": {
        "details": "See [withdraw(...)](#withdraw) for the full documentation. This call executes the same function with dummy data params"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(address,uint256,uint256,(bytes,bytes))": {
        "notice": "Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower already supplied enough collateral, or he was given enough allowance by a credit delegator on the corresponding debt token (StableDebtToken or VariableDebtToken) - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet   and 100 stable/variable debt tokens, depending on the `interestRateMode`"
      },
      "factory()": {
        "notice": "The factory contract that created this contract"
      },
      "flashLoan(address,address,uint256,bytes,(bytes,bytes))": {
        "notice": "Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned."
      },
      "getAssetPrice(address)": {
        "notice": "Returns the asset price in the base currency"
      },
      "getBalance(address,address,uint256)": {
        "notice": "Get the balance of a specific asset for a user given a position index"
      },
      "getBalanceByPosition(address,bytes32)": {
        "notice": "Get the balance of a specific asset in a specific position."
      },
      "getBalanceRaw(address,address,uint256)": {
        "notice": "Gets the raw balance object for the asset for a given user and the position index."
      },
      "getBalanceRawByPositionId(address,bytes32)": {
        "notice": "Gets the raw balance object for the asset for a given position id"
      },
      "getConfiguration(address)": {
        "notice": "Returns the configuration of the reserve"
      },
      "getConfigurator()": {
        "notice": "Gets the Pool Configurator"
      },
      "getDebt(address,address,uint256)": {
        "notice": "Get the debt of a specific asset for a user given a position index"
      },
      "getDebtByPosition(address,bytes32)": {
        "notice": "Get the debt of a specific asset in a specific position."
      },
      "getHook()": {
        "notice": "Returns the current hook for the pool."
      },
      "getReserveAddressById(uint16)": {
        "notice": "Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct"
      },
      "getReserveData(address)": {
        "notice": "Returns the state and configuration of the reserve"
      },
      "getReserveFactor()": {
        "notice": "Gets the reserve factor that this pool charges. The reserve factory is the percentage of revenue that the pool shares with the governance."
      },
      "getReserveNormalizedIncome(address)": {
        "notice": "Returns the normalized income of the reserve"
      },
      "getReserveNormalizedVariableDebt(address)": {
        "notice": "Returns the normalized variable debt per unit of asset"
      },
      "getReservesCount()": {
        "notice": "Returns the number of initialized reserves"
      },
      "getReservesList()": {
        "notice": "Returns the list of the underlying assets of all the initialized reserves"
      },
      "getTotalSupplyRaw(address)": {
        "notice": "Gets the raw reserve supply object for a given asset."
      },
      "getUserAccountData(address,uint256)": {
        "notice": "Returns the user account data across all the reserves"
      },
      "getUserConfiguration(address,uint256)": {
        "notice": "Returns the configuration of the user across all the reserves"
      },
      "initialize((address,address[],address[],address[],(bool,bool,uint256,uint256,uint256,uint256,uint256,uint256)[]))": {
        "notice": "Initializes the Pool."
      },
      "liquidate(address,address,bytes32,uint256,(bytes,bytes))": {
        "notice": "Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk"
      },
      "repay(address,uint256,uint256,(bytes,bytes))": {
        "notice": "Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address"
      },
      "revision()": {
        "notice": "Returns the version of the pool implementation"
      },
      "setReserveConfiguration(address,address,address,(uint256))": {
        "notice": "Sets the configuration bitmap of the reserve as a whole"
      },
      "setUserUseReserveAsCollateral(address,uint256,bool)": {
        "notice": "Allows suppliers to enable/disable a specific supplied asset as collateral"
      },
      "supply(address,uint256,uint256,(bytes,bytes))": {
        "notice": "Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC"
      },
      "withdraw(address,uint256,uint256,(bytes,bytes))": {
        "notice": "Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 913,
        "contract": "contracts/core/pool/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 916,
        "contract": "contracts/core/pool/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 23190,
        "contract": "contracts/core/pool/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_enum(RentrancyKind)23178,t_uint256)"
      },
      {
        "astId": 23273,
        "contract": "contracts/core/pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 23956,
        "contract": "contracts/core/pool/Pool.sol:Pool",
        "label": "_reserves",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(ReserveData)24017_storage)"
      },
      {
        "astId": 23962,
        "contract": "contracts/core/pool/Pool.sol:Pool",
        "label": "_usersConfig",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_bytes32,t_struct(UserConfigurationMap)24024_storage)"
      },
      {
        "astId": 23970,
        "contract": "contracts/core/pool/Pool.sol:Pool",
        "label": "_balances",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(PositionBalance)24055_storage))"
      },
      {
        "astId": 23976,
        "contract": "contracts/core/pool/Pool.sol:Pool",
        "label": "_totalSupplies",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_struct(ReserveSupplies)24062_storage)"
      },
      {
        "astId": 23981,
        "contract": "contracts/core/pool/Pool.sol:Pool",
        "label": "_reservesList",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 23984,
        "contract": "contracts/core/pool/Pool.sol:Pool",
        "label": "_reservesCount",
        "offset": 0,
        "slot": "56",
        "type": "t_uint16"
      },
      {
        "astId": 23988,
        "contract": "contracts/core/pool/Pool.sol:Pool",
        "label": "_factory",
        "offset": 2,
        "slot": "56",
        "type": "t_contract(IPoolFactory)37010"
      },
      {
        "astId": 23992,
        "contract": "contracts/core/pool/Pool.sol:Pool",
        "label": "_hook",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(IHook)36334"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IHook)36334": {
        "encoding": "inplace",
        "label": "contract IHook",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolFactory)37010": {
        "encoding": "inplace",
        "label": "contract IPoolFactory",
        "numberOfBytes": "20"
      },
      "t_enum(RentrancyKind)23178": {
        "encoding": "inplace",
        "label": "enum PoolRentrancyGuard.RentrancyKind",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(PositionBalance)24055_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct DataTypes.PositionBalance))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(PositionBalance)24055_storage)"
      },
      "t_mapping(t_address,t_struct(ReserveData)24017_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)24017_storage"
      },
      "t_mapping(t_address,t_struct(ReserveSupplies)24062_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.ReserveSupplies)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveSupplies)24062_storage"
      },
      "t_mapping(t_bytes32,t_struct(PositionBalance)24055_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DataTypes.PositionBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(PositionBalance)24055_storage"
      },
      "t_mapping(t_bytes32,t_struct(UserConfigurationMap)24024_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DataTypes.UserConfigurationMap)",
        "numberOfBytes": "32",
        "value": "t_struct(UserConfigurationMap)24024_storage"
      },
      "t_mapping(t_enum(RentrancyKind)23178,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(RentrancyKind)23178",
        "label": "mapping(enum PoolRentrancyGuard.RentrancyKind => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(PositionBalance)24055_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.PositionBalance",
        "members": [
          {
            "astId": 24048,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "lastDebtLiquidtyIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 24050,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "lastSupplyLiquidtyIndex",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 24052,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "debtShares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24054,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "supplyShares",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ReserveConfigurationMap)24020_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveConfigurationMap",
        "members": [
          {
            "astId": 24019,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ReserveData)24017_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveData",
        "members": [
          {
            "astId": 23998,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "configuration",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ReserveConfigurationMap)24020_storage"
          },
          {
            "astId": 24000,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "liquidityIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 24002,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "liquidityRate",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 24004,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "borrowIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 24006,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "borrowRate",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 24008,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint40"
          },
          {
            "astId": 24010,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "id",
            "offset": 5,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 24012,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "interestRateStrategyAddress",
            "offset": 7,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 24014,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "oracle",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 24016,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "accruedToTreasuryShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ReserveSupplies)24062_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveSupplies",
        "members": [
          {
            "astId": 24057,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "debtShares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24059,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "supplyShares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24061,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "underlyingBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserConfigurationMap)24024_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.UserConfigurationMap",
        "members": [
          {
            "astId": 24023,
            "contract": "contracts/core/pool/Pool.sol:Pool",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}