{
  "address": "0x368eEBB67577Ec504F62FC41888b1578d2ef7B71",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "old",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ConfiguratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "old",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "updated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "FlashLoanPremiumToProtocolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "old",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ImplementationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "hook",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "rateStrategyAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "sources",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "borrowable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "frozen",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "borrowCap",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationBonus",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationThreshold",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ltv",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyCap",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.InitReserveConfig[]",
              "name": "configurations",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct DataTypes.InitPoolParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "old",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "updated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ReserveFactorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "old",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "configurator",
      "outputs": [
        {
          "internalType": "contract IPoolConfigurator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hook",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "rateStrategyAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "sources",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "borrowable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "frozen",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "borrowCap",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationBonus",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationThreshold",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ltv",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyCap",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.InitReserveConfig[]",
              "name": "configurations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DataTypes.InitPoolParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanPremiumToProtocol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationProtocolFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "name": "setConfigurator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "updated",
          "type": "uint256"
        }
      ],
      "name": "setFlashloanPremium",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "name": "setImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "updated",
          "type": "uint256"
        }
      ],
      "name": "setReserveFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb1c358203469425e31a6ffbd4a2581cf31eabe232beee6ae93d70b2fadb2b7f0",
  "receipt": {
    "to": null,
    "from": "0xd6593B44597D90110abf5F75386f071AB9Fac605",
    "contractAddress": "0x368eEBB67577Ec504F62FC41888b1578d2ef7B71",
    "transactionIndex": 10,
    "gasUsed": "1302171",
    "logsBloom": "0x
    "blockHash": "0x8f33b91c94a8e9c6cfea0f10b61b8cc1f84fd0b7f75d8fc84b1fb240623ea676",
    "transactionHash": "0xb1c358203469425e31a6ffbd4a2581cf31eabe232beee6ae93d70b2fadb2b7f0",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 6862599,
        "transactionHash": "0xb1c358203469425e31a6ffbd4a2581cf31eabe232beee6ae93d70b2fadb2b7f0",
        "address": "0x368eEBB67577Ec504F62FC41888b1578d2ef7B71",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d6593b44597d90110abf5f75386f071ab9fac605"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x8f33b91c94a8e9c6cfea0f10b61b8cc1f84fd0b7f75d8fc84b1fb240623ea676"
      }
    ],
    "blockNumber": 6862599,
    "cumulativeGasUsed": "2723063",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "95d84748b454ba387ab3866b78066cba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ConfiguratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FlashLoanPremiumToProtocolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rateStrategyAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"borrowable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.InitReserveConfig[]\",\"name\":\"configurations\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct DataTypes.InitPoolParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ReserveFactorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"configurator\",\"outputs\":[{\"internalType\":\"contract IPoolConfigurator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rateStrategyAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"borrowable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.InitReserveConfig[]\",\"name\":\"configurations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DataTypes.InitPoolParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanPremiumToProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationProtocolFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"setConfigurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"name\":\"setFlashloanPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ZeroLend\",\"details\":\"This is a beacon contract that holds the latest implementation of a pool. Pools once created need to also have some deposit added into it else it will be vulnerable to a liquidity index manipulation attack.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets the treasury as the `msg.sender`\",\"params\":{\"_implementation\":\"The latest implementation of the pool.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"implementation\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"title\":\"Pool Factory Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Inits the factory with an implementation of the pool.\"}},\"notice\":\"Creates new instances of a Pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/pool/PoolFactory.sol\":\"PoolFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/core/pool/PoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes, IBeacon, IPool, IPoolConfigurator, IPoolFactory} from '../../interfaces/IPoolFactory.sol';\\n\\nimport {RevokableBeaconProxy} from '../proxy/RevokableBeaconProxy.sol';\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @title Pool Factory Contract\\n * @author ZeroLend\\n * @notice Creates new instances of a Pool\\n * @dev This is a beacon contract that holds the latest implementation of a pool. Pools once created need to also\\n * have some deposit added into it else it will be vulnerable to a liquidity index manipulation attack.\\n */\\ncontract PoolFactory is IPoolFactory, Ownable {\\n  /// @inheritdoc IBeacon\\n  address public implementation;\\n\\n  /// @inheritdoc IPoolFactory\\n  address public treasury;\\n\\n  /// @inheritdoc IPoolFactory\\n  IPool[] public pools;\\n\\n  /// @inheritdoc IPoolFactory\\n  mapping(address => bool) public isPool;\\n\\n  /// @inheritdoc IPoolFactory\\n  IPoolConfigurator public configurator;\\n\\n  /// @inheritdoc IPoolFactory\\n  uint256 public reserveFactor;\\n\\n  /// @inheritdoc IPoolFactory\\n  uint256 public flashLoanPremiumToProtocol;\\n\\n  /// @inheritdoc IPoolFactory\\n  uint256 public liquidationProtocolFeePercentage;\\n\\n  /**\\n   * Inits the factory with an implementation of the pool.\\n   * @param _implementation The latest implementation of the pool.\\n   * @dev Sets the treasury as the `msg.sender`\\n   */\\n  constructor(address _implementation) {\\n    implementation = _implementation;\\n    treasury = msg.sender;\\n  }\\n\\n  /// @inheritdoc IPoolFactory\\n  function poolsLength() external view returns (uint256) {\\n    return pools.length;\\n  }\\n\\n  /// @inheritdoc IPoolFactory\\n  function createPool(DataTypes.InitPoolParams memory params) external returns (IPool pool) {\\n    // create the pool\\n    pool = IPool(address(new RevokableBeaconProxy(address(this), msg.sender)));\\n    emit PoolCreated(pool, pools.length, msg.sender, params);\\n\\n    // track the pool\\n    pools.push(pool);\\n    isPool[address(pool)] = true;\\n\\n    // init the pool and give roles to the user\\n    pool.initialize(params);\\n    configurator.initRoles(IPool(address(pool)), msg.sender);\\n  }\\n\\n  /// @inheritdoc IPoolFactory\\n  function setImplementation(address impl) external onlyOwner {\\n    address old = implementation;\\n    implementation = impl;\\n    emit ImplementationUpdated(old, impl, msg.sender);\\n  }\\n\\n  /// @inheritdoc IPoolFactory\\n  function setConfigurator(address impl) external onlyOwner {\\n    address old = address(configurator);\\n    configurator = IPoolConfigurator(impl);\\n    emit ConfiguratorUpdated(old, impl, msg.sender);\\n\\n    // give some of the master roles (pool = address(0x0)) to the msg.sender\\n    configurator.initRoles(IPool(address(0)), msg.sender);\\n  }\\n\\n  /// @inheritdoc IPoolFactory\\n  function setTreasury(address _treasury) external onlyOwner {\\n    address old = treasury;\\n    treasury = _treasury;\\n    emit TreasuryUpdated(old, _treasury, msg.sender);\\n  }\\n\\n  /// @inheritdoc IPoolFactory\\n  function setReserveFactor(uint256 updated) external onlyOwner {\\n    uint256 old = reserveFactor;\\n    reserveFactor = updated;\\n    emit ReserveFactorUpdated(old, updated, msg.sender);\\n  }\\n\\n  /// @inheritdoc IPoolFactory\\n  function setFlashloanPremium(uint256 updated) external onlyOwner {\\n    uint256 old = flashLoanPremiumToProtocol;\\n    flashLoanPremiumToProtocol = updated;\\n    emit FlashLoanPremiumToProtocolUpdated(old, updated, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0x48851fb000a14aa49501179c3f45e582a8a4577264ab1420f51e3f1cbe21b107\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/configuration/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    // stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    // the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    // the current supply rate. Expressed in ray\\n    uint128 liquidityRate;\\n    // borrow index. Expressed in ray\\n    uint128 borrowIndex;\\n    // the current borrow rate. Expressed in ray\\n    uint128 borrowRate;\\n    // timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    // the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    // address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    // address of the oracle\\n    address oracle;\\n    // the current treasury balance in shares\\n    uint256 accruedToTreasuryShares;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    // bit 0-15: LTV\\n    // bit 16-31: Liq. threshold\\n    // bit 32-47: Liq. bonus\\n    // bit 48-55: Decimals\\n    // bit 56: reserve is active\\n    // bit 57: reserve is frozen\\n    // bit 58: borrowing is enabled\\n    // bit 59: stable rate borrowing enabled\\n    // bit 60: asset is paused\\n    // bit 61: borrowing in isolation mode is enabled\\n    // bit 62: siloed borrowing enabled\\n    // bit 63: flashloaning enabled\\n    // bit 64-79: reserve factor\\n    // bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    // bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    // bit 152-167 liquidation protocol fee\\n    // bit 168-175 eMode category\\n    // bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    // bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    // bit 252-255 unused\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct ReserveCache {\\n    ReserveConfigurationMap reserveConfiguration;\\n    uint128 currBorrowIndex;\\n    uint128 currLiquidityIndex;\\n    uint128 nextBorrowIndex;\\n    uint128 nextLiquidityIndex;\\n    uint256 currBorrowRate;\\n    uint256 currDebtShares;\\n    uint256 currLiquidityRate;\\n    uint256 nextDebtShares;\\n    uint40 reserveLastUpdateTimestamp;\\n  }\\n\\n  struct PositionBalance {\\n    uint128 lastDebtLiquidtyIndex;\\n    uint128 lastSupplyLiquidtyIndex;\\n    uint256 debtShares;\\n    uint256 supplyShares;\\n  }\\n\\n  struct ReserveSupplies {\\n    uint256 debtShares;\\n    uint256 supplyShares;\\n    uint128 underlyingBalance;\\n  }\\n\\n  struct SharesType {\\n    uint256 shares;\\n    uint256 assets;\\n  }\\n\\n  struct ExtraData {\\n    bytes hookData;\\n    bytes interestRateData;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    address collateralAsset;\\n    address debtAsset;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 debtToCover;\\n    uint256 reserveFactor;\\n    uint256 reservesCount;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address pool;\\n    address user;\\n    address destination;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n    uint256 reservesCount;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    address pool;\\n    address user;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    address destination;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address asset;\\n    address receiverAddress;\\n    bytes params;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    address asset;\\n    address pool;\\n    address receiverAddress;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n    uint256 totalPremium;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    address pool;\\n    bytes32 position;\\n    // uint256 reservesCount;\\n    UserConfigurationMap userConfig;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    address asset;\\n    address pool;\\n    bytes32 position;\\n    ReserveCache cache;\\n    uint256 amount;\\n    uint256 reservesCount;\\n    UserConfigurationMap userConfig;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 healthFactor;\\n    uint256 totalDebt;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    address reserve;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 reserveFactor;\\n    uint256 totalDebt;\\n  }\\n\\n  struct InitReserveConfig {\\n    bool borrowable;\\n    bool frozen;\\n    uint256 borrowCap;\\n    uint256 decimals;\\n    uint256 liquidationBonus;\\n    uint256 liquidationThreshold;\\n    uint256 ltv;\\n    uint256 supplyCap;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address interestRateStrategyAddress;\\n    address oracle;\\n    InitReserveConfig configuration;\\n    uint16 reservesCount;\\n  }\\n\\n  struct InitPoolParams {\\n    address hook;\\n    address[] assets;\\n    address[] rateStrategyAddresses;\\n    address[] sources;\\n    DataTypes.InitReserveConfig[] configurations;\\n  }\\n\\n  struct SeedPoolParams {\\n    address pool;\\n    address[] assets;\\n    uint256[] amounts;\\n  }\\n}\\n\",\"keccak256\":\"0xcd3be10cf2b12f37eb1b4e86242dcfbb65a3297773f9da316d553fe1ce18abde\",\"license\":\"BUSL-1.1\"},\"contracts/core/proxy/RevokableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IRevokableBeaconProxy} from '../../interfaces/IRevokableBeaconProxy.sol';\\nimport {Proxy} from '@openzeppelin/contracts/proxy/Proxy.sol';\\nimport {IBeacon} from '@openzeppelin/contracts/proxy/beacon/IBeacon.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport {StorageSlot} from '@openzeppelin/contracts/utils/StorageSlot.sol';\\n\\n/**\\n * @notice A beacon proxy with the ability to have it's upgradability revoked\\n * @author ZeroLend\\n * @notice This is a beacon proxy contract that has the ability for the proxy admin to revoke\\n * the beacon's ability to upgrade the contract.\\n */\\ncontract RevokableBeaconProxy is IRevokableBeaconProxy, Proxy {\\n  /// @dev The keccak256 hash used for the implementation slot\\n  bytes32 internal immutable _IMPLEMENTATION_SLOT = keccak256('eip1967.proxy.impl');\\n\\n  /// @dev The keccak256 hash used for the beacon slot\\n  bytes32 internal immutable _BEACON_SLOT = keccak256('eip1967.proxy.beacon');\\n\\n  /// @dev The keccak256 hash used for the admin slot\\n  bytes32 internal immutable _ADMIN_SLOT = keccak256('eip1967.proxy.admin');\\n\\n  /**\\n   * @notice Constructor for the beacon proxy. Ideally called by a factory contract.\\n   * @param _beacon The address of the beacon contract.\\n   * @param _admin The admin to revoke the beacon contract\\n   */\\n  constructor(address _beacon, address _admin) {\\n    StorageSlot.getAddressSlot(_BEACON_SLOT).value = _beacon;\\n    StorageSlot.getAddressSlot(_ADMIN_SLOT).value = _admin;\\n\\n    emit AdminUpdated(_admin, address(0), msg.sender);\\n    emit BeaconUpdated(_beacon, address(0), msg.sender);\\n  }\\n\\n  /// @inheritdoc Proxy\\n  function _implementation() internal view virtual override returns (address) {\\n    address _beacon = _getBeacon();\\n    if (_beacon != address(0)) return IBeacon(_beacon).implementation();\\n\\n    // if beacon was revoked, the use the last implementation\\n    return _getFrozenImpl();\\n  }\\n\\n  /// @inheritdoc IRevokableBeaconProxy\\n  function setAdmin(address newAdmin) external {\\n    require(msg.sender == _getAdmin(), 'not proxy admin');\\n    address oldAdmin = StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n\\n    emit AdminUpdated(newAdmin, oldAdmin, msg.sender);\\n  }\\n\\n  /// @inheritdoc IRevokableBeaconProxy\\n  function revokeBeacon() external {\\n    require(msg.sender == _getAdmin(), 'not proxy admin');\\n    address impl = _implementation();\\n\\n    address oldAdmin = StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    address oldBeacon = StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n\\n    StorageSlot.getAddressSlot(_BEACON_SLOT).value = address(0);\\n    StorageSlot.getAddressSlot(_ADMIN_SLOT).value = address(0);\\n    StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = impl;\\n\\n    emit ImplementationRevoked(impl, msg.sender);\\n    emit BeaconUpdated(address(0), oldBeacon, msg.sender);\\n    emit AdminUpdated(address(0), oldAdmin, msg.sender);\\n  }\\n\\n  /// @inheritdoc IRevokableBeaconProxy\\n  function revokeAdmin() external {\\n    require(msg.sender == _getAdmin(), 'not proxy admin');\\n    address oldAdmin = StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    StorageSlot.getAddressSlot(_ADMIN_SLOT).value = address(0);\\n\\n    emit AdminUpdated(address(0), oldAdmin, msg.sender);\\n  }\\n\\n  /// @inheritdoc IRevokableBeaconProxy\\n  function implementation() external view returns (address) {\\n    return _implementation();\\n  }\\n\\n  /// @inheritdoc IRevokableBeaconProxy\\n  function admin() external view returns (address) {\\n    return _getAdmin();\\n  }\\n\\n  /// @inheritdoc IRevokableBeaconProxy\\n  function beacon() external view returns (address) {\\n    return _getBeacon();\\n  }\\n\\n  /// @inheritdoc IRevokableBeaconProxy\\n  function isBeaconRevoked() external view returns (bool revoked) {\\n    revoked = _getBeacon() == address(0);\\n  }\\n\\n  function _getBeacon() private view returns (address) {\\n    return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n  }\\n\\n  function _getAdmin() private view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  function _getFrozenImpl() private view returns (address) {\\n    return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n}\\n\",\"keccak256\":\"0x38c8c061f253d3404be5d047675bac5b529d1a268a7ab09ce02a6a7efac564b0\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IHook.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\n\\ninterface IHook {\\n  function afterInitialize(address pool) external returns (bytes4);\\n\\n  function beforeSupply(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterSupply(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeWithdraw(DataTypes.ExecuteWithdrawParams memory params) external;\\n\\n  function afterWithdraw(DataTypes.ExecuteWithdrawParams memory params) external;\\n\\n  function beforeRepay(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterRepay(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeBorrow(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterBorrow(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeLiquidate(\\n    address liquidator,\\n    bytes32 position,\\n    address collateralAsset,\\n    address debtAsset,\\n    uint256 debtToCover,\\n    address pool,\\n    bytes calldata hookData\\n  ) external;\\n\\n  function afterLiquidate(\\n    address liquidator,\\n    bytes32 position,\\n    address collateralAsset,\\n    address debtAsset,\\n    uint256 debtToCover,\\n    address pool,\\n    bytes calldata hookData\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0a4ac719eece30dd83aa078e706a8e6a54f3f6f16c1e76472e89d82b8f17b100\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\n\\nimport {IPoolManager} from './IPoolManager.sol';\\nimport {IPool} from './pool/IPool.sol';\\n\\n/**\\n * @title IPoolConfigurator\\n * @notice Defines the basic interface for a Pool configurator.\\n */\\ninterface IPoolConfigurator is IPoolManager {\\n  /**\\n   * @dev Emitted when borrowing is enabled or disabled on a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if borrowing is enabled, false otherwise\\n   */\\n  event ReserveBorrowing(address indexed asset, bool enabled);\\n\\n  /**\\n   * @dev Emitted when a reserve is frozen or unfrozen\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param frozen True if reserve is frozen, false otherwise\\n   */\\n  event ReserveFrozen(address indexed asset, bool frozen);\\n\\n  /**\\n   * @dev Emitted when a reserve factor is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldReserveFactor The old reserve factor, expressed in bps\\n   * @param newReserveFactor The new reserve factor, expressed in bps\\n   */\\n  event ReserveFactorChanged(address indexed asset, uint256 oldReserveFactor, uint256 newReserveFactor);\\n\\n  /**\\n   * @dev Emitted when the borrow cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldBorrowCap The old borrow cap\\n   * @param newBorrowCap The new borrow cap\\n   */\\n  event BorrowCapChanged(address indexed asset, uint256 oldBorrowCap, uint256 newBorrowCap);\\n\\n  /**\\n   * @dev Emitted when the supply cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldSupplyCap The old supply cap\\n   * @param newSupplyCap The new supply cap\\n   */\\n  event SupplyCapChanged(address indexed asset, uint256 oldSupplyCap, uint256 newSupplyCap);\\n\\n  /**\\n   * @dev Emitted when a reserve interest strategy contract is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldStrategy The address of the old interest strategy contract\\n   * @param newStrategy The address of the new interest strategy contract\\n   */\\n  event ReserveInterestRateStrategyChanged(address indexed asset, address oldStrategy, address newStrategy);\\n\\n  /**\\n   * @notice Configures borrowing on a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if borrowing needs to be enabled, false otherwise\\n   */\\n  function setReserveBorrowing(IPool pool, address asset, bool enabled) external;\\n\\n  /**\\n   * @notice Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow\\n   * or rate swap but allows repayments, liquidations, rate rebalances and withdrawals.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param freeze True if the reserve needs to be frozen, false otherwise\\n   */\\n  function setReserveFreeze(IPool pool, address asset, bool freeze) external;\\n\\n  function initRoles(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Sets the interest rate strategy of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newRateStrategyAddress The address of the new interest strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(IPool pool, address asset, address newRateStrategyAddress) external;\\n\\n  /**\\n   * @notice Freezes the pool reserves. In the frozen state only withdraw and repay can be done\\n   * @param freeze True if protocol needs to be frozen, false otherwise\\n   */\\n  function setPoolFreeze(IPool pool, bool freeze) external;\\n\\n  /**\\n   * @notice Updates the borrow cap of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newBorrowCap The new borrow cap of the reserve\\n   */\\n  function setBorrowCap(IPool pool, address asset, uint256 newBorrowCap) external;\\n\\n  /**\\n   * @notice Updates the supply cap of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newSupplyCap The new supply cap of the reserve\\n   */\\n  function setSupplyCap(IPool pool, address asset, uint256 newSupplyCap) external;\\n\\n  function getPoolAssetConfiguration(IPool pool, address asset) external view returns (DataTypes.InitReserveConfig memory config);\\n\\n  function getPoolFullConfig(IPool pool) external view returns (DataTypes.InitPoolParams memory config);\\n}\\n\",\"keccak256\":\"0x8e4349bdbcd95e96d8d7c480dd783140d9b6eabd6437784ffc4783f20533daf1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\n\\nimport {IPoolConfigurator} from './IPoolConfigurator.sol';\\nimport {IPool} from './pool/IPool.sol';\\nimport {IBeacon} from '@openzeppelin/contracts/proxy/beacon/IBeacon.sol';\\n\\ninterface IPoolFactory is IBeacon {\\n  event PoolCreated(IPool indexed pool, uint256 indexed index, address indexed creator, DataTypes.InitPoolParams params);\\n  event ImplementationUpdated(address indexed old, address indexed updated, address owner);\\n  event TreasuryUpdated(address indexed old, address indexed updated, address owner);\\n  event ReserveFactorUpdated(uint256 indexed old, uint256 indexed updated, address owner);\\n  event ConfiguratorUpdated(address indexed old, address indexed updated, address owner);\\n  event FlashLoanPremiumToProtocolUpdated(uint256 indexed old, uint256 indexed updated, address owner);\\n\\n  function configurator() external view returns (IPoolConfigurator);\\n\\n  function createPool(DataTypes.InitPoolParams memory params) external returns (IPool pool);\\n\\n  function setConfigurator(address impl) external;\\n\\n  function flashLoanPremiumToProtocol() external view returns (uint256);\\n\\n  function liquidationProtocolFeePercentage() external view returns (uint256);\\n\\n  function pools(uint256 index) external view returns (IPool);\\n\\n  function isPool(address pool) external view returns (bool);\\n\\n  function poolsLength() external view returns (uint256);\\n\\n  function reserveFactor() external view returns (uint256);\\n\\n  function setFlashloanPremium(uint256 updated) external;\\n\\n  function setImplementation(address updated) external;\\n\\n  function setReserveFactor(uint256 updated) external;\\n\\n  function setTreasury(address updated) external;\\n\\n  function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8cfd445d081cd96b0634e4efd787b8e13177728c4ad5b17e69b268cd21527aff\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IPool} from './pool/IPool.sol';\\nimport {IAccessControlEnumerable} from '@openzeppelin/contracts/access/IAccessControlEnumerable.sol';\\n\\n/**\\n * @title IPoolManager\\n * @notice Defines the basic interface for the ACL Manager\\n */\\ninterface IPoolManager is IAccessControlEnumerable {\\n  /**\\n   * @notice Returns the identifier of the PoolAdmin role\\n   * @return The id of the PoolAdmin role\\n   */\\n  function POOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the EmergencyAdmin role\\n   * @return The id of the EmergencyAdmin role\\n   */\\n  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the RiskAdmin role\\n   * @return The id of the RiskAdmin role\\n   */\\n  function RISK_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Adds a new admin as PoolAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addPoolAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as PoolAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removePoolAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is PoolAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is PoolAdmin, false otherwise\\n   */\\n  function isPoolAdmin(IPool pool, address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as EmergencyAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addEmergencyAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as EmergencyAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeEmergencyAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is EmergencyAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is EmergencyAdmin, false otherwise\\n   */\\n  function isEmergencyAdmin(IPool pool, address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as RiskAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addRiskAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as RiskAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeRiskAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is RiskAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is RiskAdmin, false otherwise\\n   */\\n  function isRiskAdmin(IPool pool, address admin) external view returns (bool);\\n\\n  function getRoleFromPool(IPool pool, bytes32 role) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6ab16c8e6e3a1ae1792bd03aaba0c457090609e5ef053ebc71d3a48dbee56314\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRevokableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {Proxy} from '@openzeppelin/contracts/proxy/Proxy.sol';\\nimport {IBeacon} from '@openzeppelin/contracts/proxy/beacon/IBeacon.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport {StorageSlot} from '@openzeppelin/contracts/utils/StorageSlot.sol';\\n\\ninterface IRevokableBeaconProxy {\\n  // todo add events for admin and implementation changes\\n  event ImplementationRevoked(address indexed implementation, address indexed admin);\\n  event BeaconUpdated(address indexed newBeacon, address indexed oldBeacon, address sender);\\n  event AdminUpdated(address indexed newAdmin, address indexed oldAdmin, address sender);\\n\\n  /**\\n   * @notice Transfer the ownership of the proxy to another address\\n   * @dev Can only be called by the proxy admin\\n   * @param newAdmin The new admin to transfer ownership to\\n   */\\n  function setAdmin(address newAdmin) external;\\n\\n  /**\\n   * @notice Revokes the beacon's ability to upgrade this contract and forver seals the implementation\\n   * into the code forever.\\n   * @dev Can only be called by the proxy admin\\n   */\\n  function revokeBeacon() external;\\n\\n  /**\\n   * @notice Revoke the beacon's admin\\n   * @dev Can only be called by the proxy admin\\n   */\\n  function revokeAdmin() external;\\n\\n  /**\\n   * @notice Returns the implementation of the current proxy\\n   * @return The proxy's current implementation\\n   */\\n  function implementation() external view returns (address);\\n\\n  function admin() external view returns (address);\\n\\n  function beacon() external view returns (address);\\n\\n  /**\\n   * @notice Checks if the beacon is revoked in which case the contract is as good as immutable.\\n   * @dev The revoked implementation address can be found in the `implementation()` call.\\n   * @return revoked True iff the beacon has been revoked.\\n   */\\n  function isBeaconRevoked() external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0x32de1ed4f0640ab7661f5dcb6f95805cf9d67bf5417b1c5fba708e3e0d9df070\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\nimport {IPoolGetters} from './IPoolGetters.sol';\\nimport {IPoolSetters} from './IPoolSetters.sol';\\n\\n/**\\n * @title IPool\\n * @notice Defines the basic interface for a ZeroLend Pool.\\n */\\ninterface IPool is IPoolGetters, IPoolSetters {\\n  /**\\n   * Returns the version of the pool implementation\\n   * @return version The version of this pool's implementation\\n   */\\n  function revision() external view returns (uint256 version);\\n\\n  /**\\n   * @notice Initializes the pool with the given parameters. This call sets all the assets and their configs (LTV/LT/Oracle etc..)\\n   * in one call. Since assets once created cannot be changed, this has to be done within the initialize call itself.\\n   * @dev This is function is called by the factory contract.\\n   * @param params The init parameters for the pool. See {DataTypes-InitPoolParams}\\n   */\\n  function initialize(DataTypes.InitPoolParams memory params) external;\\n}\\n\",\"keccak256\":\"0x80bf54cfabd6068ff5ba19e97c92ce2904b01686fec26c2ba2866b7b5915c0e7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPoolGetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\nimport {IHook} from '../IHook.sol';\\nimport {IPoolFactory} from '../IPoolFactory.sol';\\n\\ninterface IPoolGetters {\\n  /**\\n   * @notice Get the balance of a specific asset in a specific position.\\n   * @param asset The address of the asset.\\n   * @param positionId The ID of the position.\\n   * @return balance The balance of the specified asset in the specified position.\\n   */\\n  function getBalanceByPosition(address asset, bytes32 positionId) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Get the balance of a specific asset for a user given a position index\\n   * @param asset The address of the asset.\\n   * @param who The user to find the balance of\\n   * @param index The index of the user's position\\n   * @return balance The balance of the specified asset for the given user and position idnex.\\n   */\\n  function getBalance(address asset, address who, uint256 index) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Get the debt of a specific asset for a user given a position index\\n   * @param asset The address of the asset.\\n   * @param who The user to find the debt of\\n   * @param index The index of the user's position\\n   * @return debt The debt of the specified asset for the given user and position idnex.\\n   */\\n  function getDebt(address asset, address who, uint256 index) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Get the debt of a specific asset in a specific position.\\n   * @param asset The address of the asset.\\n   * @param positionId The ID of the position.\\n   * @return debt The debt of the specified asset in the specified position.\\n   */\\n  function getDebtByPosition(address asset, bytes32 positionId) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Gets the reserve factor that this pool charges. The reserve factory is the percentage of\\n   * revenue that the pool shares with the governance.\\n   * @dev This parameter is immutable.\\n   * @return reseveFactor The amount of revenue that gets shared to governance.\\n   */\\n  function getReserveFactor() external view returns (uint256 reseveFactor);\\n\\n  /**\\n   * @notice The factory contract that created this contract\\n   */\\n  function factory() external view returns (IPoolFactory f);\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @param index The index of the user's position\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user,\\n    uint256 index\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @param index The index of the user's position\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(address user, uint256 index) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the number of initialized reserves\\n   * @return The count\\n   */\\n  function getReservesCount() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the current hook for the pool.\\n   * @dev The hook is immutable. Once it is set, it cannot be changed.\\n   * @return The hook for the pool, if set.\\n   */\\n  function getHook() external view returns (IHook);\\n\\n  /**\\n   * @notice Gets the raw balance object for the asset for a given position id\\n   */\\n  function getBalanceRawByPositionId(address asset, bytes32 positionId) external view returns (DataTypes.PositionBalance memory);\\n\\n  /**\\n   * @notice Gets the raw balance object for the asset for a given user and the position index.\\n   * @param asset The address of the asset\\n   * @param who The address of the user\\n   * @param index The index of the user's position\\n   */\\n  function getBalanceRaw(address asset, address who, uint256 index) external view returns (DataTypes.PositionBalance memory);\\n\\n  /**\\n   * @notice Gets the raw reserve supply object for a given asset.\\n   * @param asset The address of the asset\\n   * @return data The reserve supply information of the given asset\\n   */\\n  function getTotalSupplyRaw(address asset) external view returns (DataTypes.ReserveSupplies memory data);\\n\\n  /**\\n   * @notice Gets the Pool Configurator\\n   * @return The address of the Pool Configurator\\n   */\\n  function getConfigurator() external view returns (address);\\n\\n  function totalAssets(address asset) external view returns (uint256 balance);\\n\\n  function totalDebt(address asset) external view returns (uint256 balance);\\n\\n  function supplyShares(address asset, bytes32 positionId) external view returns (uint256 shares);\\n\\n  function marketBalances(address asset)\\n    external\\n    view\\n    returns (uint256 totalSupplyAssets, uint256 totalSupplyShares, uint256 totalBorrowAssets, uint256 totalBorrowShares);\\n\\n  function supplyAssets(address asset, bytes32 positionId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc58b1c9b2920e038ad3229012b0ff8e587f2fedef0c4ae397351ea9a44a98065\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPoolSetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\n\\ninterface IPoolSetters {\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the rate strategy for the reserve\\n   * @param source The address of the oracle for the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setReserveConfiguration(\\n    address asset,\\n    address rateStrategyAddress,\\n    address source,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param to The address to supply for\\n   * @param amount The amount to be supplied\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return minted The amount of shares minted\\n   */\\n  function supply(\\n    address asset,\\n    address to,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory minted);\\n\\n  /**\\n   * @dev See [supply(...)](#supply) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function supplySimple(address asset, address to, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param to The address to send the tokens to\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return burnt The amount of shares burnt\\n   */\\n  function withdraw(\\n    address asset,\\n    address to,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory burnt);\\n\\n  /**\\n   * @dev See [withdraw(...)](#withdraw) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function withdrawSimple(address asset, address to, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory minted);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param to The address to send the tokens to\\n   * @param amount The amount to be borrowed\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return borrowed The amount of shares borrowed\\n   */\\n  function borrow(\\n    address asset,\\n    address to,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory borrowed);\\n\\n  /**\\n   * @dev See [borrow(...)](#borrow) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function borrowSimple(address asset, address to, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return repaid The amount of shares repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory repaid);\\n\\n  /**\\n   * @dev See [repay(...)](#repay) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function repaySimple(address asset, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param index The index of the user's position\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, uint256 index, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  function liquidate(\\n    address collateralAsset,\\n    address debtAsset,\\n    bytes32 position,\\n    uint256 debtToCover,\\n    DataTypes.ExtraData memory data\\n  ) external;\\n\\n  /**\\n   * @dev See [liquidate(...)](#liquidate) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function liquidateSimple(address collateralAsset, address debtAsset, bytes32 position, uint256 debtToCover) external;\\n\\n  /**\\n   * @dev See [flashLoan(...)](#flashLoan) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function flashLoanSimple(address receiverAddress, address asset, uint256 amount, bytes calldata params) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration.\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    DataTypes.ExtraData memory data\\n  ) external;\\n\\n  function forceUpdateReserves() external;\\n\\n  function forceUpdateReserve(address asset) external;\\n}\\n\",\"keccak256\":\"0x8038023248cbdd5689babdb610898c6fd3835545d6593f2ac75ba9015f2bf98c\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516116b63803806116b683398101604081905261002f916100b6565b61003833610066565b600180546001600160a01b039092166001600160a01b031992831617905560028054909116331790556100e6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100c857600080fd5b81516001600160a01b03811681146100df57600080fd5b9392505050565b6115c1806100f56000396000f3fe60806040523480156200001157600080fd5b50600436106200012d5760003560e01c806361d027b311620000af5780639f5f86ae116200007a5780639f5f86ae146200025b578063ac4afa381462000272578063d784d4261462000289578063f0f4426014620002a0578063f2fde38b14620002b757600080fd5b806361d027b31462000214578063715018a614620002285780638aac89aa14620002325780638da5cb5b146200024957600080fd5b80632716ae6611620000fc5780632716ae6614620001a25780632b507df814620001ab5780634322b71414620001bf5780635b16ebb714620001c95780635c60da1b146200020057600080fd5b8063075650ba146200013257806309e8a6df14620001665780631c446983146200017f578063211a94ea1462000198575b600080fd5b620001496200014336600462000a73565b620002ce565b6040516001600160a01b0390911681526020015b60405180910390f35b6200017060075481565b6040519081526020016200015d565b620001966200019036600462000b70565b6200048b565b005b6200017060085481565b60035462000170565b60055462000149906001600160a01b031681565b6200017060065481565b620001ef620001da36600462000b8a565b60046020526000908152604090205460ff1681565b60405190151581526020016200015d565b60015462000149906001600160a01b031681565b60025462000149906001600160a01b031681565b62000196620004d9565b620001966200024336600462000b70565b620004f1565b6000546001600160a01b031662000149565b620001966200026c36600462000b8a565b62000538565b620001496200028336600462000b70565b62000604565b620001966200029a36600462000b8a565b6200062f565b62000196620002b136600462000b8a565b6200068f565b62000196620002c836600462000b8a565b620006ef565b60003033604051620002e0906200081e565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801562000314573d6000803e3d6000fd5b5060035460405191925033916001600160a01b038416907f5a1d628f8dd4fd12dd7465ca13ae8956d7b91b78e291c64f0bcaceb6ac9ae1f4906200035a90879062000bf5565b60405180910390a46003805460018082019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b038416908117909155600081815260046020819052604091829020805460ff1916909417909355516310fdbb8f60e21b815290916343f6ee3c91620003eb9186910162000bf5565b600060405180830381600087803b1580156200040657600080fd5b505af11580156200041b573d6000803e3d6000fd5b505060055460405163e84d791f60e01b81526001600160a01b038581166004830152336024830152909116925063e84d791f9150604401600060405180830381600087803b1580156200046d57600080fd5b505af115801562000482573d6000803e3d6000fd5b50505050919050565b6200049562000772565b6006805490829055604051338152829082907ff06f772d539d838d36ff6aaa9d666491ad50c38493996f1d19acb07d6e492607906020015b60405180910390a35050565b620004e362000772565b620004ef6000620007ce565b565b620004fb62000772565b6007805490829055604051338152829082907f313b7326127247867bf91bd06c0adcf2a81d9401c7b29213a85a596e5673cbb390602001620004cd565b6200054262000772565b600580546001600160a01b038381166001600160a01b0319831681179093556040513381529116919082907ff89c18df20adf04a551f4399896aa5f6c66d8802f19edb2eb6dda0cc9b5c352b9060200160405180910390a360055460405163e84d791f60e01b8152600060048201523360248201526001600160a01b039091169063e84d791f90604401600060405180830381600087803b158015620005e757600080fd5b505af1158015620005fc573d6000803e3d6000fd5b505050505050565b600381815481106200061557600080fd5b6000918252602090912001546001600160a01b0316905081565b6200063962000772565b600180546001600160a01b038381166001600160a01b0319831681179093556040513381529116919082907f69ac7086f25179201a0cb39e4ffd8b5dd8224e2c7df939db65cb77311a0c030e90602001620004cd565b6200069962000772565b600280546001600160a01b038381166001600160a01b0319831681179093556040513381529116919082907f23c12d5579081c5f1077c04a6b1c114d0f3de239e81a436836d30ecb099ffa1390602001620004cd565b620006f962000772565b6001600160a01b038116620007645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200076f81620007ce565b50565b6000546001600160a01b03163314620004ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200075b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61088f8062000cfd83390190565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff811182821017156200086957620008696200082c565b60405290565b60405160a0810167ffffffffffffffff811182821017156200086957620008696200082c565b604051601f8201601f1916810167ffffffffffffffff81118282101715620008c157620008c16200082c565b604052919050565b80356001600160a01b0381168114620008e157600080fd5b919050565b600067ffffffffffffffff8211156200090357620009036200082c565b5060051b60200190565b600082601f8301126200091f57600080fd5b81356020620009386200093283620008e6565b62000895565b82815260059290921b840181019181810190868411156200095857600080fd5b8286015b848110156200097e576200097081620008c9565b83529183019183016200095c565b509695505050505050565b80358015158114620008e157600080fd5b600082601f830112620009ac57600080fd5b81356020620009bf6200093283620008e6565b82815260089290921b84018101918181019086841115620009df57600080fd5b8286015b848110156200097e576101008189031215620009ff5760008081fd5b62000a0962000842565b62000a148262000989565b815262000a2385830162000989565b8186015260408281013590820152606080830135908201526080808301359082015260a0808301359082015260c0808301359082015260e0808301359082015283529183019161010001620009e3565b60006020828403121562000a8657600080fd5b813567ffffffffffffffff8082111562000a9f57600080fd5b9083019060a0828603121562000ab457600080fd5b62000abe6200086f565b62000ac983620008c9565b815260208301358281111562000ade57600080fd5b62000aec878286016200090d565b60208301525060408301358281111562000b0557600080fd5b62000b13878286016200090d565b60408301525060608301358281111562000b2c57600080fd5b62000b3a878286016200090d565b60608301525060808301358281111562000b5357600080fd5b62000b61878286016200099a565b60808301525095945050505050565b60006020828403121562000b8357600080fd5b5035919050565b60006020828403121562000b9d57600080fd5b62000ba882620008c9565b9392505050565b600081518084526020808501945080840160005b8381101562000bea5781516001600160a01b03168752958201959082019060010162000bc3565b509495945050505050565b6000602080835260c060018060a01b03855116828501528185015160a06040818188015262000c278488018462000baf565b925080880151601f196060818a870301818b015262000c47868462000baf565b9550808b015192506080828b880301818c015262000c66878562000baf565b8c8201518c8203909401878d01528351808252938a019750600094508901925b8085101562000ceb5787518051151585528a81015115158b8601528681015187860152838101518486015282810151838601528781015188860152898101518a86015260e0908101519085015296890196600194909401936101009093019262000c86565b50919b9a505050505050505050505056fe60e06040527fe66c68ebcb04b4052987797348c2f105a854485da1807493a795dc2502ad5b006080527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5160a0527fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610460c05234801561007c57600080fd5b5060405161088f38038061088f83398101604081905261009b91610179565b816100ad60a05161015a60201b60201c565b80546001600160a01b039283166001600160a01b03199182161790915560c05180549284169290911682179055604080513381529051600092917f9f6130d220a6021d90d78c7ed17b7cfb79f530974405b174fef75f671205513c919081900360200190a36040513381526000906001600160a01b038416907fe38a6c4c1fedf846d056ef0d8bb604b0742a879afaa3af32b2ba737fe88b80ad9060200160405180910390a350506101ac565b90565b80516001600160a01b038116811461017457600080fd5b919050565b6000806040838503121561018c57600080fd5b6101958361015d565b91506101a36020840161015d565b90509250929050565b60805160a05160c0516106916101fe600039600081816101ab0152818161027f01528181610420015261055a0152600081816102a2015261058d0152600081816102db01526105b501526106916000f3fe6080604052600436106100745760003560e01c806359659e901161004e57806359659e90146100df5780635c60da1b1461010c578063704b6c0214610121578063f851a4401461014157610083565b80630d6aef041461008b5780633dae9a9f146100a05780634b3c80cb146100ca57610083565b3661008357610081610156565b005b610081610156565b34801561009757600080fd5b50610081610168565b3480156100ac57600080fd5b506100b5610221565b60405190151581526020015b60405180910390f35b3480156100d657600080fd5b5061008161023b565b3480156100eb57600080fd5b506100f46103cd565b6040516001600160a01b0390911681526020016100c1565b34801561011857600080fd5b506100f46103dc565b34801561012d57600080fd5b5061008161013c3660046105f1565b6103e6565b34801561014d57600080fd5b506100f461049c565b6101666101616104a6565b610532565b565b610170610556565b6001600160a01b0316336001600160a01b0316146101a95760405162461bcd60e51b81526004016101a090610615565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000080546001600160a01b031981169091556040805133815290516001600160a01b039092169182916000917f9f6130d220a6021d90d78c7ed17b7cfb79f530974405b174fef75f671205513c9181900360200190a350565b60008061022c610589565b6001600160a01b031614905090565b610243610556565b6001600160a01b0316336001600160a01b0316146102735760405162461bcd60e51b81526004016101a090610615565b600061027d6104a6565b7f000000000000000000000000000000000000000000000000000000000000000080547f000000000000000000000000000000000000000000000000000000000000000080546001600160a01b0319808216909255835482169093557f000000000000000000000000000000000000000000000000000000000000000080546001600160a01b03808716919093168117909155604051949550918116939216913391907f36bd5da0e202ac8d58bec67d15f3402457fc872056bff7f024c64eed8132e94090600090a36040513381526001600160a01b038216906000907fe38a6c4c1fedf846d056ef0d8bb604b0742a879afaa3af32b2ba737fe88b80ad9060200160405180910390a36040513381526001600160a01b038316906000907f9f6130d220a6021d90d78c7ed17b7cfb79f530974405b174fef75f671205513c9060200160405180910390a3505050565b60006103d7610589565b905090565b60006103d76104a6565b6103ee610556565b6001600160a01b0316336001600160a01b03161461041e5760405162461bcd60e51b81526004016101a090610615565b7f000000000000000000000000000000000000000000000000000000000000000080546001600160a01b038381166001600160a01b0319831681179093556040805133815290519190921692839290917f9f6130d220a6021d90d78c7ed17b7cfb79f530974405b174fef75f671205513c9181900360200190a35050565b60006103d7610556565b6000806104b1610589565b90506001600160a01b0381161561052a57806001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610500573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610524919061063e565b91505090565b6105246105b1565b3660008037600080366000845af43d6000803e808015610551573d6000f35b3d6000fd5b60007f00000000000000000000000000000000000000000000000000000000000000005b546001600160a01b0316919050565b60007f000000000000000000000000000000000000000000000000000000000000000061057a565b60007f000000000000000000000000000000000000000000000000000000000000000061057a565b6001600160a01b03811681146105ee57600080fd5b50565b60006020828403121561060357600080fd5b813561060e816105d9565b9392505050565b6020808252600f908201526e3737ba10383937bc3c9030b236b4b760891b604082015260600190565b60006020828403121561065057600080fd5b815161060e816105d956fea26469706673582212206657bec574a18ec32eb59c1a667ff12b637fe7e70ae9ddcba2f6d0b344fb253d64736f6c63430008130033a2646970667358221220a9d5f9d13a30196e3ee938aa15e5264a5d70b39664d1132756a48d8a031d3b5f64736f6c63430008130033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200012d5760003560e01c806361d027b311620000af5780639f5f86ae116200007a5780639f5f86ae146200025b578063ac4afa381462000272578063d784d4261462000289578063f0f4426014620002a0578063f2fde38b14620002b757600080fd5b806361d027b31462000214578063715018a614620002285780638aac89aa14620002325780638da5cb5b146200024957600080fd5b80632716ae6611620000fc5780632716ae6614620001a25780632b507df814620001ab5780634322b71414620001bf5780635b16ebb714620001c95780635c60da1b146200020057600080fd5b8063075650ba146200013257806309e8a6df14620001665780631c446983146200017f578063211a94ea1462000198575b600080fd5b620001496200014336600462000a73565b620002ce565b6040516001600160a01b0390911681526020015b60405180910390f35b6200017060075481565b6040519081526020016200015d565b620001966200019036600462000b70565b6200048b565b005b6200017060085481565b60035462000170565b60055462000149906001600160a01b031681565b6200017060065481565b620001ef620001da36600462000b8a565b60046020526000908152604090205460ff1681565b60405190151581526020016200015d565b60015462000149906001600160a01b031681565b60025462000149906001600160a01b031681565b62000196620004d9565b620001966200024336600462000b70565b620004f1565b6000546001600160a01b031662000149565b620001966200026c36600462000b8a565b62000538565b620001496200028336600462000b70565b62000604565b620001966200029a36600462000b8a565b6200062f565b62000196620002b136600462000b8a565b6200068f565b62000196620002c836600462000b8a565b620006ef565b60003033604051620002e0906200081e565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801562000314573d6000803e3d6000fd5b5060035460405191925033916001600160a01b038416907f5a1d628f8dd4fd12dd7465ca13ae8956d7b91b78e291c64f0bcaceb6ac9ae1f4906200035a90879062000bf5565b60405180910390a46003805460018082019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b038416908117909155600081815260046020819052604091829020805460ff1916909417909355516310fdbb8f60e21b815290916343f6ee3c91620003eb9186910162000bf5565b600060405180830381600087803b1580156200040657600080fd5b505af11580156200041b573d6000803e3d6000fd5b505060055460405163e84d791f60e01b81526001600160a01b038581166004830152336024830152909116925063e84d791f9150604401600060405180830381600087803b1580156200046d57600080fd5b505af115801562000482573d6000803e3d6000fd5b50505050919050565b6200049562000772565b6006805490829055604051338152829082907ff06f772d539d838d36ff6aaa9d666491ad50c38493996f1d19acb07d6e492607906020015b60405180910390a35050565b620004e362000772565b620004ef6000620007ce565b565b620004fb62000772565b6007805490829055604051338152829082907f313b7326127247867bf91bd06c0adcf2a81d9401c7b29213a85a596e5673cbb390602001620004cd565b6200054262000772565b600580546001600160a01b038381166001600160a01b0319831681179093556040513381529116919082907ff89c18df20adf04a551f4399896aa5f6c66d8802f19edb2eb6dda0cc9b5c352b9060200160405180910390a360055460405163e84d791f60e01b8152600060048201523360248201526001600160a01b039091169063e84d791f90604401600060405180830381600087803b158015620005e757600080fd5b505af1158015620005fc573d6000803e3d6000fd5b505050505050565b600381815481106200061557600080fd5b6000918252602090912001546001600160a01b0316905081565b6200063962000772565b600180546001600160a01b038381166001600160a01b0319831681179093556040513381529116919082907f69ac7086f25179201a0cb39e4ffd8b5dd8224e2c7df939db65cb77311a0c030e90602001620004cd565b6200069962000772565b600280546001600160a01b038381166001600160a01b0319831681179093556040513381529116919082907f23c12d5579081c5f1077c04a6b1c114d0f3de239e81a436836d30ecb099ffa1390602001620004cd565b620006f962000772565b6001600160a01b038116620007645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200076f81620007ce565b50565b6000546001600160a01b03163314620004ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200075b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61088f8062000cfd83390190565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff811182821017156200086957620008696200082c565b60405290565b60405160a0810167ffffffffffffffff811182821017156200086957620008696200082c565b604051601f8201601f1916810167ffffffffffffffff81118282101715620008c157620008c16200082c565b604052919050565b80356001600160a01b0381168114620008e157600080fd5b919050565b600067ffffffffffffffff8211156200090357620009036200082c565b5060051b60200190565b600082601f8301126200091f57600080fd5b81356020620009386200093283620008e6565b62000895565b82815260059290921b840181019181810190868411156200095857600080fd5b8286015b848110156200097e576200097081620008c9565b83529183019183016200095c565b509695505050505050565b80358015158114620008e157600080fd5b600082601f830112620009ac57600080fd5b81356020620009bf6200093283620008e6565b82815260089290921b84018101918181019086841115620009df57600080fd5b8286015b848110156200097e576101008189031215620009ff5760008081fd5b62000a0962000842565b62000a148262000989565b815262000a2385830162000989565b8186015260408281013590820152606080830135908201526080808301359082015260a0808301359082015260c0808301359082015260e0808301359082015283529183019161010001620009e3565b60006020828403121562000a8657600080fd5b813567ffffffffffffffff8082111562000a9f57600080fd5b9083019060a0828603121562000ab457600080fd5b62000abe6200086f565b62000ac983620008c9565b815260208301358281111562000ade57600080fd5b62000aec878286016200090d565b60208301525060408301358281111562000b0557600080fd5b62000b13878286016200090d565b60408301525060608301358281111562000b2c57600080fd5b62000b3a878286016200090d565b60608301525060808301358281111562000b5357600080fd5b62000b61878286016200099a565b60808301525095945050505050565b60006020828403121562000b8357600080fd5b5035919050565b60006020828403121562000b9d57600080fd5b62000ba882620008c9565b9392505050565b600081518084526020808501945080840160005b8381101562000bea5781516001600160a01b03168752958201959082019060010162000bc3565b509495945050505050565b6000602080835260c060018060a01b03855116828501528185015160a06040818188015262000c278488018462000baf565b925080880151601f196060818a870301818b015262000c47868462000baf565b9550808b015192506080828b880301818c015262000c66878562000baf565b8c8201518c8203909401878d01528351808252938a019750600094508901925b8085101562000ceb5787518051151585528a81015115158b8601528681015187860152838101518486015282810151838601528781015188860152898101518a86015260e0908101519085015296890196600194909401936101009093019262000c86565b50919b9a505050505050505050505056fe60e06040527fe66c68ebcb04b4052987797348c2f105a854485da1807493a795dc2502ad5b006080527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5160a0527fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610460c05234801561007c57600080fd5b5060405161088f38038061088f83398101604081905261009b91610179565b816100ad60a05161015a60201b60201c565b80546001600160a01b039283166001600160a01b03199182161790915560c05180549284169290911682179055604080513381529051600092917f9f6130d220a6021d90d78c7ed17b7cfb79f530974405b174fef75f671205513c919081900360200190a36040513381526000906001600160a01b038416907fe38a6c4c1fedf846d056ef0d8bb604b0742a879afaa3af32b2ba737fe88b80ad9060200160405180910390a350506101ac565b90565b80516001600160a01b038116811461017457600080fd5b919050565b6000806040838503121561018c57600080fd5b6101958361015d565b91506101a36020840161015d565b90509250929050565b60805160a05160c0516106916101fe600039600081816101ab0152818161027f01528181610420015261055a0152600081816102a2015261058d0152600081816102db01526105b501526106916000f3fe6080604052600436106100745760003560e01c806359659e901161004e57806359659e90146100df5780635c60da1b1461010c578063704b6c0214610121578063f851a4401461014157610083565b80630d6aef041461008b5780633dae9a9f146100a05780634b3c80cb146100ca57610083565b3661008357610081610156565b005b610081610156565b34801561009757600080fd5b50610081610168565b3480156100ac57600080fd5b506100b5610221565b60405190151581526020015b60405180910390f35b3480156100d657600080fd5b5061008161023b565b3480156100eb57600080fd5b506100f46103cd565b6040516001600160a01b0390911681526020016100c1565b34801561011857600080fd5b506100f46103dc565b34801561012d57600080fd5b5061008161013c3660046105f1565b6103e6565b34801561014d57600080fd5b506100f461049c565b6101666101616104a6565b610532565b565b610170610556565b6001600160a01b0316336001600160a01b0316146101a95760405162461bcd60e51b81526004016101a090610615565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000080546001600160a01b031981169091556040805133815290516001600160a01b039092169182916000917f9f6130d220a6021d90d78c7ed17b7cfb79f530974405b174fef75f671205513c9181900360200190a350565b60008061022c610589565b6001600160a01b031614905090565b610243610556565b6001600160a01b0316336001600160a01b0316146102735760405162461bcd60e51b81526004016101a090610615565b600061027d6104a6565b7f000000000000000000000000000000000000000000000000000000000000000080547f000000000000000000000000000000000000000000000000000000000000000080546001600160a01b0319808216909255835482169093557f000000000000000000000000000000000000000000000000000000000000000080546001600160a01b03808716919093168117909155604051949550918116939216913391907f36bd5da0e202ac8d58bec67d15f3402457fc872056bff7f024c64eed8132e94090600090a36040513381526001600160a01b038216906000907fe38a6c4c1fedf846d056ef0d8bb604b0742a879afaa3af32b2ba737fe88b80ad9060200160405180910390a36040513381526001600160a01b038316906000907f9f6130d220a6021d90d78c7ed17b7cfb79f530974405b174fef75f671205513c9060200160405180910390a3505050565b60006103d7610589565b905090565b60006103d76104a6565b6103ee610556565b6001600160a01b0316336001600160a01b03161461041e5760405162461bcd60e51b81526004016101a090610615565b7f000000000000000000000000000000000000000000000000000000000000000080546001600160a01b038381166001600160a01b0319831681179093556040805133815290519190921692839290917f9f6130d220a6021d90d78c7ed17b7cfb79f530974405b174fef75f671205513c9181900360200190a35050565b60006103d7610556565b6000806104b1610589565b90506001600160a01b0381161561052a57806001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610500573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610524919061063e565b91505090565b6105246105b1565b3660008037600080366000845af43d6000803e808015610551573d6000f35b3d6000fd5b60007f00000000000000000000000000000000000000000000000000000000000000005b546001600160a01b0316919050565b60007f000000000000000000000000000000000000000000000000000000000000000061057a565b60007f000000000000000000000000000000000000000000000000000000000000000061057a565b6001600160a01b03811681146105ee57600080fd5b50565b60006020828403121561060357600080fd5b813561060e816105d9565b9392505050565b6020808252600f908201526e3737ba10383937bc3c9030b236b4b760891b604082015260600190565b60006020828403121561065057600080fd5b815161060e816105d956fea26469706673582212206657bec574a18ec32eb59c1a667ff12b637fe7e70ae9ddcba2f6d0b344fb253d64736f6c63430008130033a2646970667358221220a9d5f9d13a30196e3ee938aa15e5264a5d70b39664d1132756a48d8a031d3b5f64736f6c63430008130033",
  "devdoc": {
    "author": "ZeroLend",
    "details": "This is a beacon contract that holds the latest implementation of a pool. Pools once created need to also have some deposit added into it else it will be vulnerable to a liquidity index manipulation attack.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Sets the treasury as the `msg.sender`",
        "params": {
          "_implementation": "The latest implementation of the pool."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "implementation": {
        "details": "Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."
      }
    },
    "title": "Pool Factory Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Inits the factory with an implementation of the pool."
      }
    },
    "notice": "Creates new instances of a Pool",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8147,
        "contract": "contracts/core/pool/PoolFactory.sol:PoolFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22302,
        "contract": "contracts/core/pool/PoolFactory.sol:PoolFactory",
        "label": "implementation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 22305,
        "contract": "contracts/core/pool/PoolFactory.sol:PoolFactory",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 22310,
        "contract": "contracts/core/pool/PoolFactory.sol:PoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_contract(IPool)40178)dyn_storage"
      },
      {
        "astId": 22315,
        "contract": "contracts/core/pool/PoolFactory.sol:PoolFactory",
        "label": "isPool",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22319,
        "contract": "contracts/core/pool/PoolFactory.sol:PoolFactory",
        "label": "configurator",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPoolConfigurator)38824"
      },
      {
        "astId": 22322,
        "contract": "contracts/core/pool/PoolFactory.sol:PoolFactory",
        "label": "reserveFactor",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 22325,
        "contract": "contracts/core/pool/PoolFactory.sol:PoolFactory",
        "label": "flashLoanPremiumToProtocol",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 22328,
        "contract": "contracts/core/pool/PoolFactory.sol:PoolFactory",
        "label": "liquidationProtocolFeePercentage",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IPool)40178)dyn_storage": {
        "base": "t_contract(IPool)40178",
        "encoding": "dynamic_array",
        "label": "contract IPool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPool)40178": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolConfigurator)38824": {
        "encoding": "inplace",
        "label": "contract IPoolConfigurator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}