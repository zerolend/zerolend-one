{
  "address": "0x0Ea15058bd042e0068d6fec5325e650EcB68A6b2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BalanceMisMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTokenIdOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PositionNotCleared",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValueNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "BorrowIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARDS_ALLOCATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDebt",
          "type": "bool"
        }
      ],
      "name": "assetHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_assetHash",
          "type": "bytes32"
        }
      ],
      "name": "balanceOfByAssetHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "boostedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "hookData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "interestRateData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct DataTypes.ExtraData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct INFTPositionManager.AssetOperationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "hookData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "interestRateData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct DataTypes.ExtraData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct INFTPositionManager.AssetOperationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "borrowETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_assetHash",
          "type": "bytes32"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_assetHash",
          "type": "bytes32"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_assetHash",
          "type": "bytes32"
        }
      ],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zero",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_assetHash",
          "type": "bytes32"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetHash",
          "type": "bytes32"
        }
      ],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBoostRequirement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDebt",
          "type": "bool"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetHash",
          "type": "bytes32"
        }
      ],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "internalType": "struct INFTPositionManager.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "hookData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "interestRateData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct DataTypes.ExtraData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct INFTPositionManager.AssetOperationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "hookData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "interestRateData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct DataTypes.ExtraData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct INFTPositionManager.AssetOperationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "repayETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_assetHash",
          "type": "bytes32"
        }
      ],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetHash",
          "type": "bytes32"
        }
      ],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetHash",
          "type": "bytes32"
        }
      ],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "assetHash",
          "type": "bytes32"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "hookData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "interestRateData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct DataTypes.ExtraData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct INFTPositionManager.AssetOperationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "hookData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "interestRateData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct DataTypes.ExtraData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct INFTPositionManager.AssetOperationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "supplyETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_assetHash",
          "type": "bytes32"
        }
      ],
      "name": "totalSupplyAssetForRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "assetHash",
          "type": "bytes32"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "hookData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "interestRateData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct DataTypes.ExtraData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct INFTPositionManager.AssetOperationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "hookData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "interestRateData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct DataTypes.ExtraData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct INFTPositionManager.AssetOperationParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x68b6e045e2e3a882dbb1aa21df42cb42a60f1c600169e48db7f5fc51d5ca99bf",
  "receipt": {
    "to": null,
    "from": "0xd6593B44597D90110abf5F75386f071AB9Fac605",
    "contractAddress": "0x0Ea15058bd042e0068d6fec5325e650EcB68A6b2",
    "transactionIndex": 15,
    "gasUsed": "4361132",
    "logsBloom": "0x
    "blockHash": "0x323b3c6086c2c94a4d4f9d638d82f46bbcaedc51f852de06baa838554c1ce9e2",
    "transactionHash": "0x68b6e045e2e3a882dbb1aa21df42cb42a60f1c600169e48db7f5fc51d5ca99bf",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 6862825,
        "transactionHash": "0x68b6e045e2e3a882dbb1aa21df42cb42a60f1c600169e48db7f5fc51d5ca99bf",
        "address": "0x0Ea15058bd042e0068d6fec5325e650EcB68A6b2",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 33,
        "blockHash": "0x323b3c6086c2c94a4d4f9d638d82f46bbcaedc51f852de06baa838554c1ce9e2"
      }
    ],
    "blockNumber": 6862825,
    "cumulativeGasUsed": "6600066",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "95d84748b454ba387ab3866b78066cba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BalanceMisMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenIdOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionNotCleared\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BorrowIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_ALLOCATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDebt\",\"type\":\"bool\"}],\"name\":\"assetHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_assetHash\",\"type\":\"bytes32\"}],\"name\":\"balanceOfByAssetHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"boostedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct INFTPositionManager.AssetOperationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct INFTPositionManager.AssetOperationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"borrowETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_assetHash\",\"type\":\"bytes32\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_assetHash\",\"type\":\"bytes32\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_assetHash\",\"type\":\"bytes32\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zero\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_assetHash\",\"type\":\"bytes32\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetHash\",\"type\":\"bytes32\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBoostRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDebt\",\"type\":\"bool\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetHash\",\"type\":\"bytes32\"}],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"internalType\":\"struct INFTPositionManager.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct INFTPositionManager.AssetOperationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct INFTPositionManager.AssetOperationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"repayETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_assetHash\",\"type\":\"bytes32\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetHash\",\"type\":\"bytes32\"}],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetHash\",\"type\":\"bytes32\"}],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"assetHash\",\"type\":\"bytes32\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct INFTPositionManager.AssetOperationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct INFTPositionManager.AssetOperationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"supplyETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_assetHash\",\"type\":\"bytes32\"}],\"name\":\"totalSupplyAssetForRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"assetHash\",\"type\":\"bytes32\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct INFTPositionManager.AssetOperationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interestRateData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.ExtraData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct INFTPositionManager.AssetOperationParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"ZeroLend\",\"details\":\"Manages the minting and burning of NFT positions, which represent liquidity positions in a pool.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BorrowIncreased(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of the asset that we want to borrow.\",\"asset\":\"The address of the asset that we want to borrow.\",\"tokenId\":\"The ID of the position token.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"LiquidityIncreased(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of the asset that was added to the position.\",\"asset\":\"The address of the asset for which liquidity was increased.\",\"tokenId\":\"The ID of the position token.\"}},\"Repay(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of asset that we want to repay\",\"asset\":\"The address of the asset that we want to repay.\",\"tokenId\":\"The ID of the NFT.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Withdrawal(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of asset that we want to withdraw\",\"asset\":\"The address of the asset that we want to withdraw\",\"tokenId\":\"The ID of the NFT.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"boostedBalance(address,uint256)\":{\"details\":\"Calculates the boosted balance for an account.\",\"params\":{\"account\":\"The address of the account for which to calculate the boosted balance.\",\"balance\":\"The amount to boost.\"},\"returns\":{\"_0\":\"The boosted balance of the account.\"}},\"borrow((address,address,uint256,uint256,(bytes,bytes)))\":{\"params\":{\"params\":\"The params required for borrow the position which includes tokenId, market and amount\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address)\":{\"params\":{\"pool\":\"The pool to mint a position ID for\"},\"returns\":{\"tokenId\":\"The ID of the newly minted token.\"}},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"repay((address,address,uint256,uint256,(bytes,bytes)))\":{\"params\":{\"params\":\"The params required for repaying the position which includes tokenId, asset and amount.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supply((address,address,uint256,uint256,(bytes,bytes)))\":{\"params\":{\"params\":\"The parameters required for increase liquidity the position, including the token, pool, amount and asset.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"withdraw((address,address,uint256,uint256,(bytes,bytes)))\":{\"params\":{\"params\":\"The parameters required for withdrawing from the position, including tokenId, asset, and amount.\"}}},\"title\":\"NFTPositionManager\",\"version\":1},\"userdoc\":{\"errors\":{\"BalanceMisMatch()\":[{\"notice\":\"Error indicating a mismatch in balance.\"}],\"NotPool()\":[{\"notice\":\"Error indicating that pool is not register in pool factory.\"}],\"NotTokenIdOwner()\":[{\"notice\":\"Error indicating that the caller is not the owner or approved operator of the token ID.\"}],\"PositionNotCleared()\":[{\"notice\":\"Error indicating that the position is not cleared.\"}],\"ZeroAddressNotAllowed()\":[{\"notice\":\"Error indicating that a zero address was provided, which is not allowed.\"}],\"ZeroValueNotAllowed()\":[{\"notice\":\"Error indicating that a zero value was provided, which is not allowed.\"}]},\"events\":{\"LiquidityIncreased(address,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is increased for a specific position token.\"}},\"kind\":\"user\",\"methods\":{\"borrow((address,address,uint256,uint256,(bytes,bytes)))\":{\"notice\":\"Allow user to borrow the underlying assets\"},\"factory()\":{\"notice\":\"The pool factory contract that is used to create pools.\"},\"initialize(address,address,address,address,address)\":{\"notice\":\"Initializes the NFTPositionManager contract.\"},\"mint(address)\":{\"notice\":\"Mints a new NFT representing a liquidity position.\"},\"repay((address,address,uint256,uint256,(bytes,bytes)))\":{\"notice\":\"Allow user to repay thier debt.\"},\"rewardsToken()\":{\"notice\":\"The ERC20 token used for rewards.\"},\"supply((address,address,uint256,uint256,(bytes,bytes)))\":{\"notice\":\"Allow User to increase liquidity in the postion\"},\"weth()\":{\"notice\":\"Address for the wrapped ether\"},\"withdraw((address,address,uint256,uint256,(bytes,bytes)))\":{\"notice\":\"Allow user to withdraw their underlying assets.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/positions/NFTPositionManager.sol\":\"NFTPositionManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7d24c901e098a04fa7f388c9ff1890bb522307272a2fee8030ee15a8d907096f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xd6e2dc520133229f192493fc0a53c0cfb0cbcee1e45bf0817c34e416486d9359\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xec028c77640f9fe3f2b954cbf999585abc938231a6ffeb469a1cc219b3d40dcc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.5) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract MulticallUpgradeable is Initializable, ContextUpgradeable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = AddressUpgradeable.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb1c0020052d12ce986fba21a25a75ef1aec0142007a23f345842c924ad9c71d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x1618ddebe73377660f6da71afcba35d5ac4c4600918b3a381d9c6f37eba613eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/core/pool/configuration/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    // stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    // the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    // the current supply rate. Expressed in ray\\n    uint128 liquidityRate;\\n    // borrow index. Expressed in ray\\n    uint128 borrowIndex;\\n    // the current borrow rate. Expressed in ray\\n    uint128 borrowRate;\\n    // timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    // the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    // address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    // address of the oracle\\n    address oracle;\\n    // the current treasury balance in shares\\n    uint256 accruedToTreasuryShares;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    // bit 0-15: LTV\\n    // bit 16-31: Liq. threshold\\n    // bit 32-47: Liq. bonus\\n    // bit 48-55: Decimals\\n    // bit 56: reserve is active\\n    // bit 57: reserve is frozen\\n    // bit 58: borrowing is enabled\\n    // bit 59: stable rate borrowing enabled\\n    // bit 60: asset is paused\\n    // bit 61: borrowing in isolation mode is enabled\\n    // bit 62: siloed borrowing enabled\\n    // bit 63: flashloaning enabled\\n    // bit 64-79: reserve factor\\n    // bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    // bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    // bit 152-167 liquidation protocol fee\\n    // bit 168-175 eMode category\\n    // bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    // bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    // bit 252-255 unused\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct ReserveCache {\\n    ReserveConfigurationMap reserveConfiguration;\\n    uint128 currBorrowIndex;\\n    uint128 currLiquidityIndex;\\n    uint128 nextBorrowIndex;\\n    uint128 nextLiquidityIndex;\\n    uint256 currBorrowRate;\\n    uint256 currDebtShares;\\n    uint256 currLiquidityRate;\\n    uint256 nextDebtShares;\\n    uint40 reserveLastUpdateTimestamp;\\n  }\\n\\n  struct PositionBalance {\\n    uint128 lastDebtLiquidtyIndex;\\n    uint128 lastSupplyLiquidtyIndex;\\n    uint256 debtShares;\\n    uint256 supplyShares;\\n  }\\n\\n  struct ReserveSupplies {\\n    uint256 debtShares;\\n    uint256 supplyShares;\\n    uint128 underlyingBalance;\\n  }\\n\\n  struct SharesType {\\n    uint256 shares;\\n    uint256 assets;\\n  }\\n\\n  struct ExtraData {\\n    bytes hookData;\\n    bytes interestRateData;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    address collateralAsset;\\n    address debtAsset;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 debtToCover;\\n    uint256 reserveFactor;\\n    uint256 reservesCount;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address pool;\\n    address user;\\n    address destination;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n    uint256 reservesCount;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    address pool;\\n    address user;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    address destination;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address asset;\\n    address receiverAddress;\\n    bytes params;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    address asset;\\n    address pool;\\n    address receiverAddress;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n    uint256 totalPremium;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    address pool;\\n    bytes32 position;\\n    // uint256 reservesCount;\\n    UserConfigurationMap userConfig;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    address asset;\\n    address pool;\\n    bytes32 position;\\n    ReserveCache cache;\\n    uint256 amount;\\n    uint256 reservesCount;\\n    UserConfigurationMap userConfig;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 healthFactor;\\n    uint256 totalDebt;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    address reserve;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 reserveFactor;\\n    uint256 totalDebt;\\n  }\\n\\n  struct InitReserveConfig {\\n    bool borrowable;\\n    bool frozen;\\n    uint256 borrowCap;\\n    uint256 decimals;\\n    uint256 liquidationBonus;\\n    uint256 liquidationThreshold;\\n    uint256 ltv;\\n    uint256 supplyCap;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address interestRateStrategyAddress;\\n    address oracle;\\n    InitReserveConfig configuration;\\n    uint16 reservesCount;\\n  }\\n\\n  struct InitPoolParams {\\n    address hook;\\n    address[] assets;\\n    address[] rateStrategyAddresses;\\n    address[] sources;\\n    DataTypes.InitReserveConfig[] configurations;\\n  }\\n\\n  struct SeedPoolParams {\\n    address pool;\\n    address[] assets;\\n    uint256[] amounts;\\n  }\\n}\\n\",\"keccak256\":\"0xcd3be10cf2b12f37eb1b4e86242dcfbb65a3297773f9da316d553fe1ce18abde\",\"license\":\"BUSL-1.1\"},\"contracts/core/positions/NFTPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {INFTPositionManager} from '../../interfaces/INFTPositionManager.sol';\\nimport {IPoolFactory} from '../../interfaces/IPoolFactory.sol';\\n\\nimport {IWETH} from '../../interfaces/IWETH.sol';\\nimport {NFTPositionManagerSetters} from './NFTPositionManagerSetters.sol';\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport {SafeERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\n/**\\n * @title NFTPositionManager\\n * @author ZeroLend\\n * @dev Manages the minting and burning of NFT positions, which represent liquidity positions in a pool.\\n */\\ncontract NFTPositionManager is NFTPositionManagerSetters {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /// @inheritdoc INFTPositionManager\\n  function initialize(address _factory, address _staking, address _owner, address _zero, address _weth) external initializer {\\n    __ERC721Enumerable_init();\\n    __ERC721_init('ZeroLend One Position', 'ZL-POS-ONE');\\n    __AccessControlEnumerable_init();\\n    __NFTRewardsDistributor_init(50_000_000, _staking, 14 days, _zero);\\n\\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\\n\\n    factory = IPoolFactory(_factory);\\n    weth = IWETH(_weth);\\n    _nextId = 1;\\n  }\\n\\n  receive() external payable {\\n    // nothing\\n  }\\n\\n  /// @inheritdoc INFTPositionManager\\n  function mint(address pool) external returns (uint256 tokenId) {\\n    require(factory.isPool(pool), 'not a pool');\\n    tokenId = _nextId;\\n    _nextId++;\\n    _positions[tokenId].pool = pool;\\n    _positions[tokenId].operator = address(0);\\n    _mint(msg.sender, tokenId);\\n  }\\n\\n  /// @inheritdoc INFTPositionManager\\n  function supply(AssetOperationParams memory params) external {\\n    IERC20Upgradeable(params.asset).safeTransferFrom(msg.sender, address(this), params.amount);\\n    _supply(params);\\n  }\\n\\n  /// @inheritdoc INFTPositionManager\\n  function supplyETH(AssetOperationParams memory params) external payable {\\n    weth.deposit{value: params.amount}();\\n    require(params.asset == address(weth), 'not weth');\\n    _supply(params);\\n  }\\n\\n  /// @inheritdoc INFTPositionManager\\n  function borrow(AssetOperationParams memory params) external {\\n    _borrow(params);\\n  }\\n\\n  /// @inheritdoc INFTPositionManager\\n  function borrowETH(AssetOperationParams memory params) external payable {\\n    address dest = params.target;\\n    params.target = address(this);\\n\\n    _borrow(params);\\n    weth.withdraw(params.amount);\\n    payable(dest).transfer(params.amount);\\n  }\\n\\n  /// @inheritdoc INFTPositionManager\\n  function withdraw(AssetOperationParams memory params) external {\\n    _withdraw(params);\\n  }\\n\\n  /// @inheritdoc INFTPositionManager\\n  function withdrawETH(AssetOperationParams memory params) external payable {\\n    address dest = params.target;\\n    params.target = address(this);\\n\\n    _withdraw(params);\\n    weth.withdraw(params.amount);\\n    payable(dest).transfer(params.amount);\\n  }\\n\\n  /// @inheritdoc INFTPositionManager\\n  function repay(AssetOperationParams memory params) external {\\n    IERC20Upgradeable(params.asset).safeTransferFrom(msg.sender, address(this), params.amount);\\n    _repay(params);\\n  }\\n\\n  /// @inheritdoc INFTPositionManager\\n  function repayETH(AssetOperationParams memory params) external payable {\\n    weth.deposit{value: params.amount}();\\n    require(params.asset == address(weth), 'not weth');\\n    _repay(params);\\n  }\\n\\n  /// @inheritdoc INFTPositionManager\\n  function sweep(address token) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (token == address(0)) {\\n      uint256 bal = address(this).balance;\\n      payable(msg.sender).transfer(bal);\\n    } else {\\n      IERC20Upgradeable erc20 = IERC20Upgradeable(token);\\n      erc20.transfer(msg.sender, erc20.balanceOf(address(this)));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x89480662647754725d5ac8bd0245b74993530b5f111fa08035f77a720dc692c5\",\"license\":\"BUSL-1.1\"},\"contracts/core/positions/NFTPositionManagerGetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {INFTPositionManager} from '../../interfaces/INFTPositionManager.sol';\\nimport {NFTPositionManagerStorage} from './NFTPositionManagerStorage.sol';\\nimport {MulticallUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol';\\n\\nabstract contract NFTPositionManagerGetters is MulticallUpgradeable, NFTPositionManagerStorage {\\n  /// @inheritdoc INFTPositionManager\\n  function positions(uint256 tokenId) external view returns (Position memory) {\\n    return _positions[tokenId];\\n  }\\n}\\n\",\"keccak256\":\"0x4998a0f1a06d485bef3c9479b3c0f423820709df82ef62d700d77dd21a7273e8\",\"license\":\"BUSL-1.1\"},\"contracts/core/positions/NFTPositionManagerSetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes, IPool} from '../../interfaces/IPoolFactory.sol';\\nimport {NFTRewardsDistributor} from './NFTRewardsDistributor.sol';\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport {SafeERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport {ERC721Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\\n\\nabstract contract NFTPositionManagerSetters is NFTRewardsDistributor {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  /**\\n   * @dev Modifier to check if the caller is pool or not.\\n   * @param pool Address of the pool.\\n   */\\n  modifier isPool(address pool) {\\n    if (!factory.isPool(pool)) {\\n      revert NotPool();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Handles the liquidity operations including transferring tokens, approving the pool, and updating balances.\\n   * @param params The liquidity parameters including asset, pool, user, amount, and tokenId.\\n   * @custom:event LiquidityIncreased emitted whenever user supply asset\\n   */\\n  function _supply(AssetOperationParams memory params) internal nonReentrant {\\n    if (params.asset == address(0)) revert ZeroAddressNotAllowed();\\n    if (params.amount == 0) revert ZeroValueNotAllowed();\\n    if (params.tokenId == 0) params.tokenId = _nextId - 1;\\n    IPool pool = IPool(_positions[params.tokenId].pool);\\n\\n    // check permissions\\n    _isAuthorizedForToken(params.tokenId);\\n\\n    IERC20Upgradeable(params.asset).forceApprove(address(pool), params.amount);\\n    pool.supply(params.asset, address(this), params.amount, params.tokenId, params.data);\\n    emit LiquidityIncreased(params.asset, params.tokenId, params.amount);\\n\\n    // update incentives\\n    uint256 balance = pool.getBalance(params.asset, address(this), params.tokenId);\\n    _handleSupplies(address(pool), params.asset, params.tokenId, balance);\\n  }\\n\\n  function _borrow(AssetOperationParams memory params) internal nonReentrant {\\n    if (params.asset == address(0)) revert ZeroAddressNotAllowed();\\n    if (params.amount == 0) revert ZeroValueNotAllowed();\\n    if (params.tokenId == 0) params.tokenId = _nextId - 1;\\n\\n    // check permissions\\n    _isAuthorizedForToken(params.tokenId);\\n\\n    IPool pool = IPool(_positions[params.tokenId].pool);\\n    pool.borrow(params.asset, params.target, params.amount, params.tokenId, params.data);\\n\\n    emit BorrowIncreased(params.asset, params.amount, params.tokenId);\\n\\n    // update incentives\\n    uint256 balance = pool.getDebt(params.asset, address(this), params.tokenId);\\n    _handleDebt(address(pool), params.asset, params.tokenId, balance);\\n  }\\n\\n  function _withdraw(AssetOperationParams memory params) internal nonReentrant {\\n    if (params.asset == address(0)) revert ZeroAddressNotAllowed();\\n    if (params.amount == 0) revert ZeroValueNotAllowed();\\n    if (params.tokenId == 0) params.tokenId = _nextId - 1;\\n\\n    // check permissions\\n    _isAuthorizedForToken(params.tokenId);\\n\\n    IPool pool = IPool(_positions[params.tokenId].pool);\\n\\n    pool.withdraw(params.asset, params.target, params.amount, params.tokenId, params.data);\\n    emit Withdrawal(params.asset, params.amount, params.tokenId);\\n\\n    // update incentives\\n    uint256 balance = pool.getBalance(params.asset, address(this), params.tokenId);\\n    _handleSupplies(address(pool), params.asset, params.tokenId, balance);\\n  }\\n\\n  function _repay(AssetOperationParams memory params) internal nonReentrant {\\n    if (params.asset == address(0)) revert ZeroAddressNotAllowed();\\n    if (params.amount == 0) revert ZeroValueNotAllowed();\\n    if (params.tokenId == 0) params.tokenId = _nextId - 1;\\n\\n    Position memory userPosition = _positions[params.tokenId];\\n\\n    IPool pool = IPool(userPosition.pool);\\n    IERC20Upgradeable asset = IERC20Upgradeable(params.asset);\\n\\n    asset.forceApprove(userPosition.pool, params.amount);\\n\\n    uint256 previousDebtBalance = pool.getDebt(params.asset, address(this), params.tokenId);\\n    DataTypes.SharesType memory repaid = pool.repay(params.asset, params.amount, params.tokenId, params.data);\\n    uint256 currentDebtBalance = pool.getDebt(params.asset, address(this), params.tokenId);\\n\\n    if (previousDebtBalance - currentDebtBalance != repaid.assets) {\\n      revert BalanceMisMatch();\\n    }\\n\\n    if (currentDebtBalance == 0 && repaid.assets < params.amount) {\\n      asset.safeTransfer(msg.sender, params.amount - repaid.assets);\\n    }\\n\\n    // update incentives\\n    _handleDebt(address(pool), params.asset, params.tokenId, currentDebtBalance);\\n\\n    emit Repay(params.asset, params.amount, params.tokenId);\\n  }\\n\\n  /// @dev Overrides _approve to use the operator in the position, which is packed with the position permit nonce\\n  function _approve(address to, uint256 tokenId) internal override (ERC721Upgradeable) {\\n    _positions[tokenId].operator = to;\\n    emit Approval(ownerOf(tokenId), to, tokenId);\\n  }\\n\\n  function _isAuthorizedForToken(uint256 tokenId) internal view {\\n    if (!_isApprovedOrOwner(msg.sender, tokenId)) revert NotTokenIdOwner();\\n  }\\n}\\n\",\"keccak256\":\"0xc76d3a11faab73e18e528601f40bc22d9a1e076d8c43a6b3c1a03e06e89deb5a\",\"license\":\"BUSL-1.1\"},\"contracts/core/positions/NFTPositionManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {INFTPositionManager} from '../../interfaces/INFTPositionManager.sol';\\nimport {IPoolFactory} from '../../interfaces/IPoolFactory.sol';\\nimport {IWETH} from '../../interfaces/IWETH.sol';\\nimport {IVotes} from '@openzeppelin/contracts/governance/utils/IVotes.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nabstract contract NFTPositionManagerStorage is INFTPositionManager {\\n  /// @dev the keccak256 hash of the allocator role.\\n  bytes32 public immutable REWARDS_ALLOCATOR_ROLE = keccak256('REWARDS_ALLOCATOR_ROLE');\\n\\n  /// @notice The pool factory contract that is used to create pools.\\n  IPoolFactory public factory;\\n\\n  /// @notice The ID of the next token that will be minted. Starts from 1 to avoid using 0 as a token ID.\\n  uint256 internal _nextId;\\n\\n  /// @notice Mapping from token ID to the Position struct representing the details of the liquidity position.\\n  mapping(uint256 tokenId => Position position) internal _positions;\\n\\n  /// @notice Address for the wrapped ether\\n  IWETH public weth;\\n\\n  /* Reward Variables */\\n\\n  /// @notice The ERC20 token used for rewards.\\n  IERC20 public rewardsToken;\\n\\n  /// @notice The contract that holds the votes.\\n  IVotes internal stakingToken;\\n\\n  /// @notice The list of assets for a pool that is eligible for rewards\\n  mapping(address pool => address[] assets) internal _poolAssetList;\\n\\n  mapping(bytes32 assetHash => uint256) internal _totalSupply;\\n  mapping(bytes32 assetHash => uint256) public lastUpdateTime;\\n  mapping(bytes32 assetHash => uint256) public periodFinish;\\n  mapping(bytes32 assetHash => uint256) public rewardPerTokenStored;\\n  mapping(bytes32 assetHash => uint256) public rewardRate;\\n  mapping(uint256 tokenId => mapping(bytes32 assetHash => uint256)) internal _balances;\\n  mapping(uint256 tokenId => mapping(bytes32 assetHash => uint256)) public userRewardPerTokenPaid;\\n  mapping(uint256 tokenId => mapping(bytes32 assetHash => uint256)) public rewards;\\n\\n  uint256 public maxBoostRequirement;\\n  uint256 public rewardsDuration;\\n}\\n\",\"keccak256\":\"0xd2bd7976e766cc251c26aabdc3d6e2ae09a9341145fd19e79bdd65dd45408a99\",\"license\":\"BUSL-1.1\"},\"contracts/core/positions/NFTRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.12;\\n\\nimport {NFTPositionManagerGetters} from './NFTPositionManagerGetters.sol';\\n\\nimport {AccessControlEnumerableUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol';\\n\\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport {\\n  ERC721EnumerableUpgradeable,\\n  IERC165Upgradeable\\n} from '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\\nimport {IVotes} from '@openzeppelin/contracts/governance/utils/IVotes.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {SafeMath} from '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\n/**\\n * @title NFTRewardsDistributor\\n * @notice Accounting contract to manage multiple staking distributions with multiple rewards\\n * @author ZeroLend\\n */\\nabstract contract NFTRewardsDistributor is\\n  ReentrancyGuardUpgradeable,\\n  ERC721EnumerableUpgradeable,\\n  AccessControlEnumerableUpgradeable,\\n  NFTPositionManagerGetters\\n{\\n  using SafeMath for uint256;\\n\\n  function __NFTRewardsDistributor_init(\\n    uint256 maxBoostRequirement_,\\n    address staking_,\\n    uint256 rewardsDuration_,\\n    address rewardsToken_\\n  ) internal onlyInitializing {\\n    maxBoostRequirement = maxBoostRequirement_;\\n    stakingToken = IVotes(staking_);\\n    rewardsToken = IERC20(rewardsToken_);\\n    rewardsDuration = rewardsDuration_;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override (ERC721EnumerableUpgradeable, IERC165Upgradeable, AccessControlEnumerableUpgradeable)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  function totalSupplyAssetForRewards(bytes32 _assetHash) external view returns (uint256) {\\n    return _totalSupply[_assetHash];\\n  }\\n\\n  function balanceOfByAssetHash(uint256 tokenId, bytes32 _assetHash) external view returns (uint256) {\\n    return _balances[tokenId][_assetHash];\\n  }\\n\\n  function lastTimeRewardApplicable(bytes32 _assetHash) public view returns (uint256) {\\n    return block.timestamp < periodFinish[_assetHash] ? block.timestamp : periodFinish[_assetHash];\\n  }\\n\\n  function rewardPerToken(bytes32 _assetHash) public view returns (uint256) {\\n    if (_totalSupply[_assetHash] == 0) {\\n      return rewardPerTokenStored[_assetHash];\\n    }\\n    return rewardPerTokenStored[_assetHash].add(\\n      lastTimeRewardApplicable(_assetHash).sub(lastUpdateTime[_assetHash]).mul(rewardRate[_assetHash]).mul(1e18).div(\\n        _totalSupply[_assetHash]\\n      )\\n    );\\n  }\\n\\n  function getReward(uint256 tokenId, bytes32 _assetHash) public nonReentrant {\\n    _updateReward(tokenId, _assetHash);\\n    uint256 reward = rewards[tokenId][_assetHash];\\n    if (reward > 0) {\\n      rewards[tokenId][_assetHash] = 0;\\n      rewardsToken.transfer(ownerOf(tokenId), reward);\\n      emit RewardPaid(tokenId, ownerOf(tokenId), reward);\\n    }\\n  }\\n\\n  function earned(uint256 tokenId, bytes32 _assetHash) public view returns (uint256) {\\n    return _balances[tokenId][_assetHash].mul(rewardPerToken(_assetHash).sub(userRewardPerTokenPaid[tokenId][_assetHash])).div(1e18).add(\\n      rewards[tokenId][_assetHash]\\n    );\\n  }\\n\\n  function getRewardForDuration(bytes32 _assetHash) external view returns (uint256) {\\n    return rewardRate[_assetHash].mul(rewardsDuration);\\n  }\\n\\n  /**\\n   * @dev Calculates the boosted balance for an account.\\n   * @param account The address of the account for which to calculate the boosted balance.\\n   * @param balance The amount to boost.\\n   * @return The boosted balance of the account.\\n   */\\n  function boostedBalance(address account, uint256 balance) public view returns (uint256) {\\n    uint256 _boosted = (balance * 20) / 100;\\n    uint256 _stake = stakingToken.getVotes(account);\\n\\n    uint256 _adjusted = ((balance * _stake * 80) / maxBoostRequirement) / 100;\\n\\n    // because of this we are able to max out the boost by 5x\\n    uint256 _boostedBalance = _boosted + _adjusted;\\n    return _boostedBalance > balance ? balance : _boostedBalance;\\n  }\\n\\n  function notifyRewardAmount(uint256 reward, address pool, address asset, bool isDebt) external onlyRole(REWARDS_ALLOCATOR_ROLE) {\\n    rewardsToken.transferFrom(msg.sender, address(this), reward);\\n\\n    bytes32 _assetHash = assetHash(pool, asset, isDebt);\\n    _updateReward(0, _assetHash);\\n\\n    if (block.timestamp >= periodFinish[_assetHash]) {\\n      rewardRate[_assetHash] = reward.div(rewardsDuration);\\n    } else {\\n      uint256 remaining = periodFinish[_assetHash].sub(block.timestamp);\\n      uint256 leftover = remaining.mul(rewardRate[_assetHash]);\\n      rewardRate[_assetHash] = reward.add(leftover).div(rewardsDuration);\\n    }\\n\\n    // Ensure the provided reward amount is not more than the balance in the contract.\\n    // This keeps the reward rate in the right range, preventing overflows due to\\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n    uint256 balance = rewardsToken.balanceOf(address(this));\\n    require(rewardRate[_assetHash] <= balance.div(rewardsDuration), 'Provided reward too high');\\n\\n    lastUpdateTime[_assetHash] = block.timestamp;\\n    periodFinish[_assetHash] = block.timestamp.add(rewardsDuration);\\n    emit RewardAdded(_assetHash, reward);\\n  }\\n\\n  function _updateReward(uint256 _tokenId, bytes32 _assetHash) internal {\\n    rewardPerTokenStored[_assetHash] = rewardPerToken(_assetHash);\\n    lastUpdateTime[_assetHash] = lastTimeRewardApplicable(_assetHash);\\n    if (_tokenId != 0) {\\n      rewards[_tokenId][_assetHash] = earned(_tokenId, _assetHash);\\n      userRewardPerTokenPaid[_tokenId][_assetHash] = rewardPerTokenStored[_assetHash];\\n    }\\n  }\\n\\n  function assetHash(address pool, address asset, bool isDebt) public pure returns (bytes32) {\\n    return keccak256(abi.encode(pool, asset, isDebt));\\n  }\\n\\n  //// @inheritdoc IRewardsController\\n  function _handleSupplies(address pool, address asset, uint256 tokenId, uint256 balance) internal {\\n    bytes32 _assetHash = assetHash(pool, asset, false);\\n    uint256 _currentBalance = _balances[tokenId][_assetHash];\\n\\n    _updateReward(tokenId, _assetHash);\\n\\n    _balances[tokenId][_assetHash] = balance;\\n    _totalSupply[_assetHash] = _totalSupply[_assetHash] - _currentBalance + balance;\\n  }\\n\\n  function _handleDebt(address pool, address asset, uint256 tokenId, uint256 balance) internal {\\n    bytes32 _assetHash = assetHash(pool, asset, true);\\n    uint256 _currentBalance = _balances[tokenId][_assetHash];\\n\\n    _updateReward(tokenId, _assetHash);\\n\\n    _balances[tokenId][_assetHash] = balance;\\n    _totalSupply[_assetHash] = _totalSupply[_assetHash] - _currentBalance + balance;\\n  }\\n}\\n\",\"keccak256\":\"0x20b55729e99cb516f8f48199206f710aba2ccf4a10832d218ebe7d46f3f4dabe\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IHook.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\n\\ninterface IHook {\\n  function afterInitialize(address pool) external returns (bytes4);\\n\\n  function beforeSupply(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterSupply(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeWithdraw(DataTypes.ExecuteWithdrawParams memory params) external;\\n\\n  function afterWithdraw(DataTypes.ExecuteWithdrawParams memory params) external;\\n\\n  function beforeRepay(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterRepay(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeBorrow(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterBorrow(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeLiquidate(\\n    address liquidator,\\n    bytes32 position,\\n    address collateralAsset,\\n    address debtAsset,\\n    uint256 debtToCover,\\n    address pool,\\n    bytes calldata hookData\\n  ) external;\\n\\n  function afterLiquidate(\\n    address liquidator,\\n    bytes32 position,\\n    address collateralAsset,\\n    address debtAsset,\\n    uint256 debtToCover,\\n    address pool,\\n    bytes calldata hookData\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0a4ac719eece30dd83aa078e706a8e6a54f3f6f16c1e76472e89d82b8f17b100\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INFTPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\nimport {INFTRewardsDistributor} from './INFTRewardsDistributor.sol';\\n\\ninterface INFTPositionManager is INFTRewardsDistributor {\\n  /**\\n   * @notice Error indicating that the caller is not the owner or approved operator of the token ID.\\n   */\\n  error NotTokenIdOwner();\\n\\n  /**\\n   * @notice Error indicating that a zero address was provided, which is not allowed.\\n   */\\n  error ZeroAddressNotAllowed();\\n\\n  /**\\n   * @notice Error indicating that a zero value was provided, which is not allowed.\\n   */\\n  error ZeroValueNotAllowed();\\n\\n  /**\\n   * @notice Error indicating a mismatch in balance.\\n   */\\n  error BalanceMisMatch();\\n\\n  /**\\n   * @notice Error indicating that the position is not cleared.\\n   */\\n  error PositionNotCleared();\\n\\n  /**\\n   * @notice Error indicating that pool is not register in pool factory.\\n   */\\n  error NotPool();\\n\\n  /**\\n   *\\n   * @param asset The address of the asset that we want to borrow.\\n   * @param tokenId  The ID of the position token.\\n   * @param amount The amount of the asset that we want to borrow.\\n   */\\n  event BorrowIncreased(address indexed asset, uint256 indexed amount, uint256 indexed tokenId);\\n\\n  /**\\n   *\\n   * @param asset The address of the asset that we want to withdraw\\n   * @param amount The amount of asset that we want to withdraw\\n   * @param tokenId The ID of the NFT.\\n   *\\n   */\\n  event Withdrawal(address indexed asset, uint256 indexed amount, uint256 tokenId);\\n\\n  /**\\n   *\\n   * @param asset The address of the asset that we want to repay.\\n   * @param tokenId The ID of the NFT.\\n   * @param amount The amount of asset that we want to repay\\n   */\\n  event Repay(address indexed asset, uint256 indexed tokenId, uint256 indexed amount);\\n\\n  /**\\n   * @notice Emitted when liquidity is increased for a specific position token.\\n   * @param asset The address of the asset for which liquidity was increased.\\n   * @param tokenId The ID of the position token.\\n   * @param amount The amount of the asset that was added to the position.\\n   */\\n  event LiquidityIncreased(address indexed asset, uint256 indexed tokenId, uint256 indexed amount);\\n\\n  /**\\n   * @notice Parameters required for minting a new position token.\\n   * @param asset The address of the asset to be supplied.\\n   * @param pool The address of the pool where the asset will be supplied.\\n   * @param amount The amount of the asset to be supplied.\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  struct MintParams {\\n    address asset;\\n    address pool;\\n    uint256 amount;\\n    DataTypes.ExtraData data;\\n  }\\n\\n  /**\\n   * @notice Parameters required for handling liquidity operations.\\n   * @param asset The address of the asset involved in the operation.\\n   * @param pool The address of the pool where the operation is being performed.\\n   * @param user The address of the user performing the operation.\\n   * @param amount The amount of the asset involved in the operation.\\n   * @param tokenId The ID of the position token related to the operation.\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  struct LiquidityParams {\\n    address asset;\\n    address pool;\\n    uint256 amount;\\n    uint256 tokenId;\\n    // bytes32 positionId;\\n    DataTypes.ExtraData data;\\n  }\\n\\n  /**\\n   * @notice Structure representing an asset in a user's position.\\n   * @param asset The address of the asset.\\n   * @param balance The balance of the asset in the position.\\n   * @param debt The debt of the asset in the position.\\n   */\\n  struct Asset {\\n    address asset;\\n    uint256 balance;\\n    uint256 debt;\\n  }\\n\\n  /**\\n   * @notice Structure representing a user's position, including assets, pool, and operator.\\n   * @param pool The address of the pool associated with the position.\\n   * @param operator The address of the operator managing the position.\\n   */\\n  struct Position {\\n    address pool;\\n    address operator;\\n  }\\n\\n  /**\\n   * @notice Parameters required for various asset operations (add liquidity, borrow, repay, withdraw) against a position.\\n   * @param asset The address of the asset involved in the operation.\\n   * @param target Optional argument. For withdraw it is the address of the user receiving the asset.\\n   * @param amount The amount of the asset involved in the operation.\\n   * @param tokenId The ID of the position token involved in the operation.\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  struct AssetOperationParams {\\n    address asset;\\n    address target;\\n    uint256 amount;\\n    uint256 tokenId;\\n    DataTypes.ExtraData data;\\n  }\\n\\n  /**\\n   * @notice Initializes the NFTPositionManager contract.\\n   */\\n  function initialize(address _factory, address _staking, address _owner, address _zero, address _weth) external;\\n\\n  /**\\n   * @notice Mints a new NFT representing a liquidity position.\\n   * @param pool The pool to mint a position ID for\\n   * @return tokenId The ID of the newly minted token.\\n   * @custom:error ZeroAddressNotAllowed error thrown if asset address is zero address.\\n   * @custom:error ZeroValueNotAllowed error thrown if the  amount is zero.\\n   */\\n  function mint(address pool) external returns (uint256 tokenId);\\n\\n  /**\\n   * @notice Allow User to increase liquidity in the postion\\n   * @param params  The parameters required for increase liquidity the position, including the token, pool, amount and asset.\\n   * @custom:error ZeroAddressNotAllowed error thrown if asset address is zero address.\\n   * @custom:error ZeroValueNotAllowed error thrown if the  amount is zero.\\n   */\\n  function supply(AssetOperationParams memory params) external;\\n\\n  /**\\n   * @notice Allow user to borrow the underlying assets\\n   * @param params The params required for borrow the position which includes tokenId, market and amount\\n   * @custom:error ZeroAddressNotAllowed error thrown asset address is zero address.\\n   * @custom:error ZeroValueNotAllowed error thrown if the  amount is zero.\\n   * @custom:error BalanceMisMatch error thrown if difference of currentDebtBalance and previousDebtBalance is not equal to amount\\n   * @custom:event BorrowIncreased emitted whenever user borrows asset\\n   */\\n  function borrow(AssetOperationParams memory params) external;\\n\\n  /**\\n   * @notice Allow user to withdraw their underlying assets.\\n   * @param params The parameters required for withdrawing from the position, including tokenId, asset, and amount.\\n   * @custom:error ZeroAddressNotAllowed error thrown if asset or user address is zero address.\\n   * @custom:error ZeroValueNotAllowed error thrown if the  amount is zero.\\n   * @custom:error BalanceMisMatch error thrown if difference of previousSupplyBalance currentSupplyBalance and  is not equal to amount\\n   * @custom:event Withdrawal emitted whenever user withdraws asset\\n   */\\n  function withdraw(AssetOperationParams memory params) external;\\n\\n  /**\\n   * @notice Allow user to repay thier debt.\\n   * @param params The params required for repaying the position which includes tokenId, asset and amount.\\n   * @custom:error ZeroAddressNotAllowed error thrown if asset address is zero address.\\n   * @custom:error ZeroValueNotAllowed error thrown if the  amount is zero.\\n   * @custom:error BalanceMisMatch error thrown if difference of previousDebtBalance currentDebtBalance and is not equal to amount\\n   * @custom:event Repay emitted whenever user repays asset\\n   */\\n  function repay(AssetOperationParams memory params) external;\\n\\n  function positions(uint256 tokenId) external view returns (Position memory);\\n\\n  /**\\n   *\\n   */\\n  function repayETH(AssetOperationParams memory params) external payable;\\n\\n  /**\\n   *\\n   */\\n  function borrowETH(AssetOperationParams memory params) external payable;\\n\\n  /**\\n   *\\n   */\\n  function supplyETH(AssetOperationParams memory params) external payable;\\n\\n  /**\\n   *\\n   */\\n  function withdrawETH(AssetOperationParams memory params) external payable;\\n\\n  function sweep(address token) external;\\n}\\n\",\"keccak256\":\"0xc2d9f854157070fa688219966e628b12c46b548c27c93f7c9e962912964f44d2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INFTRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IERC721EnumerableUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol';\\n\\n/**\\n * @title INFTRewardsDistributor\\n * @notice Defines the basic interface for a Rewards Distributor.\\n */\\ninterface INFTRewardsDistributor is IERC721EnumerableUpgradeable {\\n  event RewardAdded(bytes32 indexed assetHash, uint256 indexed reward);\\n  event Staked(address indexed user, uint256 amount);\\n  event Withdrawn(address indexed user, uint256 amount);\\n  event RewardPaid(uint256 indexed tokenId, address indexed user, uint256 reward);\\n  event RewardsDurationUpdated(uint256 newDuration);\\n  event Recovered(address token, uint256 amount);\\n\\n  // IERC20 external rewardsToken;\\n  // mapping(bytes32 assetHash => uint256) external lastUpdateTime;\\n  // mapping(bytes32 assetHash => uint256) external periodFinish;\\n  // mapping(bytes32 assetHash => uint256) external rewardPerTokenStored;\\n  // mapping(bytes32 assetHash => uint256) external rewardRate;\\n  // mapping(uint256 tokenId => mapping(bytes32 assetHash => uint256 rewards)) external rewards;\\n\\n  // uint256 external rewardsDuration;\\n\\n  function totalSupplyAssetForRewards(bytes32 _assetHash) external view returns (uint256);\\n\\n  function balanceOfByAssetHash(uint256 tokenId, bytes32 _assetHash) external view returns (uint256);\\n\\n  function lastTimeRewardApplicable(bytes32 _assetHash) external view returns (uint256);\\n\\n  function rewardPerToken(bytes32 _assetHash) external view returns (uint256);\\n\\n  function earned(uint256 tokenId, bytes32 _assetHash) external view returns (uint256);\\n\\n  function getRewardForDuration(bytes32 _assetHash) external view returns (uint256);\\n\\n  /**\\n   * @dev Calculates the boosted balance for an account.\\n   * @param account The address of the account for which to calculate the boosted balance.\\n   * @param balance The amount to boost.\\n   * @return The boosted balance of the account.\\n   */\\n  function boostedBalance(address account, uint256 balance) external view returns (uint256);\\n\\n  function notifyRewardAmount(uint256 reward, address pool, address asset, bool isDebt) external;\\n\\n  function assetHash(address pool, address asset, bool isDebt) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb6ed07889b94456eaa014791e975350ded0d9e5f74fb26899aad19d8121411ea\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\n\\nimport {IPoolManager} from './IPoolManager.sol';\\nimport {IPool} from './pool/IPool.sol';\\n\\n/**\\n * @title IPoolConfigurator\\n * @notice Defines the basic interface for a Pool configurator.\\n */\\ninterface IPoolConfigurator is IPoolManager {\\n  /**\\n   * @dev Emitted when borrowing is enabled or disabled on a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if borrowing is enabled, false otherwise\\n   */\\n  event ReserveBorrowing(address indexed asset, bool enabled);\\n\\n  /**\\n   * @dev Emitted when a reserve is frozen or unfrozen\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param frozen True if reserve is frozen, false otherwise\\n   */\\n  event ReserveFrozen(address indexed asset, bool frozen);\\n\\n  /**\\n   * @dev Emitted when a reserve factor is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldReserveFactor The old reserve factor, expressed in bps\\n   * @param newReserveFactor The new reserve factor, expressed in bps\\n   */\\n  event ReserveFactorChanged(address indexed asset, uint256 oldReserveFactor, uint256 newReserveFactor);\\n\\n  /**\\n   * @dev Emitted when the borrow cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldBorrowCap The old borrow cap\\n   * @param newBorrowCap The new borrow cap\\n   */\\n  event BorrowCapChanged(address indexed asset, uint256 oldBorrowCap, uint256 newBorrowCap);\\n\\n  /**\\n   * @dev Emitted when the supply cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldSupplyCap The old supply cap\\n   * @param newSupplyCap The new supply cap\\n   */\\n  event SupplyCapChanged(address indexed asset, uint256 oldSupplyCap, uint256 newSupplyCap);\\n\\n  /**\\n   * @dev Emitted when a reserve interest strategy contract is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldStrategy The address of the old interest strategy contract\\n   * @param newStrategy The address of the new interest strategy contract\\n   */\\n  event ReserveInterestRateStrategyChanged(address indexed asset, address oldStrategy, address newStrategy);\\n\\n  /**\\n   * @notice Configures borrowing on a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if borrowing needs to be enabled, false otherwise\\n   */\\n  function setReserveBorrowing(IPool pool, address asset, bool enabled) external;\\n\\n  /**\\n   * @notice Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow\\n   * or rate swap but allows repayments, liquidations, rate rebalances and withdrawals.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param freeze True if the reserve needs to be frozen, false otherwise\\n   */\\n  function setReserveFreeze(IPool pool, address asset, bool freeze) external;\\n\\n  function initRoles(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Sets the interest rate strategy of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newRateStrategyAddress The address of the new interest strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(IPool pool, address asset, address newRateStrategyAddress) external;\\n\\n  /**\\n   * @notice Freezes the pool reserves. In the frozen state only withdraw and repay can be done\\n   * @param freeze True if protocol needs to be frozen, false otherwise\\n   */\\n  function setPoolFreeze(IPool pool, bool freeze) external;\\n\\n  /**\\n   * @notice Updates the borrow cap of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newBorrowCap The new borrow cap of the reserve\\n   */\\n  function setBorrowCap(IPool pool, address asset, uint256 newBorrowCap) external;\\n\\n  /**\\n   * @notice Updates the supply cap of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newSupplyCap The new supply cap of the reserve\\n   */\\n  function setSupplyCap(IPool pool, address asset, uint256 newSupplyCap) external;\\n\\n  function getPoolAssetConfiguration(IPool pool, address asset) external view returns (DataTypes.InitReserveConfig memory config);\\n\\n  function getPoolFullConfig(IPool pool) external view returns (DataTypes.InitPoolParams memory config);\\n}\\n\",\"keccak256\":\"0x8e4349bdbcd95e96d8d7c480dd783140d9b6eabd6437784ffc4783f20533daf1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\n\\nimport {IPoolConfigurator} from './IPoolConfigurator.sol';\\nimport {IPool} from './pool/IPool.sol';\\nimport {IBeacon} from '@openzeppelin/contracts/proxy/beacon/IBeacon.sol';\\n\\ninterface IPoolFactory is IBeacon {\\n  event PoolCreated(IPool indexed pool, uint256 indexed index, address indexed creator, DataTypes.InitPoolParams params);\\n  event ImplementationUpdated(address indexed old, address indexed updated, address owner);\\n  event TreasuryUpdated(address indexed old, address indexed updated, address owner);\\n  event ReserveFactorUpdated(uint256 indexed old, uint256 indexed updated, address owner);\\n  event ConfiguratorUpdated(address indexed old, address indexed updated, address owner);\\n  event FlashLoanPremiumToProtocolUpdated(uint256 indexed old, uint256 indexed updated, address owner);\\n\\n  function configurator() external view returns (IPoolConfigurator);\\n\\n  function createPool(DataTypes.InitPoolParams memory params) external returns (IPool pool);\\n\\n  function setConfigurator(address impl) external;\\n\\n  function flashLoanPremiumToProtocol() external view returns (uint256);\\n\\n  function liquidationProtocolFeePercentage() external view returns (uint256);\\n\\n  function pools(uint256 index) external view returns (IPool);\\n\\n  function isPool(address pool) external view returns (bool);\\n\\n  function poolsLength() external view returns (uint256);\\n\\n  function reserveFactor() external view returns (uint256);\\n\\n  function setFlashloanPremium(uint256 updated) external;\\n\\n  function setImplementation(address updated) external;\\n\\n  function setReserveFactor(uint256 updated) external;\\n\\n  function setTreasury(address updated) external;\\n\\n  function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8cfd445d081cd96b0634e4efd787b8e13177728c4ad5b17e69b268cd21527aff\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IPool} from './pool/IPool.sol';\\nimport {IAccessControlEnumerable} from '@openzeppelin/contracts/access/IAccessControlEnumerable.sol';\\n\\n/**\\n * @title IPoolManager\\n * @notice Defines the basic interface for the ACL Manager\\n */\\ninterface IPoolManager is IAccessControlEnumerable {\\n  /**\\n   * @notice Returns the identifier of the PoolAdmin role\\n   * @return The id of the PoolAdmin role\\n   */\\n  function POOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the EmergencyAdmin role\\n   * @return The id of the EmergencyAdmin role\\n   */\\n  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the RiskAdmin role\\n   * @return The id of the RiskAdmin role\\n   */\\n  function RISK_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Adds a new admin as PoolAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addPoolAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as PoolAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removePoolAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is PoolAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is PoolAdmin, false otherwise\\n   */\\n  function isPoolAdmin(IPool pool, address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as EmergencyAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addEmergencyAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as EmergencyAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeEmergencyAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is EmergencyAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is EmergencyAdmin, false otherwise\\n   */\\n  function isEmergencyAdmin(IPool pool, address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as RiskAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addRiskAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as RiskAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeRiskAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is RiskAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is RiskAdmin, false otherwise\\n   */\\n  function isRiskAdmin(IPool pool, address admin) external view returns (bool);\\n\\n  function getRoleFromPool(IPool pool, bytes32 role) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6ab16c8e6e3a1ae1792bd03aaba0c457090609e5ef053ebc71d3a48dbee56314\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x7cd5020e6d4681201fe21e965a1121a4aab44a63891d2208417c5fc07ea6a8c1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\nimport {IPoolGetters} from './IPoolGetters.sol';\\nimport {IPoolSetters} from './IPoolSetters.sol';\\n\\n/**\\n * @title IPool\\n * @notice Defines the basic interface for a ZeroLend Pool.\\n */\\ninterface IPool is IPoolGetters, IPoolSetters {\\n  /**\\n   * Returns the version of the pool implementation\\n   * @return version The version of this pool's implementation\\n   */\\n  function revision() external view returns (uint256 version);\\n\\n  /**\\n   * @notice Initializes the pool with the given parameters. This call sets all the assets and their configs (LTV/LT/Oracle etc..)\\n   * in one call. Since assets once created cannot be changed, this has to be done within the initialize call itself.\\n   * @dev This is function is called by the factory contract.\\n   * @param params The init parameters for the pool. See {DataTypes-InitPoolParams}\\n   */\\n  function initialize(DataTypes.InitPoolParams memory params) external;\\n}\\n\",\"keccak256\":\"0x80bf54cfabd6068ff5ba19e97c92ce2904b01686fec26c2ba2866b7b5915c0e7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPoolGetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\nimport {IHook} from '../IHook.sol';\\nimport {IPoolFactory} from '../IPoolFactory.sol';\\n\\ninterface IPoolGetters {\\n  /**\\n   * @notice Get the balance of a specific asset in a specific position.\\n   * @param asset The address of the asset.\\n   * @param positionId The ID of the position.\\n   * @return balance The balance of the specified asset in the specified position.\\n   */\\n  function getBalanceByPosition(address asset, bytes32 positionId) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Get the balance of a specific asset for a user given a position index\\n   * @param asset The address of the asset.\\n   * @param who The user to find the balance of\\n   * @param index The index of the user's position\\n   * @return balance The balance of the specified asset for the given user and position idnex.\\n   */\\n  function getBalance(address asset, address who, uint256 index) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Get the debt of a specific asset for a user given a position index\\n   * @param asset The address of the asset.\\n   * @param who The user to find the debt of\\n   * @param index The index of the user's position\\n   * @return debt The debt of the specified asset for the given user and position idnex.\\n   */\\n  function getDebt(address asset, address who, uint256 index) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Get the debt of a specific asset in a specific position.\\n   * @param asset The address of the asset.\\n   * @param positionId The ID of the position.\\n   * @return debt The debt of the specified asset in the specified position.\\n   */\\n  function getDebtByPosition(address asset, bytes32 positionId) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Gets the reserve factor that this pool charges. The reserve factory is the percentage of\\n   * revenue that the pool shares with the governance.\\n   * @dev This parameter is immutable.\\n   * @return reseveFactor The amount of revenue that gets shared to governance.\\n   */\\n  function getReserveFactor() external view returns (uint256 reseveFactor);\\n\\n  /**\\n   * @notice The factory contract that created this contract\\n   */\\n  function factory() external view returns (IPoolFactory f);\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @param index The index of the user's position\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user,\\n    uint256 index\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @param index The index of the user's position\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(address user, uint256 index) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the number of initialized reserves\\n   * @return The count\\n   */\\n  function getReservesCount() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the current hook for the pool.\\n   * @dev The hook is immutable. Once it is set, it cannot be changed.\\n   * @return The hook for the pool, if set.\\n   */\\n  function getHook() external view returns (IHook);\\n\\n  /**\\n   * @notice Gets the raw balance object for the asset for a given position id\\n   */\\n  function getBalanceRawByPositionId(address asset, bytes32 positionId) external view returns (DataTypes.PositionBalance memory);\\n\\n  /**\\n   * @notice Gets the raw balance object for the asset for a given user and the position index.\\n   * @param asset The address of the asset\\n   * @param who The address of the user\\n   * @param index The index of the user's position\\n   */\\n  function getBalanceRaw(address asset, address who, uint256 index) external view returns (DataTypes.PositionBalance memory);\\n\\n  /**\\n   * @notice Gets the raw reserve supply object for a given asset.\\n   * @param asset The address of the asset\\n   * @return data The reserve supply information of the given asset\\n   */\\n  function getTotalSupplyRaw(address asset) external view returns (DataTypes.ReserveSupplies memory data);\\n\\n  /**\\n   * @notice Gets the Pool Configurator\\n   * @return The address of the Pool Configurator\\n   */\\n  function getConfigurator() external view returns (address);\\n\\n  function totalAssets(address asset) external view returns (uint256 balance);\\n\\n  function totalDebt(address asset) external view returns (uint256 balance);\\n\\n  function supplyShares(address asset, bytes32 positionId) external view returns (uint256 shares);\\n\\n  function marketBalances(address asset)\\n    external\\n    view\\n    returns (uint256 totalSupplyAssets, uint256 totalSupplyShares, uint256 totalBorrowAssets, uint256 totalBorrowShares);\\n\\n  function supplyAssets(address asset, bytes32 positionId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc58b1c9b2920e038ad3229012b0ff8e587f2fedef0c4ae397351ea9a44a98065\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPoolSetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\n\\ninterface IPoolSetters {\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the rate strategy for the reserve\\n   * @param source The address of the oracle for the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setReserveConfiguration(\\n    address asset,\\n    address rateStrategyAddress,\\n    address source,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param to The address to supply for\\n   * @param amount The amount to be supplied\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return minted The amount of shares minted\\n   */\\n  function supply(\\n    address asset,\\n    address to,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory minted);\\n\\n  /**\\n   * @dev See [supply(...)](#supply) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function supplySimple(address asset, address to, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param to The address to send the tokens to\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return burnt The amount of shares burnt\\n   */\\n  function withdraw(\\n    address asset,\\n    address to,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory burnt);\\n\\n  /**\\n   * @dev See [withdraw(...)](#withdraw) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function withdrawSimple(address asset, address to, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory minted);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param to The address to send the tokens to\\n   * @param amount The amount to be borrowed\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return borrowed The amount of shares borrowed\\n   */\\n  function borrow(\\n    address asset,\\n    address to,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory borrowed);\\n\\n  /**\\n   * @dev See [borrow(...)](#borrow) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function borrowSimple(address asset, address to, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return repaid The amount of shares repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory repaid);\\n\\n  /**\\n   * @dev See [repay(...)](#repay) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function repaySimple(address asset, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param index The index of the user's position\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, uint256 index, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  function liquidate(\\n    address collateralAsset,\\n    address debtAsset,\\n    bytes32 position,\\n    uint256 debtToCover,\\n    DataTypes.ExtraData memory data\\n  ) external;\\n\\n  /**\\n   * @dev See [liquidate(...)](#liquidate) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function liquidateSimple(address collateralAsset, address debtAsset, bytes32 position, uint256 debtToCover) external;\\n\\n  /**\\n   * @dev See [flashLoan(...)](#flashLoan) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function flashLoanSimple(address receiverAddress, address asset, uint256 amount, bytes calldata params) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration.\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    DataTypes.ExtraData memory data\\n  ) external;\\n\\n  function forceUpdateReserves() external;\\n\\n  function forceUpdateReserve(address asset) external;\\n}\\n\",\"keccak256\":\"0x8038023248cbdd5689babdb610898c6fd3835545d6593f2ac75ba9015f2bf98c\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040527f4c716a0ebd1cfd3e93ca0db9b9f8a0a9cb7c1d4cc18b52950e1f5528cc73cb5d6080523480156200003557600080fd5b506200004062000046565b62000107565b600054610100900460ff1615620000b35760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161462000105576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051614d736200012a600039600081816107250152611d180152614d736000f3fe6080604052600436106103905760003560e01c80636a627842116101dc578063ac9650d811610102578063d1af0c7d116100a0578063e6fd50051161006f578063e6fd500514610b88578063e985e9c514610bb6578063ee1cd5fd14610bff578063f1d88e5c14610c1f57600080fd5b8063d1af0c7d14610afb578063d25c3e9114610b1c578063d547741f14610b55578063e169040814610b7557600080fd5b8063c45a0155116100dc578063c45a015514610a87578063c7cc7dc214610aa8578063c87b56dd14610abb578063ca15c87314610adb57600080fd5b8063ac9650d814610a1a578063b88d4fde14610a47578063bb2747d814610a6757600080fd5b8063922c88951161017a578063a217fddf11610149578063a217fddf14610989578063a22cb4651461099e578063a2b1ae3f146109be578063a65b1381146109ec57600080fd5b8063922c88951461089757806395d89b41146108b7578063995121b5146108cc57806399fbab88146108fa57600080fd5b80637d8741f1116101b65780637d8741f11461081757806385084e16146108375780639010d07c1461085757806391d148541461087757600080fd5b80636a6278421461079e5780636d165502146107be57806370a08231146107f757600080fd5b80632f2ff15d116102c15780633fc8cef31161025f57806358a13b3a1161022e57806358a13b3a146107135780636352211e1461074757806367838c241461076757806369db8b271461078757600080fd5b80633fc8cef31461069257806342842e0e146106b3578063477d66a9146106d35780634f6ccce7146106f357600080fd5b806336568abe1161029b57806336568abe14610602578063386a95251461062257806339a247cd1461063957806339dbfbc11461065957600080fd5b80632f2ff15d146105a25780632f745c59146105c257806333c52a3f146105e257600080fd5b8063136b0da61161032e57806318160ddd1161030857806318160ddd146105295780631afdcc8f1461053e57806323b872dd14610551578063248a9ca31461057157600080fd5b8063136b0da6146104bb57806313b4132f146104db5780631459457a1461050957600080fd5b806306fdde031161036a57806306fdde0314610421578063081812fc14610443578063095ea7b31461047b5780630d1aae351461049b57600080fd5b806301681a621461039c57806301ffc9a7146103be57806305da2082146103f357600080fd5b3661039757005b600080fd5b3480156103a857600080fd5b506103bc6103b7366004614125565b610c32565b005b3480156103ca57600080fd5b506103de6103d9366004614156565b610d67565b60405190151581526020015b60405180910390f35b3480156103ff57600080fd5b5061041361040e366004614181565b610d78565b6040519081526020016103ea565b34801561042d57600080fd5b50610436610dc2565b6040516103ea9190614218565b34801561044f57600080fd5b5061046361045e36600461422b565b610e54565b6040516001600160a01b0390911681526020016103ea565b34801561048757600080fd5b506103bc610496366004614244565b610e7b565b3480156104a757600080fd5b506104136104b636600461426e565b610f95565b3480156104c757600080fd5b506104136104d636600461422b565b611022565b3480156104e757600080fd5b506104136104f636600461422b565b61019b6020526000908152604090205481565b34801561051557600080fd5b506103bc610524366004614290565b611042565b34801561053557600080fd5b5060fd54610413565b6103bc61054c3660046143e4565b61120f565b34801561055d57600080fd5b506103bc61056c3660046144d9565b6112d6565b34801561057d57600080fd5b5061041361058c36600461422b565b600090815261012d602052604090206001015490565b3480156105ae57600080fd5b506103bc6105bd366004614515565b611307565b3480156105ce57600080fd5b506104136105dd366004614244565b61132d565b3480156105ee57600080fd5b506104136105fd36600461422b565b6113c3565b34801561060e57600080fd5b506103bc61061d366004614515565b611456565b34801561062e57600080fd5b506104136101a15481565b34801561064557600080fd5b506103bc6106543660046143e4565b6114d0565b34801561066557600080fd5b5061041361067436600461426e565b600091825261019d6020908152604080842092845291905290205490565b34801561069e57600080fd5b5061019454610463906001600160a01b031681565b3480156106bf57600080fd5b506103bc6106ce3660046144d9565b6114d9565b3480156106df57600080fd5b506103bc6106ee3660046143e4565b6114f4565b3480156106ff57600080fd5b5061041361070e36600461422b565b611514565b34801561071f57600080fd5b506104137f000000000000000000000000000000000000000000000000000000000000000081565b34801561075357600080fd5b5061046361076236600461422b565b6115a7565b34801561077357600080fd5b506103bc61078236600461426e565b611607565b34801561079357600080fd5b506104136101a05481565b3480156107aa57600080fd5b506104136107b9366004614125565b611739565b3480156107ca57600080fd5b506104136107d936600461426e565b61019e60209081526000928352604080842090915290825290205481565b34801561080357600080fd5b50610413610812366004614125565b611840565b34801561082357600080fd5b5061041361083236600461422b565b6118c6565b34801561084357600080fd5b50610413610852366004614244565b6118f8565b34801561086357600080fd5b5061046361087236600461426e565b6119e6565b34801561088357600080fd5b506103de610892366004614515565b6119ff565b3480156108a357600080fd5b506103bc6108b23660046143e4565b611a2b565b3480156108c357600080fd5b50610436611a54565b3480156108d857600080fd5b506104136108e736600461422b565b6101996020526000908152604090205481565b34801561090657600080fd5b5061096261091536600461422b565b60408051808201909152600080825260208201525060009081526101936020908152604091829020825180840190935280546001600160a01b039081168452600190910154169082015290565b6040805182516001600160a01b0390811682526020938401511692810192909252016103ea565b34801561099557600080fd5b50610413600081565b3480156109aa57600080fd5b506103bc6109b9366004614541565b611a63565b3480156109ca57600080fd5b506104136109d936600461422b565b61019a6020526000908152604090205481565b3480156109f857600080fd5b50610413610a0736600461422b565b6000908152610198602052604090205490565b348015610a2657600080fd5b50610a3a610a35366004614578565b611a6e565b6040516103ea91906145ed565b348015610a5357600080fd5b506103bc610a6236600461464f565b611b61565b348015610a7357600080fd5b506103bc610a823660046143e4565b611b93565b348015610a9357600080fd5b5061019154610463906001600160a01b031681565b6103bc610ab63660046143e4565b611b9c565b348015610ac757600080fd5b50610436610ad636600461422b565b611c52565b348015610ae757600080fd5b50610413610af636600461422b565b611cc5565b348015610b0757600080fd5b5061019554610463906001600160a01b031681565b348015610b2857600080fd5b50610413610b3736600461426e565b61019f60209081526000928352604080842090915290825290205481565b348015610b6157600080fd5b506103bc610b70366004614515565b611cdd565b6103bc610b833660046143e4565b611d03565b348015610b9457600080fd5b50610413610ba336600461422b565b61019c6020526000908152604090205481565b348015610bc257600080fd5b506103de610bd13660046146b7565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b348015610c0b57600080fd5b506103bc610c1a3660046146e1565b611d16565b6103bc610c2d3660046143e4565b611fbb565b6000610c3d81612076565b6001600160a01b038216610c80576040514790339082156108fc029083906000818181858888f19350505050158015610c7a573d6000803e3d6000fd5b50505050565b6040516370a0823160e01b815230600482015282906001600160a01b0382169063a9059cbb90339083906370a0823190602401602060405180830381865afa158015610cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf49190614730565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a9190614749565b5050565b6000610d7282612080565b92915050565b604080516001600160a01b03808616602083015284169181019190915281151560608201526000906080016040516020818303038152906040528051906020012090509392505050565b606060c98054610dd190614766565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfd90614766565b8015610e4a5780601f10610e1f57610100808354040283529160200191610e4a565b820191906000526020600020905b815481529060010190602001808311610e2d57829003601f168201915b5050505050905090565b6000610e5f826120a5565b50600090815260cd60205260409020546001600160a01b031690565b6000610e86826115a7565b9050806001600160a01b0316836001600160a01b031603610ef85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610f145750610f148133610bd1565b610f865760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610eef565b610f908383612104565b505050565b600082815261019f6020908152604080832084845282528083205485845261019e835281842085855290925282205461101b919061101590670de0b6b3a76400009061100f90610fee90610fe8896113c3565b90612176565b600089815261019d602090815260408083208b845290915290205490612182565b9061218e565b9061219a565b9392505050565b6101a154600082815261019c60205260408120549091610d729190612182565b600054610100900460ff16158080156110625750600054600160ff909116105b8061107c5750303b15801561107c575060005460ff166001145b6110df5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610eef565b6000805460ff191660011790558015611102576000805461ff0019166101001790555b61110a6121a6565b611163604051806040016040528060158152602001742d32b937a632b7321027b732902837b9b4ba34b7b760591b8152506040518060400160405280600a8152602001695a4c2d504f532d4f4e4560b01b8152506121cf565b61116b6121a6565b61117e6302faf080866212750086612200565b611189600085612265565b61019180546001600160a01b038089166001600160a01b0319928316179092556101948054928516929091169190911790556001610192558015611207576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b61019460009054906101000a90046001600160a01b03166001600160a01b031663d0e30db082604001516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561126457600080fd5b505af1158015611278573d6000803e3d6000fd5b50506101945484516001600160a01b0390811691161492506112ca9150505760405162461bcd60e51b81526020600482015260086024820152670dcdee840eecae8d60c31b6044820152606401610eef565b6112d381612288565b50565b6112e033826124ac565b6112fc5760405162461bcd60e51b8152600401610eef906147a0565b610f9083838361252b565b600082815261012d602052604090206001015461132381612076565b610f908383612265565b600061133883611840565b821061139a5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610eef565b506001600160a01b0391909116600090815260fb60209081526040808320938352929052205490565b6000818152610198602052604081205481036113ed5750600090815261019b602052604090205490565b6000828152610198602090815260408083205461019c835281842054610199909352922054610d729261144092909161100f91670de0b6b3a76400009161143a91908290610fe88b6118c6565b90612182565b600084815261019b60205260409020549061219a565b6001600160a01b03811633146114c65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610eef565b610d63828261269c565b6112d3816126bf565b610f9083838360405180602001604052806000815250611b61565b604081015181516112ca916001600160a01b039091169033903090612869565b600061151f60fd5490565b82106115825760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610eef565b60fd8281548110611595576115956147ed565b90600052602060002001549050919050565b600081815260cb60205260408120546001600160a01b031680610d725760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610eef565b61160f6128c1565b611619828261291a565b600082815261019f60209081526040808320848452909152902054801561172f57600083815261019f60209081526040808320858452909152812055610195546001600160a01b031663a9059cbb611670856115a7565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156116bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e19190614749565b506116eb836115a7565b6001600160a01b0316837f04492fab062412e7e4e5f46c9e919f1640652946a5e163ad6e6c1c03d87954d28360405161172691815260200190565b60405180910390a35b50610d6360018055565b61019154604051635b16ebb760e01b81526001600160a01b0383811660048301526000921690635b16ebb790602401602060405180830381865afa158015611785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a99190614749565b6117e25760405162461bcd60e51b815260206004820152600a6024820152691b9bdd0818481c1bdbdb60b21b6044820152606401610eef565b50610192805490819060006117f683614819565b909155505060008181526101936020526040902080546001600160a01b0384166001600160a01b031991821617825560019091018054909116905561183b338261299a565b919050565b60006001600160a01b0382166118aa5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610eef565b506001600160a01b0316600090815260cc602052604090205490565b600081815261019a602052604081205442106118f157600082815261019a6020526040902054610d72565b4292915050565b6000806064611908846014614832565b6119129190614849565b610196546040516309ab24eb60e41b81526001600160a01b03878116600483015292935060009290911690639ab24eb090602401602060405180830381865afa158015611963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119879190614730565b9050600060646101a054838761199d9190614832565b6119a8906050614832565b6119b29190614849565b6119bc9190614849565b905060006119ca828561486b565b90508581116119d957806119db565b855b979650505050505050565b600082815261015f6020526040812061101b9083612b33565b600091825261012d602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60408101518151611a4b916001600160a01b039091169033903090612869565b6112d381612b3f565b606060ca8054610dd190614766565b610d63338383612e5e565b6040805160008152602081019091526060908267ffffffffffffffff811115611a9957611a996142f5565b604051908082528060200260200182016040528015611acc57816020015b6060815260200190600190039081611ab75790505b50915060005b83811015611b5957611b2930868684818110611af057611af06147ed565b9050602002810190611b029190614891565b85604051602001611b15939291906148df565b604051602081830303815290604052612f2c565b838281518110611b3b57611b3b6147ed565b60200260200101819052508080611b5190614819565b915050611ad2565b505092915050565b611b6b33836124ac565b611b875760405162461bcd60e51b8152600401610eef906147a0565b610c7a84848484612f51565b6112d381612f84565b60208101805130909152611baf826126bf565b610194546040808401519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d91611be79160040190815260200190565b600060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b5050505060408281015190516001600160a01b038316916108fc811502916000818181858888f19350505050158015610f90573d6000803e3d6000fd5b6060611c5d826120a5565b6000611c7460408051602081019091526000815290565b90506000815111611c94576040518060200160405280600081525061101b565b80611c9e84613176565b604051602001611caf929190614906565b6040516020818303038152906040529392505050565b600081815261015f60205260408120610d7290613209565b600082815261012d6020526040902060010154611cf981612076565b610f90838361269c565b60208101805130909152611baf82612f84565b7f0000000000000000000000000000000000000000000000000000000000000000611d4081612076565b610195546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611d7590339030908a90600401614935565b6020604051808303816000875af1158015611d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db89190614749565b506000611dc6858585610d78565b9050611dd360008261291a565b600081815261019a60205260409020544210611e0d576101a154611df890879061218e565b600082815261019c6020526040902055611e6e565b600081815261019a6020526040812054611e279042612176565b600083815261019c602052604081205491925090611e46908390612182565b6101a154909150611e5b9061100f8a8461219a565b600084815261019c602052604090205550505b610195546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edc9190614730565b9050611ef46101a1548261218e90919063ffffffff16565b600083815261019c60205260409020541115611f525760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610eef565b60008281526101996020526040902042908190556101a154611f74919061219a565b600083815261019a6020526040808220929092559051889184917fea7c7e575572148397ff12fda8fd9ceece9a89735ca952bbbabf5893b8da6bcd9190a350505050505050565b61019460009054906101000a90046001600160a01b03166001600160a01b031663d0e30db082604001516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561201057600080fd5b505af1158015612024573d6000803e3d6000fd5b50506101945484516001600160a01b039081169116149250611a4b9150505760405162461bcd60e51b81526020600482015260086024820152670dcdee840eecae8d60c31b6044820152606401610eef565b6112d38133613213565b60006001600160e01b03198216635a05180f60e01b1480610d725750610d728261326c565b600081815260cb60205260409020546001600160a01b03166112d35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610eef565b60008181526101936020526040902060010180546001600160a01b0319166001600160a01b038416908117909155819061213d826115a7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061101b828461487e565b600061101b8284614832565b600061101b8284614849565b600061101b828461486b565b600054610100900460ff166121cd5760405162461bcd60e51b8152600401610eef90614959565b565b600054610100900460ff166121f65760405162461bcd60e51b8152600401610eef90614959565b610d638282613291565b600054610100900460ff166122275760405162461bcd60e51b8152600401610eef90614959565b6101a09390935561019680546001600160a01b039384166001600160a01b03199182161790915561019580549490931693169290921790556101a155565b61226f82826132d1565b600082815261015f60205260409020610f909082613358565b6122906128c1565b80516001600160a01b03166122b8576040516342bcdf7f60e11b815260040160405180910390fd5b80604001516000036122dd5760405163273e150360e21b815260040160405180910390fd5b80606001516000036122ff576001610192546122f9919061487e565b60608201525b6060810180516000908152610193602052604090205490516001600160a01b039091169061232c9061336d565b6040820151825161234a916001600160a01b03909116908390613394565b8151604080840151606085015160808601519251630b4fc83960e31b81526001600160a01b03861694635a7e41c89461238c94919330939091906004016149d2565b60408051808303816000875af11580156123aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ce9190614a0c565b508160400151826060015183600001516001600160a01b03167f10b5ecdcd8987bf6a244bc36c939cce51024c18c0d371cb8e3e4a2bca78ba17260405160405180910390a4815160608301516040516318797cd560e21b81526000926001600160a01b038516926361e5f3549261244a92913091600401614935565b602060405180830381865afa158015612467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248b9190614730565b90506124a1828460000151856060015184613423565b50506112d360018055565b6000806124b8836115a7565b9050806001600160a01b0316846001600160a01b031614806124ff57506001600160a01b03808216600090815260ce602090815260408083209388168352929052205460ff165b806125235750836001600160a01b031661251884610e54565b6001600160a01b0316145b949350505050565b826001600160a01b031661253e826115a7565b6001600160a01b0316146125645760405162461bcd60e51b8152600401610eef90614a3e565b6001600160a01b0382166125c65760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610eef565b6125d383838360016134b1565b826001600160a01b03166125e6826115a7565b6001600160a01b03161461260c5760405162461bcd60e51b8152600401610eef90614a3e565b600081815260cd6020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260cc855283862080546000190190559087168086528386208054600101905586865260cb90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6126a682826135e5565b600082815261015f60205260409020610f90908261364d565b6126c76128c1565b80516001600160a01b03166126ef576040516342bcdf7f60e11b815260040160405180910390fd5b80604001516000036127145760405163273e150360e21b815260040160405180910390fd5b806060015160000361273657600161019254612730919061487e565b60608201525b612743816060015161336d565b60608101805160009081526101936020908152604091829020548451918501518386015194516080870151945163fbabb91b60e01b81526001600160a01b0390931695869563fbabb91b9561279f9590949391906004016149d2565b60408051808303816000875af11580156127bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e19190614a0c565b50816040015182600001516001600160a01b03167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb846060015160405161282a91815260200190565b60405180910390a3815160608301516040516318797cd560e21b81526000926001600160a01b038516926361e5f3549261244a92913091600401614935565b610c7a846323b872dd60e01b85858560405160240161288a93929190614935565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613662565b6002600154036129135760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610eef565b6002600155565b612923816113c3565b600082815261019b602052604090205561293c816118c6565b600082815261019960205260409020558115610d635761295c8282610f95565b600083815261019f6020908152604080832085845282528083209390935561019b81528282205494825261019e815282822093825292909252902055565b6001600160a01b0382166129f05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610eef565b600081815260cb60205260409020546001600160a01b031615612a555760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610eef565b612a636000838360016134b1565b600081815260cb60205260409020546001600160a01b031615612ac85760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610eef565b6001600160a01b038216600081815260cc602090815260408083208054600101905584835260cb90915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061101b8383613737565b612b476128c1565b80516001600160a01b0316612b6f576040516342bcdf7f60e11b815260040160405180910390fd5b8060400151600003612b945760405163273e150360e21b815260040160405180910390fd5b8060600151600003612bb657600161019254612bb0919061487e565b60608201525b6060810151600090815261019360209081526040918290208251808401845281546001600160a01b0390811680835260019093015481169382019390935284519385015190939192612c0d91908316908490613394565b83516060850151604051632c626df160e21b81526000926001600160a01b0386169263b189b7c492612c4492913091600401614935565b602060405180830381865afa158015612c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c859190614730565b8551604080880151606089015160808a01519251631e2e87f960e11b81529495506000946001600160a01b03891694633c5d0ff294612cca9491939192600401614a83565b60408051808303816000875af1158015612ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0c9190614a0c565b86516060880151604051632c626df160e21b81529293506000926001600160a01b0388169263b189b7c492612d4692309190600401614935565b602060405180830381865afa158015612d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d879190614730565b6020830151909150612d99828561487e565b14612db757604051635269286b60e01b815260040160405180910390fd5b80158015612dcc575086604001518260200151105b15612dfa57612dfa3383602001518960400151612de9919061487e565b6001600160a01b0387169190613761565b612e0e858860000151896060015184613791565b60608701516040808901518951915190916001600160a01b0316907f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d090600090a45050505050506112d360018055565b816001600160a01b0316836001600160a01b031603612ebf5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610eef565b6001600160a01b03838116600081815260ce6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606061101b8383604051806060016040528060278152602001614d176027913961379f565b612f5c84848461252b565b612f6884848484613817565b610c7a5760405162461bcd60e51b8152600401610eef90614ab0565b612f8c6128c1565b80516001600160a01b0316612fb4576040516342bcdf7f60e11b815260040160405180910390fd5b8060400151600003612fd95760405163273e150360e21b815260040160405180910390fd5b8060600151600003612ffb57600161019254612ff5919061487e565b60608201525b613008816060015161336d565b6060810180516000908152610193602090815260409182902054845191850151838601519451608087015194516344b8037d60e01b81526001600160a01b039093169586956344b8037d956130649590949391906004016149d2565b60408051808303816000875af1158015613082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a69190614a0c565b5060608201516040808401518451915190916001600160a01b0316907fafab7fde92fcd9937a096c80b493e9b6ed4a30553631901a9df416810da3246490600090a481516060830151604051632c626df160e21b81526000926001600160a01b0385169263b189b7c49261311f92913091600401614935565b602060405180830381865afa15801561313c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131609190614730565b90506124a1828460000151856060015184613791565b6060600061318383613918565b600101905060008167ffffffffffffffff8111156131a3576131a36142f5565b6040519080825280601f01601f1916602001820160405280156131cd576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846131d757509392505050565b6000610d72825490565b61321d82826119ff565b610d635761322a816139f0565b613235836020613a02565b604051602001613246929190614b02565b60408051601f198184030181529082905262461bcd60e51b8252610eef91600401614218565b60006001600160e01b03198216637965db0b60e01b1480610d725750610d7282613b9e565b600054610100900460ff166132b85760405162461bcd60e51b8152600401610eef90614959565b60c96132c48382614bbd565b5060ca610f908282614bbd565b6132db82826119ff565b610d6357600082815261012d602090815260408083206001600160a01b03851684529091529020805460ff191660011790556133143390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061101b836001600160a01b038416613bc3565b61337733826124ac565b6112d357604051632d20000f60e01b815260040160405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526133e58482613c12565b610c7a576040516001600160a01b03841660248201526000604482015261341990859063095ea7b360e01b9060640161288a565b610c7a8482613662565b600061343185856000610d78565b600084815261019d60209081526040808320848452909152902054909150613459848361291a565b600084815261019d602090815260408083208584528252808320869055610198909152902054839061348c90839061487e565b613496919061486b565b60009283526101986020526040909220919091555050505050565b60018111156135205760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610eef565b816001600160a01b03851661357c576135778160fd8054600083815260fe60205260408120829055600182018355919091527f9346ac6dd7de6b96975fec380d4d994c4c12e6a8897544f22915316cc6cca2800155565b61359f565b836001600160a01b0316856001600160a01b03161461359f5761359f8582613cb9565b6001600160a01b0384166135bb576135b681613d56565b6135de565b846001600160a01b0316846001600160a01b0316146135de576135de8482613e05565b5050505050565b6135ef82826119ff565b15610d6357600082815261012d602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061101b836001600160a01b038416613e49565b60006136b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f3c9092919063ffffffff16565b90508051600014806136d85750808060200190518101906136d89190614749565b610f905760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610eef565b600082600001828154811061374e5761374e6147ed565b9060005260206000200154905092915050565b6040516001600160a01b038316602482015260448101829052610f9090849063a9059cbb60e01b9060640161288a565b600061343185856001610d78565b6060600080856001600160a01b0316856040516137bc9190614c7d565b600060405180830381855af49150503d80600081146137f7576040519150601f19603f3d011682016040523d82523d6000602084013e6137fc565b606091505b509150915061380d86838387613f4b565b9695505050505050565b60006001600160a01b0384163b1561390d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061385b903390899088908890600401614c99565b6020604051808303816000875af1925050508015613896575060408051601f3d908101601f1916820190925261389391810190614ccc565b60015b6138f3573d8080156138c4576040519150601f19603f3d011682016040523d82523d6000602084013e6138c9565b606091505b5080516000036138eb5760405162461bcd60e51b8152600401610eef90614ab0565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612523565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106139575772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613983576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106139a157662386f26fc10000830492506010015b6305f5e10083106139b9576305f5e100830492506008015b61271083106139cd57612710830492506004015b606483106139df576064830492506002015b600a8310610d725760010192915050565b6060610d726001600160a01b03831660145b60606000613a11836002614832565b613a1c90600261486b565b67ffffffffffffffff811115613a3457613a346142f5565b6040519080825280601f01601f191660200182016040528015613a5e576020820181803683370190505b509050600360fc1b81600081518110613a7957613a796147ed565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613aa857613aa86147ed565b60200101906001600160f81b031916908160001a9053506000613acc846002614832565b613ad790600161486b565b90505b6001811115613b4f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613b0b57613b0b6147ed565b1a60f81b828281518110613b2157613b216147ed565b60200101906001600160f81b031916908160001a90535060049490941c93613b4881614ce9565b9050613ada565b50831561101b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610eef565b60006001600160e01b0319821663780e9d6360e01b1480610d725750610d7282613fc4565b6000818152600183016020526040812054613c0a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d72565b506000610d72565b6000806000846001600160a01b031684604051613c2f9190614c7d565b6000604051808303816000865af19150503d8060008114613c6c576040519150601f19603f3d011682016040523d82523d6000602084013e613c71565b606091505b5091509150818015613c9b575080511580613c9b575080806020019051810190613c9b9190614749565b8015613cb057506001600160a01b0385163b15155b95945050505050565b60006001613cc684611840565b613cd0919061487e565b600083815260fc6020526040902054909150808214613d23576001600160a01b038416600090815260fb60209081526040808320858452825280832054848452818420819055835260fc90915290208190555b50600091825260fc602090815260408084208490556001600160a01b03909416835260fb81528383209183525290812055565b60fd54600090613d689060019061487e565b600083815260fe602052604081205460fd8054939450909284908110613d9057613d906147ed565b906000526020600020015490508060fd8381548110613db157613db16147ed565b600091825260208083209091019290925582815260fe909152604080822084905585825281205560fd805480613de957613de9614d00565b6001900381819060005260206000200160009055905550505050565b6000613e1083611840565b6001600160a01b03909316600090815260fb60209081526040808320868452825280832085905593825260fc9052919091209190915550565b60008181526001830160205260408120548015613f32576000613e6d60018361487e565b8554909150600090613e819060019061487e565b9050818114613ee6576000866000018281548110613ea157613ea16147ed565b9060005260206000200154905080876000018481548110613ec457613ec46147ed565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613ef757613ef7614d00565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d72565b6000915050610d72565b60606125238484600085614014565b60608315613fba578251600003613fb3576001600160a01b0385163b613fb35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610eef565b5081612523565b61252383836140e4565b60006001600160e01b031982166380ac58cd60e01b1480613ff557506001600160e01b03198216635b5e139f60e01b145b80610d7257506301ffc9a760e01b6001600160e01b0319831614610d72565b6060824710156140755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610eef565b600080866001600160a01b031685876040516140919190614c7d565b60006040518083038185875af1925050503d80600081146140ce576040519150601f19603f3d011682016040523d82523d6000602084013e6140d3565b606091505b50915091506119db87838387613f4b565b8151156140f45781518083602001fd5b8060405162461bcd60e51b8152600401610eef9190614218565b80356001600160a01b038116811461183b57600080fd5b60006020828403121561413757600080fd5b61101b8261410e565b6001600160e01b0319811681146112d357600080fd5b60006020828403121561416857600080fd5b813561101b81614140565b80151581146112d357600080fd5b60008060006060848603121561419657600080fd5b61419f8461410e565b92506141ad6020850161410e565b915060408401356141bd81614173565b809150509250925092565b60005b838110156141e35781810151838201526020016141cb565b50506000910152565b600081518084526142048160208601602086016141c8565b601f01601f19169290920160200192915050565b60208152600061101b60208301846141ec565b60006020828403121561423d57600080fd5b5035919050565b6000806040838503121561425757600080fd5b6142608361410e565b946020939093013593505050565b6000806040838503121561428157600080fd5b50508035926020909101359150565b600080600080600060a086880312156142a857600080fd5b6142b18661410e565b94506142bf6020870161410e565b93506142cd6040870161410e565b92506142db6060870161410e565b91506142e96080870161410e565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561432e5761432e6142f5565b60405290565b6040805190810167ffffffffffffffff8111828210171561432e5761432e6142f5565b600082601f83011261436857600080fd5b813567ffffffffffffffff80821115614383576143836142f5565b604051601f8301601f19908116603f011681019082821181831017156143ab576143ab6142f5565b816040528381528660208588010111156143c457600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156143f657600080fd5b813567ffffffffffffffff8082111561440e57600080fd5b9083019060a0828603121561442257600080fd5b61442a61430b565b6144338361410e565b81526144416020840161410e565b6020820152604083013560408201526060830135606082015260808301358281111561446c57600080fd5b92909201916040838703121561448157600080fd5b614489614334565b83358381111561449857600080fd5b6144a488828701614357565b8252506020840135838111156144b957600080fd5b6144c588828701614357565b602083015250608082015295945050505050565b6000806000606084860312156144ee57600080fd5b6144f78461410e565b92506145056020850161410e565b9150604084013590509250925092565b6000806040838503121561452857600080fd5b823591506145386020840161410e565b90509250929050565b6000806040838503121561455457600080fd5b61455d8361410e565b9150602083013561456d81614173565b809150509250929050565b6000806020838503121561458b57600080fd5b823567ffffffffffffffff808211156145a357600080fd5b818501915085601f8301126145b757600080fd5b8135818111156145c657600080fd5b8660208260051b85010111156145db57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561464257603f198886030184526146308583516141ec565b94509285019290850190600101614614565b5092979650505050505050565b6000806000806080858703121561466557600080fd5b61466e8561410e565b935061467c6020860161410e565b925060408501359150606085013567ffffffffffffffff81111561469f57600080fd5b6146ab87828801614357565b91505092959194509250565b600080604083850312156146ca57600080fd5b6146d38361410e565b91506145386020840161410e565b600080600080608085870312156146f757600080fd5b843593506147076020860161410e565b92506147156040860161410e565b9150606085013561472581614173565b939692955090935050565b60006020828403121561474257600080fd5b5051919050565b60006020828403121561475b57600080fd5b815161101b81614173565b600181811c9082168061477a57607f821691505b60208210810361479a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161482b5761482b614803565b5060010190565b8082028115828204841417610d7257610d72614803565b60008261486657634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610d7257610d72614803565b81810381811115610d7257610d72614803565b6000808335601e198436030181126148a857600080fd5b83018035915067ffffffffffffffff8211156148c357600080fd5b6020019150368190038213156148d857600080fd5b9250929050565b8284823760008382016000815283516148fc8183602088016141c8565b0195945050505050565b600083516149188184602088016141c8565b83519083019061492c8183602088016141c8565b01949350505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008151604084526149b960408501826141ec565b905060208301518482036020860152613cb082826141ec565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906119db908301846149a4565b600060408284031215614a1e57600080fd5b614a26614334565b82518152602083015160208201528091505092915050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60018060a01b038516815283602082015282604082015260806060820152600061380d60808301846149a4565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614b3a8160178501602088016141c8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614b6b8160288401602088016141c8565b01602801949350505050565b601f821115610f9057600081815260208120601f850160051c81016020861015614b9e5750805b601f850160051c820191505b8181101561120757828155600101614baa565b815167ffffffffffffffff811115614bd757614bd76142f5565b614beb81614be58454614766565b84614b77565b602080601f831160018114614c205760008415614c085750858301515b600019600386901b1c1916600185901b178555611207565b600085815260208120601f198616915b82811015614c4f57888601518255948401946001909101908401614c30565b5085821015614c6d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251614c8f8184602087016141c8565b9190910192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061380d908301846141ec565b600060208284031215614cde57600080fd5b815161101b81614140565b600081614cf857614cf8614803565b506000190190565b634e487b7160e01b600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220356b9dd3da48895914df41696757e3650aef70aad784581311a5161041c82acf64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106103905760003560e01c80636a627842116101dc578063ac9650d811610102578063d1af0c7d116100a0578063e6fd50051161006f578063e6fd500514610b88578063e985e9c514610bb6578063ee1cd5fd14610bff578063f1d88e5c14610c1f57600080fd5b8063d1af0c7d14610afb578063d25c3e9114610b1c578063d547741f14610b55578063e169040814610b7557600080fd5b8063c45a0155116100dc578063c45a015514610a87578063c7cc7dc214610aa8578063c87b56dd14610abb578063ca15c87314610adb57600080fd5b8063ac9650d814610a1a578063b88d4fde14610a47578063bb2747d814610a6757600080fd5b8063922c88951161017a578063a217fddf11610149578063a217fddf14610989578063a22cb4651461099e578063a2b1ae3f146109be578063a65b1381146109ec57600080fd5b8063922c88951461089757806395d89b41146108b7578063995121b5146108cc57806399fbab88146108fa57600080fd5b80637d8741f1116101b65780637d8741f11461081757806385084e16146108375780639010d07c1461085757806391d148541461087757600080fd5b80636a6278421461079e5780636d165502146107be57806370a08231146107f757600080fd5b80632f2ff15d116102c15780633fc8cef31161025f57806358a13b3a1161022e57806358a13b3a146107135780636352211e1461074757806367838c241461076757806369db8b271461078757600080fd5b80633fc8cef31461069257806342842e0e146106b3578063477d66a9146106d35780634f6ccce7146106f357600080fd5b806336568abe1161029b57806336568abe14610602578063386a95251461062257806339a247cd1461063957806339dbfbc11461065957600080fd5b80632f2ff15d146105a25780632f745c59146105c257806333c52a3f146105e257600080fd5b8063136b0da61161032e57806318160ddd1161030857806318160ddd146105295780631afdcc8f1461053e57806323b872dd14610551578063248a9ca31461057157600080fd5b8063136b0da6146104bb57806313b4132f146104db5780631459457a1461050957600080fd5b806306fdde031161036a57806306fdde0314610421578063081812fc14610443578063095ea7b31461047b5780630d1aae351461049b57600080fd5b806301681a621461039c57806301ffc9a7146103be57806305da2082146103f357600080fd5b3661039757005b600080fd5b3480156103a857600080fd5b506103bc6103b7366004614125565b610c32565b005b3480156103ca57600080fd5b506103de6103d9366004614156565b610d67565b60405190151581526020015b60405180910390f35b3480156103ff57600080fd5b5061041361040e366004614181565b610d78565b6040519081526020016103ea565b34801561042d57600080fd5b50610436610dc2565b6040516103ea9190614218565b34801561044f57600080fd5b5061046361045e36600461422b565b610e54565b6040516001600160a01b0390911681526020016103ea565b34801561048757600080fd5b506103bc610496366004614244565b610e7b565b3480156104a757600080fd5b506104136104b636600461426e565b610f95565b3480156104c757600080fd5b506104136104d636600461422b565b611022565b3480156104e757600080fd5b506104136104f636600461422b565b61019b6020526000908152604090205481565b34801561051557600080fd5b506103bc610524366004614290565b611042565b34801561053557600080fd5b5060fd54610413565b6103bc61054c3660046143e4565b61120f565b34801561055d57600080fd5b506103bc61056c3660046144d9565b6112d6565b34801561057d57600080fd5b5061041361058c36600461422b565b600090815261012d602052604090206001015490565b3480156105ae57600080fd5b506103bc6105bd366004614515565b611307565b3480156105ce57600080fd5b506104136105dd366004614244565b61132d565b3480156105ee57600080fd5b506104136105fd36600461422b565b6113c3565b34801561060e57600080fd5b506103bc61061d366004614515565b611456565b34801561062e57600080fd5b506104136101a15481565b34801561064557600080fd5b506103bc6106543660046143e4565b6114d0565b34801561066557600080fd5b5061041361067436600461426e565b600091825261019d6020908152604080842092845291905290205490565b34801561069e57600080fd5b5061019454610463906001600160a01b031681565b3480156106bf57600080fd5b506103bc6106ce3660046144d9565b6114d9565b3480156106df57600080fd5b506103bc6106ee3660046143e4565b6114f4565b3480156106ff57600080fd5b5061041361070e36600461422b565b611514565b34801561071f57600080fd5b506104137f000000000000000000000000000000000000000000000000000000000000000081565b34801561075357600080fd5b5061046361076236600461422b565b6115a7565b34801561077357600080fd5b506103bc61078236600461426e565b611607565b34801561079357600080fd5b506104136101a05481565b3480156107aa57600080fd5b506104136107b9366004614125565b611739565b3480156107ca57600080fd5b506104136107d936600461426e565b61019e60209081526000928352604080842090915290825290205481565b34801561080357600080fd5b50610413610812366004614125565b611840565b34801561082357600080fd5b5061041361083236600461422b565b6118c6565b34801561084357600080fd5b50610413610852366004614244565b6118f8565b34801561086357600080fd5b5061046361087236600461426e565b6119e6565b34801561088357600080fd5b506103de610892366004614515565b6119ff565b3480156108a357600080fd5b506103bc6108b23660046143e4565b611a2b565b3480156108c357600080fd5b50610436611a54565b3480156108d857600080fd5b506104136108e736600461422b565b6101996020526000908152604090205481565b34801561090657600080fd5b5061096261091536600461422b565b60408051808201909152600080825260208201525060009081526101936020908152604091829020825180840190935280546001600160a01b039081168452600190910154169082015290565b6040805182516001600160a01b0390811682526020938401511692810192909252016103ea565b34801561099557600080fd5b50610413600081565b3480156109aa57600080fd5b506103bc6109b9366004614541565b611a63565b3480156109ca57600080fd5b506104136109d936600461422b565b61019a6020526000908152604090205481565b3480156109f857600080fd5b50610413610a0736600461422b565b6000908152610198602052604090205490565b348015610a2657600080fd5b50610a3a610a35366004614578565b611a6e565b6040516103ea91906145ed565b348015610a5357600080fd5b506103bc610a6236600461464f565b611b61565b348015610a7357600080fd5b506103bc610a823660046143e4565b611b93565b348015610a9357600080fd5b5061019154610463906001600160a01b031681565b6103bc610ab63660046143e4565b611b9c565b348015610ac757600080fd5b50610436610ad636600461422b565b611c52565b348015610ae757600080fd5b50610413610af636600461422b565b611cc5565b348015610b0757600080fd5b5061019554610463906001600160a01b031681565b348015610b2857600080fd5b50610413610b3736600461426e565b61019f60209081526000928352604080842090915290825290205481565b348015610b6157600080fd5b506103bc610b70366004614515565b611cdd565b6103bc610b833660046143e4565b611d03565b348015610b9457600080fd5b50610413610ba336600461422b565b61019c6020526000908152604090205481565b348015610bc257600080fd5b506103de610bd13660046146b7565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b348015610c0b57600080fd5b506103bc610c1a3660046146e1565b611d16565b6103bc610c2d3660046143e4565b611fbb565b6000610c3d81612076565b6001600160a01b038216610c80576040514790339082156108fc029083906000818181858888f19350505050158015610c7a573d6000803e3d6000fd5b50505050565b6040516370a0823160e01b815230600482015282906001600160a01b0382169063a9059cbb90339083906370a0823190602401602060405180830381865afa158015610cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf49190614730565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a9190614749565b5050565b6000610d7282612080565b92915050565b604080516001600160a01b03808616602083015284169181019190915281151560608201526000906080016040516020818303038152906040528051906020012090509392505050565b606060c98054610dd190614766565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfd90614766565b8015610e4a5780601f10610e1f57610100808354040283529160200191610e4a565b820191906000526020600020905b815481529060010190602001808311610e2d57829003601f168201915b5050505050905090565b6000610e5f826120a5565b50600090815260cd60205260409020546001600160a01b031690565b6000610e86826115a7565b9050806001600160a01b0316836001600160a01b031603610ef85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610f145750610f148133610bd1565b610f865760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610eef565b610f908383612104565b505050565b600082815261019f6020908152604080832084845282528083205485845261019e835281842085855290925282205461101b919061101590670de0b6b3a76400009061100f90610fee90610fe8896113c3565b90612176565b600089815261019d602090815260408083208b845290915290205490612182565b9061218e565b9061219a565b9392505050565b6101a154600082815261019c60205260408120549091610d729190612182565b600054610100900460ff16158080156110625750600054600160ff909116105b8061107c5750303b15801561107c575060005460ff166001145b6110df5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610eef565b6000805460ff191660011790558015611102576000805461ff0019166101001790555b61110a6121a6565b611163604051806040016040528060158152602001742d32b937a632b7321027b732902837b9b4ba34b7b760591b8152506040518060400160405280600a8152602001695a4c2d504f532d4f4e4560b01b8152506121cf565b61116b6121a6565b61117e6302faf080866212750086612200565b611189600085612265565b61019180546001600160a01b038089166001600160a01b0319928316179092556101948054928516929091169190911790556001610192558015611207576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b61019460009054906101000a90046001600160a01b03166001600160a01b031663d0e30db082604001516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561126457600080fd5b505af1158015611278573d6000803e3d6000fd5b50506101945484516001600160a01b0390811691161492506112ca9150505760405162461bcd60e51b81526020600482015260086024820152670dcdee840eecae8d60c31b6044820152606401610eef565b6112d381612288565b50565b6112e033826124ac565b6112fc5760405162461bcd60e51b8152600401610eef906147a0565b610f9083838361252b565b600082815261012d602052604090206001015461132381612076565b610f908383612265565b600061133883611840565b821061139a5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610eef565b506001600160a01b0391909116600090815260fb60209081526040808320938352929052205490565b6000818152610198602052604081205481036113ed5750600090815261019b602052604090205490565b6000828152610198602090815260408083205461019c835281842054610199909352922054610d729261144092909161100f91670de0b6b3a76400009161143a91908290610fe88b6118c6565b90612182565b600084815261019b60205260409020549061219a565b6001600160a01b03811633146114c65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610eef565b610d63828261269c565b6112d3816126bf565b610f9083838360405180602001604052806000815250611b61565b604081015181516112ca916001600160a01b039091169033903090612869565b600061151f60fd5490565b82106115825760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610eef565b60fd8281548110611595576115956147ed565b90600052602060002001549050919050565b600081815260cb60205260408120546001600160a01b031680610d725760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610eef565b61160f6128c1565b611619828261291a565b600082815261019f60209081526040808320848452909152902054801561172f57600083815261019f60209081526040808320858452909152812055610195546001600160a01b031663a9059cbb611670856115a7565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156116bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e19190614749565b506116eb836115a7565b6001600160a01b0316837f04492fab062412e7e4e5f46c9e919f1640652946a5e163ad6e6c1c03d87954d28360405161172691815260200190565b60405180910390a35b50610d6360018055565b61019154604051635b16ebb760e01b81526001600160a01b0383811660048301526000921690635b16ebb790602401602060405180830381865afa158015611785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a99190614749565b6117e25760405162461bcd60e51b815260206004820152600a6024820152691b9bdd0818481c1bdbdb60b21b6044820152606401610eef565b50610192805490819060006117f683614819565b909155505060008181526101936020526040902080546001600160a01b0384166001600160a01b031991821617825560019091018054909116905561183b338261299a565b919050565b60006001600160a01b0382166118aa5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610eef565b506001600160a01b0316600090815260cc602052604090205490565b600081815261019a602052604081205442106118f157600082815261019a6020526040902054610d72565b4292915050565b6000806064611908846014614832565b6119129190614849565b610196546040516309ab24eb60e41b81526001600160a01b03878116600483015292935060009290911690639ab24eb090602401602060405180830381865afa158015611963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119879190614730565b9050600060646101a054838761199d9190614832565b6119a8906050614832565b6119b29190614849565b6119bc9190614849565b905060006119ca828561486b565b90508581116119d957806119db565b855b979650505050505050565b600082815261015f6020526040812061101b9083612b33565b600091825261012d602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60408101518151611a4b916001600160a01b039091169033903090612869565b6112d381612b3f565b606060ca8054610dd190614766565b610d63338383612e5e565b6040805160008152602081019091526060908267ffffffffffffffff811115611a9957611a996142f5565b604051908082528060200260200182016040528015611acc57816020015b6060815260200190600190039081611ab75790505b50915060005b83811015611b5957611b2930868684818110611af057611af06147ed565b9050602002810190611b029190614891565b85604051602001611b15939291906148df565b604051602081830303815290604052612f2c565b838281518110611b3b57611b3b6147ed565b60200260200101819052508080611b5190614819565b915050611ad2565b505092915050565b611b6b33836124ac565b611b875760405162461bcd60e51b8152600401610eef906147a0565b610c7a84848484612f51565b6112d381612f84565b60208101805130909152611baf826126bf565b610194546040808401519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d91611be79160040190815260200190565b600060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b5050505060408281015190516001600160a01b038316916108fc811502916000818181858888f19350505050158015610f90573d6000803e3d6000fd5b6060611c5d826120a5565b6000611c7460408051602081019091526000815290565b90506000815111611c94576040518060200160405280600081525061101b565b80611c9e84613176565b604051602001611caf929190614906565b6040516020818303038152906040529392505050565b600081815261015f60205260408120610d7290613209565b600082815261012d6020526040902060010154611cf981612076565b610f90838361269c565b60208101805130909152611baf82612f84565b7f0000000000000000000000000000000000000000000000000000000000000000611d4081612076565b610195546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611d7590339030908a90600401614935565b6020604051808303816000875af1158015611d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db89190614749565b506000611dc6858585610d78565b9050611dd360008261291a565b600081815261019a60205260409020544210611e0d576101a154611df890879061218e565b600082815261019c6020526040902055611e6e565b600081815261019a6020526040812054611e279042612176565b600083815261019c602052604081205491925090611e46908390612182565b6101a154909150611e5b9061100f8a8461219a565b600084815261019c602052604090205550505b610195546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edc9190614730565b9050611ef46101a1548261218e90919063ffffffff16565b600083815261019c60205260409020541115611f525760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610eef565b60008281526101996020526040902042908190556101a154611f74919061219a565b600083815261019a6020526040808220929092559051889184917fea7c7e575572148397ff12fda8fd9ceece9a89735ca952bbbabf5893b8da6bcd9190a350505050505050565b61019460009054906101000a90046001600160a01b03166001600160a01b031663d0e30db082604001516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561201057600080fd5b505af1158015612024573d6000803e3d6000fd5b50506101945484516001600160a01b039081169116149250611a4b9150505760405162461bcd60e51b81526020600482015260086024820152670dcdee840eecae8d60c31b6044820152606401610eef565b6112d38133613213565b60006001600160e01b03198216635a05180f60e01b1480610d725750610d728261326c565b600081815260cb60205260409020546001600160a01b03166112d35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610eef565b60008181526101936020526040902060010180546001600160a01b0319166001600160a01b038416908117909155819061213d826115a7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061101b828461487e565b600061101b8284614832565b600061101b8284614849565b600061101b828461486b565b600054610100900460ff166121cd5760405162461bcd60e51b8152600401610eef90614959565b565b600054610100900460ff166121f65760405162461bcd60e51b8152600401610eef90614959565b610d638282613291565b600054610100900460ff166122275760405162461bcd60e51b8152600401610eef90614959565b6101a09390935561019680546001600160a01b039384166001600160a01b03199182161790915561019580549490931693169290921790556101a155565b61226f82826132d1565b600082815261015f60205260409020610f909082613358565b6122906128c1565b80516001600160a01b03166122b8576040516342bcdf7f60e11b815260040160405180910390fd5b80604001516000036122dd5760405163273e150360e21b815260040160405180910390fd5b80606001516000036122ff576001610192546122f9919061487e565b60608201525b6060810180516000908152610193602052604090205490516001600160a01b039091169061232c9061336d565b6040820151825161234a916001600160a01b03909116908390613394565b8151604080840151606085015160808601519251630b4fc83960e31b81526001600160a01b03861694635a7e41c89461238c94919330939091906004016149d2565b60408051808303816000875af11580156123aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ce9190614a0c565b508160400151826060015183600001516001600160a01b03167f10b5ecdcd8987bf6a244bc36c939cce51024c18c0d371cb8e3e4a2bca78ba17260405160405180910390a4815160608301516040516318797cd560e21b81526000926001600160a01b038516926361e5f3549261244a92913091600401614935565b602060405180830381865afa158015612467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248b9190614730565b90506124a1828460000151856060015184613423565b50506112d360018055565b6000806124b8836115a7565b9050806001600160a01b0316846001600160a01b031614806124ff57506001600160a01b03808216600090815260ce602090815260408083209388168352929052205460ff165b806125235750836001600160a01b031661251884610e54565b6001600160a01b0316145b949350505050565b826001600160a01b031661253e826115a7565b6001600160a01b0316146125645760405162461bcd60e51b8152600401610eef90614a3e565b6001600160a01b0382166125c65760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610eef565b6125d383838360016134b1565b826001600160a01b03166125e6826115a7565b6001600160a01b03161461260c5760405162461bcd60e51b8152600401610eef90614a3e565b600081815260cd6020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260cc855283862080546000190190559087168086528386208054600101905586865260cb90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6126a682826135e5565b600082815261015f60205260409020610f90908261364d565b6126c76128c1565b80516001600160a01b03166126ef576040516342bcdf7f60e11b815260040160405180910390fd5b80604001516000036127145760405163273e150360e21b815260040160405180910390fd5b806060015160000361273657600161019254612730919061487e565b60608201525b612743816060015161336d565b60608101805160009081526101936020908152604091829020548451918501518386015194516080870151945163fbabb91b60e01b81526001600160a01b0390931695869563fbabb91b9561279f9590949391906004016149d2565b60408051808303816000875af11580156127bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e19190614a0c565b50816040015182600001516001600160a01b03167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb846060015160405161282a91815260200190565b60405180910390a3815160608301516040516318797cd560e21b81526000926001600160a01b038516926361e5f3549261244a92913091600401614935565b610c7a846323b872dd60e01b85858560405160240161288a93929190614935565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613662565b6002600154036129135760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610eef565b6002600155565b612923816113c3565b600082815261019b602052604090205561293c816118c6565b600082815261019960205260409020558115610d635761295c8282610f95565b600083815261019f6020908152604080832085845282528083209390935561019b81528282205494825261019e815282822093825292909252902055565b6001600160a01b0382166129f05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610eef565b600081815260cb60205260409020546001600160a01b031615612a555760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610eef565b612a636000838360016134b1565b600081815260cb60205260409020546001600160a01b031615612ac85760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610eef565b6001600160a01b038216600081815260cc602090815260408083208054600101905584835260cb90915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061101b8383613737565b612b476128c1565b80516001600160a01b0316612b6f576040516342bcdf7f60e11b815260040160405180910390fd5b8060400151600003612b945760405163273e150360e21b815260040160405180910390fd5b8060600151600003612bb657600161019254612bb0919061487e565b60608201525b6060810151600090815261019360209081526040918290208251808401845281546001600160a01b0390811680835260019093015481169382019390935284519385015190939192612c0d91908316908490613394565b83516060850151604051632c626df160e21b81526000926001600160a01b0386169263b189b7c492612c4492913091600401614935565b602060405180830381865afa158015612c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c859190614730565b8551604080880151606089015160808a01519251631e2e87f960e11b81529495506000946001600160a01b03891694633c5d0ff294612cca9491939192600401614a83565b60408051808303816000875af1158015612ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0c9190614a0c565b86516060880151604051632c626df160e21b81529293506000926001600160a01b0388169263b189b7c492612d4692309190600401614935565b602060405180830381865afa158015612d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d879190614730565b6020830151909150612d99828561487e565b14612db757604051635269286b60e01b815260040160405180910390fd5b80158015612dcc575086604001518260200151105b15612dfa57612dfa3383602001518960400151612de9919061487e565b6001600160a01b0387169190613761565b612e0e858860000151896060015184613791565b60608701516040808901518951915190916001600160a01b0316907f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d090600090a45050505050506112d360018055565b816001600160a01b0316836001600160a01b031603612ebf5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610eef565b6001600160a01b03838116600081815260ce6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b606061101b8383604051806060016040528060278152602001614d176027913961379f565b612f5c84848461252b565b612f6884848484613817565b610c7a5760405162461bcd60e51b8152600401610eef90614ab0565b612f8c6128c1565b80516001600160a01b0316612fb4576040516342bcdf7f60e11b815260040160405180910390fd5b8060400151600003612fd95760405163273e150360e21b815260040160405180910390fd5b8060600151600003612ffb57600161019254612ff5919061487e565b60608201525b613008816060015161336d565b6060810180516000908152610193602090815260409182902054845191850151838601519451608087015194516344b8037d60e01b81526001600160a01b039093169586956344b8037d956130649590949391906004016149d2565b60408051808303816000875af1158015613082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a69190614a0c565b5060608201516040808401518451915190916001600160a01b0316907fafab7fde92fcd9937a096c80b493e9b6ed4a30553631901a9df416810da3246490600090a481516060830151604051632c626df160e21b81526000926001600160a01b0385169263b189b7c49261311f92913091600401614935565b602060405180830381865afa15801561313c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131609190614730565b90506124a1828460000151856060015184613791565b6060600061318383613918565b600101905060008167ffffffffffffffff8111156131a3576131a36142f5565b6040519080825280601f01601f1916602001820160405280156131cd576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846131d757509392505050565b6000610d72825490565b61321d82826119ff565b610d635761322a816139f0565b613235836020613a02565b604051602001613246929190614b02565b60408051601f198184030181529082905262461bcd60e51b8252610eef91600401614218565b60006001600160e01b03198216637965db0b60e01b1480610d725750610d7282613b9e565b600054610100900460ff166132b85760405162461bcd60e51b8152600401610eef90614959565b60c96132c48382614bbd565b5060ca610f908282614bbd565b6132db82826119ff565b610d6357600082815261012d602090815260408083206001600160a01b03851684529091529020805460ff191660011790556133143390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061101b836001600160a01b038416613bc3565b61337733826124ac565b6112d357604051632d20000f60e01b815260040160405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526133e58482613c12565b610c7a576040516001600160a01b03841660248201526000604482015261341990859063095ea7b360e01b9060640161288a565b610c7a8482613662565b600061343185856000610d78565b600084815261019d60209081526040808320848452909152902054909150613459848361291a565b600084815261019d602090815260408083208584528252808320869055610198909152902054839061348c90839061487e565b613496919061486b565b60009283526101986020526040909220919091555050505050565b60018111156135205760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610eef565b816001600160a01b03851661357c576135778160fd8054600083815260fe60205260408120829055600182018355919091527f9346ac6dd7de6b96975fec380d4d994c4c12e6a8897544f22915316cc6cca2800155565b61359f565b836001600160a01b0316856001600160a01b03161461359f5761359f8582613cb9565b6001600160a01b0384166135bb576135b681613d56565b6135de565b846001600160a01b0316846001600160a01b0316146135de576135de8482613e05565b5050505050565b6135ef82826119ff565b15610d6357600082815261012d602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061101b836001600160a01b038416613e49565b60006136b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f3c9092919063ffffffff16565b90508051600014806136d85750808060200190518101906136d89190614749565b610f905760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610eef565b600082600001828154811061374e5761374e6147ed565b9060005260206000200154905092915050565b6040516001600160a01b038316602482015260448101829052610f9090849063a9059cbb60e01b9060640161288a565b600061343185856001610d78565b6060600080856001600160a01b0316856040516137bc9190614c7d565b600060405180830381855af49150503d80600081146137f7576040519150601f19603f3d011682016040523d82523d6000602084013e6137fc565b606091505b509150915061380d86838387613f4b565b9695505050505050565b60006001600160a01b0384163b1561390d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061385b903390899088908890600401614c99565b6020604051808303816000875af1925050508015613896575060408051601f3d908101601f1916820190925261389391810190614ccc565b60015b6138f3573d8080156138c4576040519150601f19603f3d011682016040523d82523d6000602084013e6138c9565b606091505b5080516000036138eb5760405162461bcd60e51b8152600401610eef90614ab0565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612523565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106139575772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613983576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106139a157662386f26fc10000830492506010015b6305f5e10083106139b9576305f5e100830492506008015b61271083106139cd57612710830492506004015b606483106139df576064830492506002015b600a8310610d725760010192915050565b6060610d726001600160a01b03831660145b60606000613a11836002614832565b613a1c90600261486b565b67ffffffffffffffff811115613a3457613a346142f5565b6040519080825280601f01601f191660200182016040528015613a5e576020820181803683370190505b509050600360fc1b81600081518110613a7957613a796147ed565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613aa857613aa86147ed565b60200101906001600160f81b031916908160001a9053506000613acc846002614832565b613ad790600161486b565b90505b6001811115613b4f576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613b0b57613b0b6147ed565b1a60f81b828281518110613b2157613b216147ed565b60200101906001600160f81b031916908160001a90535060049490941c93613b4881614ce9565b9050613ada565b50831561101b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610eef565b60006001600160e01b0319821663780e9d6360e01b1480610d725750610d7282613fc4565b6000818152600183016020526040812054613c0a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d72565b506000610d72565b6000806000846001600160a01b031684604051613c2f9190614c7d565b6000604051808303816000865af19150503d8060008114613c6c576040519150601f19603f3d011682016040523d82523d6000602084013e613c71565b606091505b5091509150818015613c9b575080511580613c9b575080806020019051810190613c9b9190614749565b8015613cb057506001600160a01b0385163b15155b95945050505050565b60006001613cc684611840565b613cd0919061487e565b600083815260fc6020526040902054909150808214613d23576001600160a01b038416600090815260fb60209081526040808320858452825280832054848452818420819055835260fc90915290208190555b50600091825260fc602090815260408084208490556001600160a01b03909416835260fb81528383209183525290812055565b60fd54600090613d689060019061487e565b600083815260fe602052604081205460fd8054939450909284908110613d9057613d906147ed565b906000526020600020015490508060fd8381548110613db157613db16147ed565b600091825260208083209091019290925582815260fe909152604080822084905585825281205560fd805480613de957613de9614d00565b6001900381819060005260206000200160009055905550505050565b6000613e1083611840565b6001600160a01b03909316600090815260fb60209081526040808320868452825280832085905593825260fc9052919091209190915550565b60008181526001830160205260408120548015613f32576000613e6d60018361487e565b8554909150600090613e819060019061487e565b9050818114613ee6576000866000018281548110613ea157613ea16147ed565b9060005260206000200154905080876000018481548110613ec457613ec46147ed565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613ef757613ef7614d00565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d72565b6000915050610d72565b60606125238484600085614014565b60608315613fba578251600003613fb3576001600160a01b0385163b613fb35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610eef565b5081612523565b61252383836140e4565b60006001600160e01b031982166380ac58cd60e01b1480613ff557506001600160e01b03198216635b5e139f60e01b145b80610d7257506301ffc9a760e01b6001600160e01b0319831614610d72565b6060824710156140755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610eef565b600080866001600160a01b031685876040516140919190614c7d565b60006040518083038185875af1925050503d80600081146140ce576040519150601f19603f3d011682016040523d82523d6000602084013e6140d3565b606091505b50915091506119db87838387613f4b565b8151156140f45781518083602001fd5b8060405162461bcd60e51b8152600401610eef9190614218565b80356001600160a01b038116811461183b57600080fd5b60006020828403121561413757600080fd5b61101b8261410e565b6001600160e01b0319811681146112d357600080fd5b60006020828403121561416857600080fd5b813561101b81614140565b80151581146112d357600080fd5b60008060006060848603121561419657600080fd5b61419f8461410e565b92506141ad6020850161410e565b915060408401356141bd81614173565b809150509250925092565b60005b838110156141e35781810151838201526020016141cb565b50506000910152565b600081518084526142048160208601602086016141c8565b601f01601f19169290920160200192915050565b60208152600061101b60208301846141ec565b60006020828403121561423d57600080fd5b5035919050565b6000806040838503121561425757600080fd5b6142608361410e565b946020939093013593505050565b6000806040838503121561428157600080fd5b50508035926020909101359150565b600080600080600060a086880312156142a857600080fd5b6142b18661410e565b94506142bf6020870161410e565b93506142cd6040870161410e565b92506142db6060870161410e565b91506142e96080870161410e565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561432e5761432e6142f5565b60405290565b6040805190810167ffffffffffffffff8111828210171561432e5761432e6142f5565b600082601f83011261436857600080fd5b813567ffffffffffffffff80821115614383576143836142f5565b604051601f8301601f19908116603f011681019082821181831017156143ab576143ab6142f5565b816040528381528660208588010111156143c457600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156143f657600080fd5b813567ffffffffffffffff8082111561440e57600080fd5b9083019060a0828603121561442257600080fd5b61442a61430b565b6144338361410e565b81526144416020840161410e565b6020820152604083013560408201526060830135606082015260808301358281111561446c57600080fd5b92909201916040838703121561448157600080fd5b614489614334565b83358381111561449857600080fd5b6144a488828701614357565b8252506020840135838111156144b957600080fd5b6144c588828701614357565b602083015250608082015295945050505050565b6000806000606084860312156144ee57600080fd5b6144f78461410e565b92506145056020850161410e565b9150604084013590509250925092565b6000806040838503121561452857600080fd5b823591506145386020840161410e565b90509250929050565b6000806040838503121561455457600080fd5b61455d8361410e565b9150602083013561456d81614173565b809150509250929050565b6000806020838503121561458b57600080fd5b823567ffffffffffffffff808211156145a357600080fd5b818501915085601f8301126145b757600080fd5b8135818111156145c657600080fd5b8660208260051b85010111156145db57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561464257603f198886030184526146308583516141ec565b94509285019290850190600101614614565b5092979650505050505050565b6000806000806080858703121561466557600080fd5b61466e8561410e565b935061467c6020860161410e565b925060408501359150606085013567ffffffffffffffff81111561469f57600080fd5b6146ab87828801614357565b91505092959194509250565b600080604083850312156146ca57600080fd5b6146d38361410e565b91506145386020840161410e565b600080600080608085870312156146f757600080fd5b843593506147076020860161410e565b92506147156040860161410e565b9150606085013561472581614173565b939692955090935050565b60006020828403121561474257600080fd5b5051919050565b60006020828403121561475b57600080fd5b815161101b81614173565b600181811c9082168061477a57607f821691505b60208210810361479a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161482b5761482b614803565b5060010190565b8082028115828204841417610d7257610d72614803565b60008261486657634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610d7257610d72614803565b81810381811115610d7257610d72614803565b6000808335601e198436030181126148a857600080fd5b83018035915067ffffffffffffffff8211156148c357600080fd5b6020019150368190038213156148d857600080fd5b9250929050565b8284823760008382016000815283516148fc8183602088016141c8565b0195945050505050565b600083516149188184602088016141c8565b83519083019061492c8183602088016141c8565b01949350505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008151604084526149b960408501826141ec565b905060208301518482036020860152613cb082826141ec565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906119db908301846149a4565b600060408284031215614a1e57600080fd5b614a26614334565b82518152602083015160208201528091505092915050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60018060a01b038516815283602082015282604082015260806060820152600061380d60808301846149a4565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614b3a8160178501602088016141c8565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614b6b8160288401602088016141c8565b01602801949350505050565b601f821115610f9057600081815260208120601f850160051c81016020861015614b9e5750805b601f850160051c820191505b8181101561120757828155600101614baa565b815167ffffffffffffffff811115614bd757614bd76142f5565b614beb81614be58454614766565b84614b77565b602080601f831160018114614c205760008415614c085750858301515b600019600386901b1c1916600185901b178555611207565b600085815260208120601f198616915b82811015614c4f57888601518255948401946001909101908401614c30565b5085821015614c6d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251614c8f8184602087016141c8565b9190910192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061380d908301846141ec565b600060208284031215614cde57600080fd5b815161101b81614140565b600081614cf857614cf8614803565b506000190190565b634e487b7160e01b600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220356b9dd3da48895914df41696757e3650aef70aad784581311a5161041c82acf64736f6c63430008130033",
  "devdoc": {
    "author": "ZeroLend",
    "details": "Manages the minting and burning of NFT positions, which represent liquidity positions in a pool.",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BorrowIncreased(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of the asset that we want to borrow.",
          "asset": "The address of the asset that we want to borrow.",
          "tokenId": "The ID of the position token."
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "LiquidityIncreased(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of the asset that was added to the position.",
          "asset": "The address of the asset for which liquidity was increased.",
          "tokenId": "The ID of the position token."
        }
      },
      "Repay(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of asset that we want to repay",
          "asset": "The address of the asset that we want to repay.",
          "tokenId": "The ID of the NFT."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Withdrawal(address,uint256,uint256)": {
        "params": {
          "amount": "The amount of asset that we want to withdraw",
          "asset": "The address of the asset that we want to withdraw",
          "tokenId": "The ID of the NFT."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "boostedBalance(address,uint256)": {
        "details": "Calculates the boosted balance for an account.",
        "params": {
          "account": "The address of the account for which to calculate the boosted balance.",
          "balance": "The amount to boost."
        },
        "returns": {
          "_0": "The boosted balance of the account."
        }
      },
      "borrow((address,address,uint256,uint256,(bytes,bytes)))": {
        "params": {
          "params": "The params required for borrow the position which includes tokenId, market and amount"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address)": {
        "params": {
          "pool": "The pool to mint a position ID for"
        },
        "returns": {
          "tokenId": "The ID of the newly minted token."
        }
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "repay((address,address,uint256,uint256,(bytes,bytes)))": {
        "params": {
          "params": "The params required for repaying the position which includes tokenId, asset and amount."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supply((address,address,uint256,uint256,(bytes,bytes)))": {
        "params": {
          "params": "The parameters required for increase liquidity the position, including the token, pool, amount and asset."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "withdraw((address,address,uint256,uint256,(bytes,bytes)))": {
        "params": {
          "params": "The parameters required for withdrawing from the position, including tokenId, asset, and amount."
        }
      }
    },
    "title": "NFTPositionManager",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "BalanceMisMatch()": [
        {
          "notice": "Error indicating a mismatch in balance."
        }
      ],
      "NotPool()": [
        {
          "notice": "Error indicating that pool is not register in pool factory."
        }
      ],
      "NotTokenIdOwner()": [
        {
          "notice": "Error indicating that the caller is not the owner or approved operator of the token ID."
        }
      ],
      "PositionNotCleared()": [
        {
          "notice": "Error indicating that the position is not cleared."
        }
      ],
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Error indicating that a zero address was provided, which is not allowed."
        }
      ],
      "ZeroValueNotAllowed()": [
        {
          "notice": "Error indicating that a zero value was provided, which is not allowed."
        }
      ]
    },
    "events": {
      "LiquidityIncreased(address,uint256,uint256)": {
        "notice": "Emitted when liquidity is increased for a specific position token."
      }
    },
    "kind": "user",
    "methods": {
      "borrow((address,address,uint256,uint256,(bytes,bytes)))": {
        "notice": "Allow user to borrow the underlying assets"
      },
      "factory()": {
        "notice": "The pool factory contract that is used to create pools."
      },
      "initialize(address,address,address,address,address)": {
        "notice": "Initializes the NFTPositionManager contract."
      },
      "mint(address)": {
        "notice": "Mints a new NFT representing a liquidity position."
      },
      "repay((address,address,uint256,uint256,(bytes,bytes)))": {
        "notice": "Allow user to repay thier debt."
      },
      "rewardsToken()": {
        "notice": "The ERC20 token used for rewards."
      },
      "supply((address,address,uint256,uint256,(bytes,bytes)))": {
        "notice": "Allow User to increase liquidity in the postion"
      },
      "weth()": {
        "notice": "Address for the wrapped ether"
      },
      "withdraw((address,address,uint256,uint256,(bytes,bytes)))": {
        "notice": "Allow user to withdraw their underlying assets."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 780,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 783,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 957,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1026,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4898,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5078,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6003,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3028,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_name",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 3030,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_symbol",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 3034,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_owners",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3038,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_balances",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3042,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3048,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3950,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 4104,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4108,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4111,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_allTokens",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4115,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4459,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 174,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_roles",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)169_storage)"
      },
      {
        "astId": 481,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "351",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)7313_storage)"
      },
      {
        "astId": 144,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33291,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "factory",
        "offset": 0,
        "slot": "401",
        "type": "t_contract(IPoolFactory)39100"
      },
      {
        "astId": 33294,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_nextId",
        "offset": 0,
        "slot": "402",
        "type": "t_uint256"
      },
      {
        "astId": 33300,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_positions",
        "offset": 0,
        "slot": "403",
        "type": "t_mapping(t_uint256,t_struct(Position)38448_storage)"
      },
      {
        "astId": 33304,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "weth",
        "offset": 0,
        "slot": "404",
        "type": "t_contract(IWETH)39458"
      },
      {
        "astId": 33308,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "rewardsToken",
        "offset": 0,
        "slot": "405",
        "type": "t_contract(IERC20)14102"
      },
      {
        "astId": 33312,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "stakingToken",
        "offset": 0,
        "slot": "406",
        "type": "t_contract(IVotes)12331"
      },
      {
        "astId": 33318,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_poolAssetList",
        "offset": 0,
        "slot": "407",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 33322,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "408",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 33326,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "409",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 33330,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "periodFinish",
        "offset": 0,
        "slot": "410",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 33334,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "411",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 33338,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "rewardRate",
        "offset": 0,
        "slot": "412",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 33344,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "_balances",
        "offset": 0,
        "slot": "413",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 33350,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "414",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 33356,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "rewards",
        "offset": 0,
        "slot": "415",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 33358,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "maxBoostRequirement",
        "offset": 0,
        "slot": "416",
        "type": "t_uint256"
      },
      {
        "astId": 33360,
        "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "417",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)14102": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolFactory)39100": {
        "encoding": "inplace",
        "label": "contract IPoolFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IVotes)12331": {
        "encoding": "inplace",
        "label": "contract IVotes",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)39458": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)7313_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)7313_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)169_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)169_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Position)38448_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct INFTPositionManager.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)38448_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)7313_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 7312,
            "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6998_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Position)38448_storage": {
        "encoding": "inplace",
        "label": "struct INFTPositionManager.Position",
        "members": [
          {
            "astId": 38445,
            "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 38447,
            "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
            "label": "operator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)169_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 166,
            "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 168,
            "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6998_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 6993,
            "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6997,
            "contract": "contracts/core/positions/NFTPositionManager.sol:NFTPositionManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}