{
  "address": "0x987C6DE7A8FEf9398ED89F9C0d0506e103d1c5F2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_configurator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "configurator",
      "outputs": [
        {
          "internalType": "contract IPoolConfigurator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "contract IPoolConfigurator",
          "name": "_configurator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getAllRoles",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNftPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            }
          ],
          "internalType": "struct INFTPositionManager.Asset[]",
          "name": "assets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNftPositions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "healthFactor",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "debt",
                  "type": "uint256"
                }
              ],
              "internalType": "struct INFTPositionManager.Asset[]",
              "name": "assets",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "isBurnAllowed",
              "type": "bool"
            }
          ],
          "internalType": "struct UIHelper.NftPositions[]",
          "name": "positions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getPoolAssetConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "borrowable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "collateral",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "borrowCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationBonus",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ltv",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOnchain",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupplyOnchain",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "liquidityIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "liquidityRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "borrowIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "borrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint40",
              "name": "reserveLastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint256",
              "name": "debtShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyShares",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "underlyingBalance",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "debtAssets",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyAssets",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "latestPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct UIHelper.ReserveConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolFullConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hook",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proxyAdmin",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "emergencyAdmins",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "poolAdmins",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "riskAdmins",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "proxyRevoked",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "interestRateStrategy",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "oracle",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "borrowable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "collateral",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "frozen",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "borrowCap",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationBonus",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationThreshold",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ltv",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyCap",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balanceOnchain",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupplyOnchain",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidityIndex",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidityRate",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "borrowIndex",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "borrowRate",
                  "type": "uint128"
                },
                {
                  "internalType": "uint40",
                  "name": "reserveLastUpdateTimestamp",
                  "type": "uint40"
                },
                {
                  "internalType": "uint256",
                  "name": "debtShares",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyShares",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "underlyingBalance",
                  "type": "uint128"
                },
                {
                  "internalType": "uint256",
                  "name": "debtAssets",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyAssets",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "latestPrice",
                  "type": "uint256"
                }
              ],
              "internalType": "struct UIHelper.ReserveConfig[]",
              "name": "reserves",
              "type": "tuple[]"
            },
            {
              "internalType": "uint16",
              "name": "reservesCount",
              "type": "uint16"
            }
          ],
          "internalType": "struct UIHelper.PoolConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getPoolFullConfigByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hook",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proxyAdmin",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "emergencyAdmins",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "poolAdmins",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "riskAdmins",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "proxyRevoked",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "interestRateStrategy",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "oracle",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "borrowable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "collateral",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "frozen",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "borrowCap",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationBonus",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationThreshold",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ltv",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyCap",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balanceOnchain",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupplyOnchain",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidityIndex",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidityRate",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "borrowIndex",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "borrowRate",
                  "type": "uint128"
                },
                {
                  "internalType": "uint40",
                  "name": "reserveLastUpdateTimestamp",
                  "type": "uint40"
                },
                {
                  "internalType": "uint256",
                  "name": "debtShares",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyShares",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "underlyingBalance",
                  "type": "uint128"
                },
                {
                  "internalType": "uint256",
                  "name": "debtAssets",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyAssets",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "latestPrice",
                  "type": "uint256"
                }
              ],
              "internalType": "struct UIHelper.ReserveConfig[]",
              "name": "reserves",
              "type": "tuple[]"
            },
            {
              "internalType": "uint16",
              "name": "reservesCount",
              "type": "uint16"
            }
          ],
          "internalType": "struct UIHelper.PoolConfig[]",
          "name": "configs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract INFTPositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4801722e2e08c0da04b6f75534cc64a8eecb6878c7ce472f42c545d90b9282d",
  "receipt": {
    "to": null,
    "from": "0xd6593B44597D90110abf5F75386f071AB9Fac605",
    "contractAddress": "0x987C6DE7A8FEf9398ED89F9C0d0506e103d1c5F2",
    "transactionIndex": 23,
    "gasUsed": "2074334",
    "logsBloom": "0x
    "blockHash": "0x4a24712c5ea334b4c7faa5168bcd855dd0c5f30e4032bf679a4e4fb81842ce6f",
    "transactionHash": "0xb4801722e2e08c0da04b6f75534cc64a8eecb6878c7ce472f42c545d90b9282d",
    "logs": [],
    "blockNumber": 6862865,
    "cumulativeGasUsed": "5678976",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x368eEBB67577Ec504F62FC41888b1578d2ef7B71",
    "0x81D61F4530fdC0b2788E298d640dB5981e6Fe0EF",
    "0xB2D87B03c1046BD988801C12D78eE348cD564B1D"
  ],
  "numDeployments": 1,
  "solcInputHash": "95d84748b454ba387ab3866b78066cba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_configurator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"configurator\",\"outputs\":[{\"internalType\":\"contract IPoolConfigurator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"contract IPoolConfigurator\",\"name\":\"_configurator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getAllRoles\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNftPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTPositionManager.Asset[]\",\"name\":\"assets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNftPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"internalType\":\"struct INFTPositionManager.Asset[]\",\"name\":\"assets\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isBurnAllowed\",\"type\":\"bool\"}],\"internalType\":\"struct UIHelper.NftPositions[]\",\"name\":\"positions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getPoolAssetConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"borrowable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"collateral\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOnchain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyOnchain\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"borrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"reserveLastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"debtShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyShares\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"underlyingBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"debtAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct UIHelper.ReserveConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolFullConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxyAdmin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"emergencyAdmins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolAdmins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"riskAdmins\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"proxyRevoked\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"borrowable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"collateral\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOnchain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyOnchain\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"borrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"reserveLastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"debtShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyShares\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"underlyingBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"debtAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct UIHelper.ReserveConfig[]\",\"name\":\"reserves\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"reservesCount\",\"type\":\"uint16\"}],\"internalType\":\"struct UIHelper.PoolConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getPoolFullConfigByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxyAdmin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"emergencyAdmins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolAdmins\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"riskAdmins\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"proxyRevoked\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"borrowable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"collateral\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOnchain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyOnchain\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"borrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"borrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"reserveLastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"debtShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyShares\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"underlyingBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"debtAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct UIHelper.ReserveConfig[]\",\"name\":\"reserves\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"reservesCount\",\"type\":\"uint16\"}],\"internalType\":\"struct UIHelper.PoolConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract INFTPositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBalances(address,address[])\":{\"details\":\"If the token address is 0x0, it will return the balance of the user in ETH\",\"params\":{\"tokens\":\"The tokens to get the balances for\",\"user\":\"The user to get the balances for\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBalances(address,address[])\":{\"notice\":\"Returns the balances of the user for the given tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/ui-helpers/UIHelper.sol\":\"UIHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/core/pool/configuration/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    // stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    // the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    // the current supply rate. Expressed in ray\\n    uint128 liquidityRate;\\n    // borrow index. Expressed in ray\\n    uint128 borrowIndex;\\n    // the current borrow rate. Expressed in ray\\n    uint128 borrowRate;\\n    // timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    // the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    // address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    // address of the oracle\\n    address oracle;\\n    // the current treasury balance in shares\\n    uint256 accruedToTreasuryShares;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    // bit 0-15: LTV\\n    // bit 16-31: Liq. threshold\\n    // bit 32-47: Liq. bonus\\n    // bit 48-55: Decimals\\n    // bit 56: reserve is active\\n    // bit 57: reserve is frozen\\n    // bit 58: borrowing is enabled\\n    // bit 59: stable rate borrowing enabled\\n    // bit 60: asset is paused\\n    // bit 61: borrowing in isolation mode is enabled\\n    // bit 62: siloed borrowing enabled\\n    // bit 63: flashloaning enabled\\n    // bit 64-79: reserve factor\\n    // bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    // bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    // bit 152-167 liquidation protocol fee\\n    // bit 168-175 eMode category\\n    // bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    // bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    // bit 252-255 unused\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct ReserveCache {\\n    ReserveConfigurationMap reserveConfiguration;\\n    uint128 currBorrowIndex;\\n    uint128 currLiquidityIndex;\\n    uint128 nextBorrowIndex;\\n    uint128 nextLiquidityIndex;\\n    uint256 currBorrowRate;\\n    uint256 currDebtShares;\\n    uint256 currLiquidityRate;\\n    uint256 nextDebtShares;\\n    uint40 reserveLastUpdateTimestamp;\\n  }\\n\\n  struct PositionBalance {\\n    uint128 lastDebtLiquidtyIndex;\\n    uint128 lastSupplyLiquidtyIndex;\\n    uint256 debtShares;\\n    uint256 supplyShares;\\n  }\\n\\n  struct ReserveSupplies {\\n    uint256 debtShares;\\n    uint256 supplyShares;\\n    uint128 underlyingBalance;\\n  }\\n\\n  struct SharesType {\\n    uint256 shares;\\n    uint256 assets;\\n  }\\n\\n  struct ExtraData {\\n    bytes hookData;\\n    bytes interestRateData;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    address collateralAsset;\\n    address debtAsset;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 debtToCover;\\n    uint256 reserveFactor;\\n    uint256 reservesCount;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address pool;\\n    address user;\\n    address destination;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n    uint256 reservesCount;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    address pool;\\n    address user;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    address destination;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address asset;\\n    address receiverAddress;\\n    bytes params;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    address asset;\\n    address pool;\\n    address receiverAddress;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n    uint256 totalPremium;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    address pool;\\n    bytes32 position;\\n    // uint256 reservesCount;\\n    UserConfigurationMap userConfig;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    address asset;\\n    address pool;\\n    bytes32 position;\\n    ReserveCache cache;\\n    uint256 amount;\\n    uint256 reservesCount;\\n    UserConfigurationMap userConfig;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 healthFactor;\\n    uint256 totalDebt;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    address reserve;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 reserveFactor;\\n    uint256 totalDebt;\\n  }\\n\\n  struct InitReserveConfig {\\n    bool borrowable;\\n    bool frozen;\\n    uint256 borrowCap;\\n    uint256 decimals;\\n    uint256 liquidationBonus;\\n    uint256 liquidationThreshold;\\n    uint256 ltv;\\n    uint256 supplyCap;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address interestRateStrategyAddress;\\n    address oracle;\\n    InitReserveConfig configuration;\\n    uint16 reservesCount;\\n  }\\n\\n  struct InitPoolParams {\\n    address hook;\\n    address[] assets;\\n    address[] rateStrategyAddresses;\\n    address[] sources;\\n    DataTypes.InitReserveConfig[] configurations;\\n  }\\n\\n  struct SeedPoolParams {\\n    address pool;\\n    address[] assets;\\n    uint256[] amounts;\\n  }\\n}\\n\",\"keccak256\":\"0xcd3be10cf2b12f37eb1b4e86242dcfbb65a3297773f9da316d553fe1ce18abde\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {PoolErrorsLib} from '../../../interfaces/errors/PoolErrorsLib.sol';\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n *\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n  uint256 internal constant LTV_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_BONUS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n  uint256 internal constant DECIMALS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FLASHLOAN_ENABLED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROW_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SUPPLY_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n  uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n\\n  uint256 internal constant MAX_VALID_LTV = 65_535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65_535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65_535;\\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65_535;\\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68_719_476_735;\\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68_719_476_735;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65_535;\\n\\n  uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n  /**\\n   * @notice Sets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @param ltv The new ltv\\n   */\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n    require(ltv <= MAX_VALID_LTV, PoolErrorsLib.INVALID_LTV);\\n    self.data = (self.data & LTV_MASK) | ltv;\\n  }\\n\\n  /**\\n   * @notice Gets the Loan to Value of the reserve\\n   * @dev If the asset is frozen, then the LTV is set to 0\\n   * @param self The reserve configuration\\n   * @return The loan to value\\n   */\\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    bool frozen = (self.data & ~FROZEN_MASK) != 0;\\n    return frozen ? 0 : self.data & ~LTV_MASK;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @param threshold The new liquidation threshold\\n   */\\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, PoolErrorsLib.INVALID_LIQ_THRESHOLD);\\n\\n    self.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation threshold\\n   */\\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @param bonus The new liquidation bonus\\n   */\\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, PoolErrorsLib.INVALID_LIQ_BONUS);\\n\\n    self.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation bonus\\n   */\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @param decimals The decimals\\n   */\\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\\n    require(decimals <= MAX_VALID_DECIMALS, PoolErrorsLib.INVALID_DECIMALS);\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @return The decimals of the asset\\n   */\\n  function getDecimals(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @param frozen The frozen state\\n   */\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n    self.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @return The frozen state\\n   */\\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\n   */\\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n    self.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrowing state\\n   */\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @param borrowCap The borrow cap\\n   */\\n  function setBorrowCap(DataTypes.ReserveConfigurationMap memory self, uint256 borrowCap) internal pure {\\n    require(borrowCap <= MAX_VALID_BORROW_CAP, PoolErrorsLib.INVALID_BORROW_CAP);\\n\\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrow cap\\n   */\\n  function getBorrowCap(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @param supplyCap The supply cap\\n   */\\n  function setSupplyCap(DataTypes.ReserveConfigurationMap memory self, uint256 supplyCap) internal pure {\\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, PoolErrorsLib.INVALID_SUPPLY_CAP);\\n\\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The supply cap\\n   */\\n  function getSupplyCap(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Gets the configuration flags of the reserve\\n   * @param self The reserve configuration\\n   * @return The state flag representing frozen\\n   * @return The state flag representing borrowing enabled\\n   */\\n  function getFlags(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool, bool) {\\n    uint256 dataLocal = self.data;\\n    return ((dataLocal & ~FROZEN_MASK) != 0, (dataLocal & ~BORROWING_MASK) != 0);\\n  }\\n\\n  /**\\n   * @notice Gets the configuration parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing ltv\\n   * @return The state param representing liquidation threshold\\n   * @return The state param representing liquidation bonus\\n   * @return The state param representing reserve decimals\\n   * @return The state param representing reserve factor\\n   */\\n  function getParams(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      dataLocal & ~LTV_MASK,\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xd44f5c4ca8c5a0b9cc1bcc9ea084db3c0c0990b7ef1c832fc1b149f473a8c3d5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\ninterface IAggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x6422549dac8d980bcd7f2f40a4f570834fee38827b384a077a9f306d4006db1c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IHook.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\n\\ninterface IHook {\\n  function afterInitialize(address pool) external returns (bytes4);\\n\\n  function beforeSupply(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterSupply(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeWithdraw(DataTypes.ExecuteWithdrawParams memory params) external;\\n\\n  function afterWithdraw(DataTypes.ExecuteWithdrawParams memory params) external;\\n\\n  function beforeRepay(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterRepay(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeBorrow(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterBorrow(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeLiquidate(\\n    address liquidator,\\n    bytes32 position,\\n    address collateralAsset,\\n    address debtAsset,\\n    uint256 debtToCover,\\n    address pool,\\n    bytes calldata hookData\\n  ) external;\\n\\n  function afterLiquidate(\\n    address liquidator,\\n    bytes32 position,\\n    address collateralAsset,\\n    address debtAsset,\\n    uint256 debtToCover,\\n    address pool,\\n    bytes calldata hookData\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0a4ac719eece30dd83aa078e706a8e6a54f3f6f16c1e76472e89d82b8f17b100\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INFTPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\nimport {INFTRewardsDistributor} from './INFTRewardsDistributor.sol';\\n\\ninterface INFTPositionManager is INFTRewardsDistributor {\\n  /**\\n   * @notice Error indicating that the caller is not the owner or approved operator of the token ID.\\n   */\\n  error NotTokenIdOwner();\\n\\n  /**\\n   * @notice Error indicating that a zero address was provided, which is not allowed.\\n   */\\n  error ZeroAddressNotAllowed();\\n\\n  /**\\n   * @notice Error indicating that a zero value was provided, which is not allowed.\\n   */\\n  error ZeroValueNotAllowed();\\n\\n  /**\\n   * @notice Error indicating a mismatch in balance.\\n   */\\n  error BalanceMisMatch();\\n\\n  /**\\n   * @notice Error indicating that the position is not cleared.\\n   */\\n  error PositionNotCleared();\\n\\n  /**\\n   * @notice Error indicating that pool is not register in pool factory.\\n   */\\n  error NotPool();\\n\\n  /**\\n   *\\n   * @param asset The address of the asset that we want to borrow.\\n   * @param tokenId  The ID of the position token.\\n   * @param amount The amount of the asset that we want to borrow.\\n   */\\n  event BorrowIncreased(address indexed asset, uint256 indexed amount, uint256 indexed tokenId);\\n\\n  /**\\n   *\\n   * @param asset The address of the asset that we want to withdraw\\n   * @param amount The amount of asset that we want to withdraw\\n   * @param tokenId The ID of the NFT.\\n   *\\n   */\\n  event Withdrawal(address indexed asset, uint256 indexed amount, uint256 tokenId);\\n\\n  /**\\n   *\\n   * @param asset The address of the asset that we want to repay.\\n   * @param tokenId The ID of the NFT.\\n   * @param amount The amount of asset that we want to repay\\n   */\\n  event Repay(address indexed asset, uint256 indexed tokenId, uint256 indexed amount);\\n\\n  /**\\n   * @notice Emitted when liquidity is increased for a specific position token.\\n   * @param asset The address of the asset for which liquidity was increased.\\n   * @param tokenId The ID of the position token.\\n   * @param amount The amount of the asset that was added to the position.\\n   */\\n  event LiquidityIncreased(address indexed asset, uint256 indexed tokenId, uint256 indexed amount);\\n\\n  /**\\n   * @notice Parameters required for minting a new position token.\\n   * @param asset The address of the asset to be supplied.\\n   * @param pool The address of the pool where the asset will be supplied.\\n   * @param amount The amount of the asset to be supplied.\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  struct MintParams {\\n    address asset;\\n    address pool;\\n    uint256 amount;\\n    DataTypes.ExtraData data;\\n  }\\n\\n  /**\\n   * @notice Parameters required for handling liquidity operations.\\n   * @param asset The address of the asset involved in the operation.\\n   * @param pool The address of the pool where the operation is being performed.\\n   * @param user The address of the user performing the operation.\\n   * @param amount The amount of the asset involved in the operation.\\n   * @param tokenId The ID of the position token related to the operation.\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  struct LiquidityParams {\\n    address asset;\\n    address pool;\\n    uint256 amount;\\n    uint256 tokenId;\\n    // bytes32 positionId;\\n    DataTypes.ExtraData data;\\n  }\\n\\n  /**\\n   * @notice Structure representing an asset in a user's position.\\n   * @param asset The address of the asset.\\n   * @param balance The balance of the asset in the position.\\n   * @param debt The debt of the asset in the position.\\n   */\\n  struct Asset {\\n    address asset;\\n    uint256 balance;\\n    uint256 debt;\\n  }\\n\\n  /**\\n   * @notice Structure representing a user's position, including assets, pool, and operator.\\n   * @param pool The address of the pool associated with the position.\\n   * @param operator The address of the operator managing the position.\\n   */\\n  struct Position {\\n    address pool;\\n    address operator;\\n  }\\n\\n  /**\\n   * @notice Parameters required for various asset operations (add liquidity, borrow, repay, withdraw) against a position.\\n   * @param asset The address of the asset involved in the operation.\\n   * @param target Optional argument. For withdraw it is the address of the user receiving the asset.\\n   * @param amount The amount of the asset involved in the operation.\\n   * @param tokenId The ID of the position token involved in the operation.\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  struct AssetOperationParams {\\n    address asset;\\n    address target;\\n    uint256 amount;\\n    uint256 tokenId;\\n    DataTypes.ExtraData data;\\n  }\\n\\n  /**\\n   * @notice Initializes the NFTPositionManager contract.\\n   */\\n  function initialize(address _factory, address _staking, address _owner, address _zero, address _weth) external;\\n\\n  /**\\n   * @notice Mints a new NFT representing a liquidity position.\\n   * @param pool The pool to mint a position ID for\\n   * @return tokenId The ID of the newly minted token.\\n   * @custom:error ZeroAddressNotAllowed error thrown if asset address is zero address.\\n   * @custom:error ZeroValueNotAllowed error thrown if the  amount is zero.\\n   */\\n  function mint(address pool) external returns (uint256 tokenId);\\n\\n  /**\\n   * @notice Allow User to increase liquidity in the postion\\n   * @param params  The parameters required for increase liquidity the position, including the token, pool, amount and asset.\\n   * @custom:error ZeroAddressNotAllowed error thrown if asset address is zero address.\\n   * @custom:error ZeroValueNotAllowed error thrown if the  amount is zero.\\n   */\\n  function supply(AssetOperationParams memory params) external;\\n\\n  /**\\n   * @notice Allow user to borrow the underlying assets\\n   * @param params The params required for borrow the position which includes tokenId, market and amount\\n   * @custom:error ZeroAddressNotAllowed error thrown asset address is zero address.\\n   * @custom:error ZeroValueNotAllowed error thrown if the  amount is zero.\\n   * @custom:error BalanceMisMatch error thrown if difference of currentDebtBalance and previousDebtBalance is not equal to amount\\n   * @custom:event BorrowIncreased emitted whenever user borrows asset\\n   */\\n  function borrow(AssetOperationParams memory params) external;\\n\\n  /**\\n   * @notice Allow user to withdraw their underlying assets.\\n   * @param params The parameters required for withdrawing from the position, including tokenId, asset, and amount.\\n   * @custom:error ZeroAddressNotAllowed error thrown if asset or user address is zero address.\\n   * @custom:error ZeroValueNotAllowed error thrown if the  amount is zero.\\n   * @custom:error BalanceMisMatch error thrown if difference of previousSupplyBalance currentSupplyBalance and  is not equal to amount\\n   * @custom:event Withdrawal emitted whenever user withdraws asset\\n   */\\n  function withdraw(AssetOperationParams memory params) external;\\n\\n  /**\\n   * @notice Allow user to repay thier debt.\\n   * @param params The params required for repaying the position which includes tokenId, asset and amount.\\n   * @custom:error ZeroAddressNotAllowed error thrown if asset address is zero address.\\n   * @custom:error ZeroValueNotAllowed error thrown if the  amount is zero.\\n   * @custom:error BalanceMisMatch error thrown if difference of previousDebtBalance currentDebtBalance and is not equal to amount\\n   * @custom:event Repay emitted whenever user repays asset\\n   */\\n  function repay(AssetOperationParams memory params) external;\\n\\n  function positions(uint256 tokenId) external view returns (Position memory);\\n\\n  /**\\n   *\\n   */\\n  function repayETH(AssetOperationParams memory params) external payable;\\n\\n  /**\\n   *\\n   */\\n  function borrowETH(AssetOperationParams memory params) external payable;\\n\\n  /**\\n   *\\n   */\\n  function supplyETH(AssetOperationParams memory params) external payable;\\n\\n  /**\\n   *\\n   */\\n  function withdrawETH(AssetOperationParams memory params) external payable;\\n\\n  function sweep(address token) external;\\n}\\n\",\"keccak256\":\"0xc2d9f854157070fa688219966e628b12c46b548c27c93f7c9e962912964f44d2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INFTRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IERC721EnumerableUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol';\\n\\n/**\\n * @title INFTRewardsDistributor\\n * @notice Defines the basic interface for a Rewards Distributor.\\n */\\ninterface INFTRewardsDistributor is IERC721EnumerableUpgradeable {\\n  event RewardAdded(bytes32 indexed assetHash, uint256 indexed reward);\\n  event Staked(address indexed user, uint256 amount);\\n  event Withdrawn(address indexed user, uint256 amount);\\n  event RewardPaid(uint256 indexed tokenId, address indexed user, uint256 reward);\\n  event RewardsDurationUpdated(uint256 newDuration);\\n  event Recovered(address token, uint256 amount);\\n\\n  // IERC20 external rewardsToken;\\n  // mapping(bytes32 assetHash => uint256) external lastUpdateTime;\\n  // mapping(bytes32 assetHash => uint256) external periodFinish;\\n  // mapping(bytes32 assetHash => uint256) external rewardPerTokenStored;\\n  // mapping(bytes32 assetHash => uint256) external rewardRate;\\n  // mapping(uint256 tokenId => mapping(bytes32 assetHash => uint256 rewards)) external rewards;\\n\\n  // uint256 external rewardsDuration;\\n\\n  function totalSupplyAssetForRewards(bytes32 _assetHash) external view returns (uint256);\\n\\n  function balanceOfByAssetHash(uint256 tokenId, bytes32 _assetHash) external view returns (uint256);\\n\\n  function lastTimeRewardApplicable(bytes32 _assetHash) external view returns (uint256);\\n\\n  function rewardPerToken(bytes32 _assetHash) external view returns (uint256);\\n\\n  function earned(uint256 tokenId, bytes32 _assetHash) external view returns (uint256);\\n\\n  function getRewardForDuration(bytes32 _assetHash) external view returns (uint256);\\n\\n  /**\\n   * @dev Calculates the boosted balance for an account.\\n   * @param account The address of the account for which to calculate the boosted balance.\\n   * @param balance The amount to boost.\\n   * @return The boosted balance of the account.\\n   */\\n  function boostedBalance(address account, uint256 balance) external view returns (uint256);\\n\\n  function notifyRewardAmount(uint256 reward, address pool, address asset, bool isDebt) external;\\n\\n  function assetHash(address pool, address asset, bool isDebt) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb6ed07889b94456eaa014791e975350ded0d9e5f74fb26899aad19d8121411ea\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\n\\nimport {IPoolManager} from './IPoolManager.sol';\\nimport {IPool} from './pool/IPool.sol';\\n\\n/**\\n * @title IPoolConfigurator\\n * @notice Defines the basic interface for a Pool configurator.\\n */\\ninterface IPoolConfigurator is IPoolManager {\\n  /**\\n   * @dev Emitted when borrowing is enabled or disabled on a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if borrowing is enabled, false otherwise\\n   */\\n  event ReserveBorrowing(address indexed asset, bool enabled);\\n\\n  /**\\n   * @dev Emitted when a reserve is frozen or unfrozen\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param frozen True if reserve is frozen, false otherwise\\n   */\\n  event ReserveFrozen(address indexed asset, bool frozen);\\n\\n  /**\\n   * @dev Emitted when a reserve factor is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldReserveFactor The old reserve factor, expressed in bps\\n   * @param newReserveFactor The new reserve factor, expressed in bps\\n   */\\n  event ReserveFactorChanged(address indexed asset, uint256 oldReserveFactor, uint256 newReserveFactor);\\n\\n  /**\\n   * @dev Emitted when the borrow cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldBorrowCap The old borrow cap\\n   * @param newBorrowCap The new borrow cap\\n   */\\n  event BorrowCapChanged(address indexed asset, uint256 oldBorrowCap, uint256 newBorrowCap);\\n\\n  /**\\n   * @dev Emitted when the supply cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldSupplyCap The old supply cap\\n   * @param newSupplyCap The new supply cap\\n   */\\n  event SupplyCapChanged(address indexed asset, uint256 oldSupplyCap, uint256 newSupplyCap);\\n\\n  /**\\n   * @dev Emitted when a reserve interest strategy contract is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldStrategy The address of the old interest strategy contract\\n   * @param newStrategy The address of the new interest strategy contract\\n   */\\n  event ReserveInterestRateStrategyChanged(address indexed asset, address oldStrategy, address newStrategy);\\n\\n  /**\\n   * @notice Configures borrowing on a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if borrowing needs to be enabled, false otherwise\\n   */\\n  function setReserveBorrowing(IPool pool, address asset, bool enabled) external;\\n\\n  /**\\n   * @notice Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow\\n   * or rate swap but allows repayments, liquidations, rate rebalances and withdrawals.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param freeze True if the reserve needs to be frozen, false otherwise\\n   */\\n  function setReserveFreeze(IPool pool, address asset, bool freeze) external;\\n\\n  function initRoles(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Sets the interest rate strategy of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newRateStrategyAddress The address of the new interest strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(IPool pool, address asset, address newRateStrategyAddress) external;\\n\\n  /**\\n   * @notice Freezes the pool reserves. In the frozen state only withdraw and repay can be done\\n   * @param freeze True if protocol needs to be frozen, false otherwise\\n   */\\n  function setPoolFreeze(IPool pool, bool freeze) external;\\n\\n  /**\\n   * @notice Updates the borrow cap of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newBorrowCap The new borrow cap of the reserve\\n   */\\n  function setBorrowCap(IPool pool, address asset, uint256 newBorrowCap) external;\\n\\n  /**\\n   * @notice Updates the supply cap of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newSupplyCap The new supply cap of the reserve\\n   */\\n  function setSupplyCap(IPool pool, address asset, uint256 newSupplyCap) external;\\n\\n  function getPoolAssetConfiguration(IPool pool, address asset) external view returns (DataTypes.InitReserveConfig memory config);\\n\\n  function getPoolFullConfig(IPool pool) external view returns (DataTypes.InitPoolParams memory config);\\n}\\n\",\"keccak256\":\"0x8e4349bdbcd95e96d8d7c480dd783140d9b6eabd6437784ffc4783f20533daf1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\n\\nimport {IPoolConfigurator} from './IPoolConfigurator.sol';\\nimport {IPool} from './pool/IPool.sol';\\nimport {IBeacon} from '@openzeppelin/contracts/proxy/beacon/IBeacon.sol';\\n\\ninterface IPoolFactory is IBeacon {\\n  event PoolCreated(IPool indexed pool, uint256 indexed index, address indexed creator, DataTypes.InitPoolParams params);\\n  event ImplementationUpdated(address indexed old, address indexed updated, address owner);\\n  event TreasuryUpdated(address indexed old, address indexed updated, address owner);\\n  event ReserveFactorUpdated(uint256 indexed old, uint256 indexed updated, address owner);\\n  event ConfiguratorUpdated(address indexed old, address indexed updated, address owner);\\n  event FlashLoanPremiumToProtocolUpdated(uint256 indexed old, uint256 indexed updated, address owner);\\n\\n  function configurator() external view returns (IPoolConfigurator);\\n\\n  function createPool(DataTypes.InitPoolParams memory params) external returns (IPool pool);\\n\\n  function setConfigurator(address impl) external;\\n\\n  function flashLoanPremiumToProtocol() external view returns (uint256);\\n\\n  function liquidationProtocolFeePercentage() external view returns (uint256);\\n\\n  function pools(uint256 index) external view returns (IPool);\\n\\n  function isPool(address pool) external view returns (bool);\\n\\n  function poolsLength() external view returns (uint256);\\n\\n  function reserveFactor() external view returns (uint256);\\n\\n  function setFlashloanPremium(uint256 updated) external;\\n\\n  function setImplementation(address updated) external;\\n\\n  function setReserveFactor(uint256 updated) external;\\n\\n  function setTreasury(address updated) external;\\n\\n  function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8cfd445d081cd96b0634e4efd787b8e13177728c4ad5b17e69b268cd21527aff\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IPool} from './pool/IPool.sol';\\nimport {IAccessControlEnumerable} from '@openzeppelin/contracts/access/IAccessControlEnumerable.sol';\\n\\n/**\\n * @title IPoolManager\\n * @notice Defines the basic interface for the ACL Manager\\n */\\ninterface IPoolManager is IAccessControlEnumerable {\\n  /**\\n   * @notice Returns the identifier of the PoolAdmin role\\n   * @return The id of the PoolAdmin role\\n   */\\n  function POOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the EmergencyAdmin role\\n   * @return The id of the EmergencyAdmin role\\n   */\\n  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the RiskAdmin role\\n   * @return The id of the RiskAdmin role\\n   */\\n  function RISK_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Adds a new admin as PoolAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addPoolAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as PoolAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removePoolAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is PoolAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is PoolAdmin, false otherwise\\n   */\\n  function isPoolAdmin(IPool pool, address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as EmergencyAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addEmergencyAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as EmergencyAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeEmergencyAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is EmergencyAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is EmergencyAdmin, false otherwise\\n   */\\n  function isEmergencyAdmin(IPool pool, address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as RiskAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addRiskAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as RiskAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeRiskAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is RiskAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is RiskAdmin, false otherwise\\n   */\\n  function isRiskAdmin(IPool pool, address admin) external view returns (bool);\\n\\n  function getRoleFromPool(IPool pool, bytes32 role) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6ab16c8e6e3a1ae1792bd03aaba0c457090609e5ef053ebc71d3a48dbee56314\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRevokableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {Proxy} from '@openzeppelin/contracts/proxy/Proxy.sol';\\nimport {IBeacon} from '@openzeppelin/contracts/proxy/beacon/IBeacon.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport {StorageSlot} from '@openzeppelin/contracts/utils/StorageSlot.sol';\\n\\ninterface IRevokableBeaconProxy {\\n  // todo add events for admin and implementation changes\\n  event ImplementationRevoked(address indexed implementation, address indexed admin);\\n  event BeaconUpdated(address indexed newBeacon, address indexed oldBeacon, address sender);\\n  event AdminUpdated(address indexed newAdmin, address indexed oldAdmin, address sender);\\n\\n  /**\\n   * @notice Transfer the ownership of the proxy to another address\\n   * @dev Can only be called by the proxy admin\\n   * @param newAdmin The new admin to transfer ownership to\\n   */\\n  function setAdmin(address newAdmin) external;\\n\\n  /**\\n   * @notice Revokes the beacon's ability to upgrade this contract and forver seals the implementation\\n   * into the code forever.\\n   * @dev Can only be called by the proxy admin\\n   */\\n  function revokeBeacon() external;\\n\\n  /**\\n   * @notice Revoke the beacon's admin\\n   * @dev Can only be called by the proxy admin\\n   */\\n  function revokeAdmin() external;\\n\\n  /**\\n   * @notice Returns the implementation of the current proxy\\n   * @return The proxy's current implementation\\n   */\\n  function implementation() external view returns (address);\\n\\n  function admin() external view returns (address);\\n\\n  function beacon() external view returns (address);\\n\\n  /**\\n   * @notice Checks if the beacon is revoked in which case the contract is as good as immutable.\\n   * @dev The revoked implementation address can be found in the `implementation()` call.\\n   * @return revoked True iff the beacon has been revoked.\\n   */\\n  function isBeaconRevoked() external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0x32de1ed4f0640ab7661f5dcb6f95805cf9d67bf5417b1c5fba708e3e0d9df070\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/errors/PoolErrorsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\n/**\\n * @title PoolErrorsLib\\n * @notice Defines the errors for a ZeroLend Pool.\\n */\\nlibrary PoolErrorsLib {\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = 'ACL_ADMIN_CANNOT_BE_ZERO';\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = 'ADDRESSES_PROVIDER_ALREADY_ADDED';\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = 'ADDRESSES_PROVIDER_NOT_REGISTERED';\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = 'AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE';\\n  string public constant ASSET_NOT_LISTED = 'ASSET_NOT_LISTED';\\n  string public constant BORROW_CAP_EXCEEDED = 'BORROW_CAP_EXCEEDED';\\n  string public constant BORROWING_NOT_ENABLED = 'BORROWING_NOT_ENABLED';\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = 'BRIDGE_PROTOCOL_FEE_INVALID';\\n  string public constant CALLER_MUST_BE_POOL = 'CALLER_MUST_BE_POOL';\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = 'CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN';\\n  string public constant CALLER_NOT_ATOKEN = 'CALLER_NOT_ATOKEN';\\n  string public constant CALLER_NOT_BRIDGE = 'CALLER_NOT_BRIDGE';\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = 'CALLER_NOT_EMERGENCY_ADMIN';\\n  string public constant CALLER_NOT_POOL_ADMIN = 'CALLER_NOT_POOL_ADMIN';\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = 'CALLER_NOT_POOL_CONFIGURATOR';\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = 'CALLER_NOT_POOL_OR_EMERGENCY_ADMIN';\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = 'CALLER_NOT_RISK_OR_POOL_ADMIN';\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = 'COLLATERAL_BALANCE_IS_ZERO';\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = 'COLLATERAL_CANNOT_BE_LIQUIDATED';\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = 'COLLATERAL_CANNOT_COVER_NEW_BORROW';\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = 'COLLATERAL_SAME_AS_BORROWING_CURRENCY';\\n  string public constant DEBT_CEILING_EXCEEDED = 'DEBT_CEILING_EXCEEDED';\\n  string public constant DEBT_CEILING_NOT_ZERO = 'DEBT_CEILING_NOT_ZERO';\\n  string public constant FLASHLOAN_DISABLED = 'FLASHLOAN_DISABLED';\\n  string public constant FLASHLOAN_PREMIUM_INVALID = 'FLASHLOAN_PREMIUM_INVALID';\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = 'HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD';\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = 'HEALTH_FACTOR_NOT_BELOW_THRESHOLD';\\n  string public constant INCONSISTENT_EMODE_CATEGORY = 'INCONSISTENT_EMODE_CATEGORY';\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = 'INCONSISTENT_FLASHLOAN_PARAMS';\\n  string public constant INCONSISTENT_PARAMS_LENGTH = 'INCONSISTENT_PARAMS_LENGTH';\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = 'INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET';\\n  string public constant INVALID_ADDRESSES_PROVIDER = 'INVALID_ADDRESSES_PROVIDER';\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = 'INVALID_ADDRESSES_PROVIDER_ID';\\n  string public constant INVALID_AMOUNT = 'INVALID_AMOUNT';\\n  string public constant INVALID_BORROW_CAP = 'INVALID_BORROW_CAP';\\n  string public constant INVALID_BURN_AMOUNT = 'INVALID_BURN_AMOUNT';\\n  string public constant INVALID_DEBT_CEILING = 'INVALID_DEBT_CEILING';\\n  string public constant INVALID_DECIMALS = 'INVALID_DECIMALS';\\n  string public constant INVALID_EMODE_CATEGORY = 'INVALID_EMODE_CATEGORY';\\n  string public constant INVALID_EXPIRATION = 'INVALID_EXPIRATION';\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = 'INVALID_FLASHLOAN_EXECUTOR_RETURN';\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = 'INVALID_INTEREST_RATE_MODE_SELECTED';\\n  string public constant INVALID_LIQ_BONUS = 'INVALID_LIQ_BONUS';\\n  string public constant INVALID_LIQ_THRESHOLD = 'INVALID_LIQ_THRESHOLD';\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = 'INVALID_LIQUIDATION_PROTOCOL_FEE';\\n  string public constant INVALID_LTV = 'INVALID_LTV';\\n  string public constant INVALID_MINT_AMOUNT = 'INVALID_MINT_AMOUNT';\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = 'INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO';\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = 'INVALID_OPTIMAL_USAGE_RATIO';\\n  string public constant INVALID_RESERVE_FACTOR = 'INVALID_RESERVE_FACTOR';\\n  string public constant INVALID_RESERVE_INDEX = 'INVALID_RESERVE_INDEX';\\n  string public constant INVALID_RESERVE_PARAMS = 'INVALID_RESERVE_PARAMS';\\n  string public constant INVALID_SIGNATURE = 'INVALID_SIGNATURE';\\n  string public constant INVALID_SUPPLY_CAP = 'INVALID_SUPPLY_CAP';\\n  string public constant INVALID_UNBACKED_MINT_CAP = 'INVALID_UNBACKED_MINT_CAP';\\n  string public constant LTV_VALIDATION_FAILED = 'LTV_VALIDATION_FAILED';\\n  string public constant LTV_ZERO = 'LTV_ZERO';\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = 'NO_DEBT_OF_SELECTED_TYPE';\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = 'NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF';\\n  string public constant NO_MORE_RESERVES_ALLOWED = 'NO_MORE_RESERVES_ALLOWED';\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = 'NO_OUTSTANDING_STABLE_DEBT';\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = 'NO_OUTSTANDING_VARIABLE_DEBT';\\n  string public constant NOT_CONTRACT = 'NOT_CONTRACT';\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = 'NOT_ENOUGH_AVAILABLE_USER_BALANCE';\\n  string public constant OPERATION_NOT_SUPPORTED = 'OPERATION_NOT_SUPPORTED';\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = 'POOL_ADDRESSES_DO_NOT_MATCH';\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = 'PRICE_ORACLE_SENTINEL_CHECK_FAILED';\\n  string public constant RESERVE_ALREADY_ADDED = 'RESERVE_ALREADY_ADDED';\\n  string public constant RESERVE_ALREADY_INITIALIZED = 'RESERVE_ALREADY_INITIALIZED';\\n  string public constant RESERVE_DEBT_NOT_ZERO = 'RESERVE_DEBT_NOT_ZERO';\\n  string public constant RESERVE_FROZEN = 'RESERVE_FROZEN';\\n  string public constant RESERVE_INACTIVE = 'RESERVE_INACTIVE';\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = 'RESERVE_LIQUIDITY_NOT_ZERO';\\n  string public constant RESERVE_PAUSED = 'RESERVE_PAUSED';\\n  string public constant SILOED_BORROWING_VIOLATION = 'SILOED_BORROWING_VIOLATION';\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = 'SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER';\\n  string public constant STABLE_BORROWING_ENABLED = 'STABLE_BORROWING_ENABLED';\\n  string public constant STABLE_BORROWING_NOT_ENABLED = 'STABLE_BORROWING_NOT_ENABLED';\\n  string public constant STABLE_DEBT_NOT_ZERO = 'STABLE_DEBT_NOT_ZERO';\\n  string public constant SUPPLY_CAP_EXCEEDED = 'SUPPLY_CAP_EXCEEDED';\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = 'UNBACKED_MINT_CAP_EXCEEDED';\\n  string public constant UNDERLYING_BALANCE_ZERO = 'UNDERLYING_BALANCE_ZERO';\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = 'UNDERLYING_CANNOT_BE_RESCUED';\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = 'UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO';\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = 'VARIABLE_DEBT_SUPPLY_NOT_ZERO';\\n  string public constant ZERO_ADDRESS_NOT_VALID = 'ZERO_ADDRESS_NOT_VALID';\\n}\\n\",\"keccak256\":\"0xe78549a3b3706e140af5c25ab4037cde13c30ceb722d323a1e589067e07c7d1a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\nimport {IPoolGetters} from './IPoolGetters.sol';\\nimport {IPoolSetters} from './IPoolSetters.sol';\\n\\n/**\\n * @title IPool\\n * @notice Defines the basic interface for a ZeroLend Pool.\\n */\\ninterface IPool is IPoolGetters, IPoolSetters {\\n  /**\\n   * Returns the version of the pool implementation\\n   * @return version The version of this pool's implementation\\n   */\\n  function revision() external view returns (uint256 version);\\n\\n  /**\\n   * @notice Initializes the pool with the given parameters. This call sets all the assets and their configs (LTV/LT/Oracle etc..)\\n   * in one call. Since assets once created cannot be changed, this has to be done within the initialize call itself.\\n   * @dev This is function is called by the factory contract.\\n   * @param params The init parameters for the pool. See {DataTypes-InitPoolParams}\\n   */\\n  function initialize(DataTypes.InitPoolParams memory params) external;\\n}\\n\",\"keccak256\":\"0x80bf54cfabd6068ff5ba19e97c92ce2904b01686fec26c2ba2866b7b5915c0e7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPoolGetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\nimport {IHook} from '../IHook.sol';\\nimport {IPoolFactory} from '../IPoolFactory.sol';\\n\\ninterface IPoolGetters {\\n  /**\\n   * @notice Get the balance of a specific asset in a specific position.\\n   * @param asset The address of the asset.\\n   * @param positionId The ID of the position.\\n   * @return balance The balance of the specified asset in the specified position.\\n   */\\n  function getBalanceByPosition(address asset, bytes32 positionId) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Get the balance of a specific asset for a user given a position index\\n   * @param asset The address of the asset.\\n   * @param who The user to find the balance of\\n   * @param index The index of the user's position\\n   * @return balance The balance of the specified asset for the given user and position idnex.\\n   */\\n  function getBalance(address asset, address who, uint256 index) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Get the debt of a specific asset for a user given a position index\\n   * @param asset The address of the asset.\\n   * @param who The user to find the debt of\\n   * @param index The index of the user's position\\n   * @return debt The debt of the specified asset for the given user and position idnex.\\n   */\\n  function getDebt(address asset, address who, uint256 index) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Get the debt of a specific asset in a specific position.\\n   * @param asset The address of the asset.\\n   * @param positionId The ID of the position.\\n   * @return debt The debt of the specified asset in the specified position.\\n   */\\n  function getDebtByPosition(address asset, bytes32 positionId) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Gets the reserve factor that this pool charges. The reserve factory is the percentage of\\n   * revenue that the pool shares with the governance.\\n   * @dev This parameter is immutable.\\n   * @return reseveFactor The amount of revenue that gets shared to governance.\\n   */\\n  function getReserveFactor() external view returns (uint256 reseveFactor);\\n\\n  /**\\n   * @notice The factory contract that created this contract\\n   */\\n  function factory() external view returns (IPoolFactory f);\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @param index The index of the user's position\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user,\\n    uint256 index\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @param index The index of the user's position\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(address user, uint256 index) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the number of initialized reserves\\n   * @return The count\\n   */\\n  function getReservesCount() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the current hook for the pool.\\n   * @dev The hook is immutable. Once it is set, it cannot be changed.\\n   * @return The hook for the pool, if set.\\n   */\\n  function getHook() external view returns (IHook);\\n\\n  /**\\n   * @notice Gets the raw balance object for the asset for a given position id\\n   */\\n  function getBalanceRawByPositionId(address asset, bytes32 positionId) external view returns (DataTypes.PositionBalance memory);\\n\\n  /**\\n   * @notice Gets the raw balance object for the asset for a given user and the position index.\\n   * @param asset The address of the asset\\n   * @param who The address of the user\\n   * @param index The index of the user's position\\n   */\\n  function getBalanceRaw(address asset, address who, uint256 index) external view returns (DataTypes.PositionBalance memory);\\n\\n  /**\\n   * @notice Gets the raw reserve supply object for a given asset.\\n   * @param asset The address of the asset\\n   * @return data The reserve supply information of the given asset\\n   */\\n  function getTotalSupplyRaw(address asset) external view returns (DataTypes.ReserveSupplies memory data);\\n\\n  /**\\n   * @notice Gets the Pool Configurator\\n   * @return The address of the Pool Configurator\\n   */\\n  function getConfigurator() external view returns (address);\\n\\n  function totalAssets(address asset) external view returns (uint256 balance);\\n\\n  function totalDebt(address asset) external view returns (uint256 balance);\\n\\n  function supplyShares(address asset, bytes32 positionId) external view returns (uint256 shares);\\n\\n  function marketBalances(address asset)\\n    external\\n    view\\n    returns (uint256 totalSupplyAssets, uint256 totalSupplyShares, uint256 totalBorrowAssets, uint256 totalBorrowShares);\\n\\n  function supplyAssets(address asset, bytes32 positionId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc58b1c9b2920e038ad3229012b0ff8e587f2fedef0c4ae397351ea9a44a98065\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPoolSetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\n\\ninterface IPoolSetters {\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the rate strategy for the reserve\\n   * @param source The address of the oracle for the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setReserveConfiguration(\\n    address asset,\\n    address rateStrategyAddress,\\n    address source,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param to The address to supply for\\n   * @param amount The amount to be supplied\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return minted The amount of shares minted\\n   */\\n  function supply(\\n    address asset,\\n    address to,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory minted);\\n\\n  /**\\n   * @dev See [supply(...)](#supply) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function supplySimple(address asset, address to, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param to The address to send the tokens to\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return burnt The amount of shares burnt\\n   */\\n  function withdraw(\\n    address asset,\\n    address to,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory burnt);\\n\\n  /**\\n   * @dev See [withdraw(...)](#withdraw) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function withdrawSimple(address asset, address to, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory minted);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param to The address to send the tokens to\\n   * @param amount The amount to be borrowed\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return borrowed The amount of shares borrowed\\n   */\\n  function borrow(\\n    address asset,\\n    address to,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory borrowed);\\n\\n  /**\\n   * @dev See [borrow(...)](#borrow) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function borrowSimple(address asset, address to, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return repaid The amount of shares repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory repaid);\\n\\n  /**\\n   * @dev See [repay(...)](#repay) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function repaySimple(address asset, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param index The index of the user's position\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, uint256 index, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  function liquidate(\\n    address collateralAsset,\\n    address debtAsset,\\n    bytes32 position,\\n    uint256 debtToCover,\\n    DataTypes.ExtraData memory data\\n  ) external;\\n\\n  /**\\n   * @dev See [liquidate(...)](#liquidate) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function liquidateSimple(address collateralAsset, address debtAsset, bytes32 position, uint256 debtToCover) external;\\n\\n  /**\\n   * @dev See [flashLoan(...)](#flashLoan) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function flashLoanSimple(address receiverAddress, address asset, uint256 amount, bytes calldata params) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration.\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    DataTypes.ExtraData memory data\\n  ) external;\\n\\n  function forceUpdateReserves() external;\\n\\n  function forceUpdateReserve(address asset) external;\\n}\\n\",\"keccak256\":\"0x8038023248cbdd5689babdb610898c6fd3835545d6593f2ac75ba9015f2bf98c\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/ui-helpers/UIHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {ReserveConfiguration} from '../../core/pool/configuration/ReserveConfiguration.sol';\\nimport {IPoolFactory} from '../../interfaces/IPoolFactory.sol';\\n\\nimport {IAggregatorInterface} from '../../interfaces/IAggregatorInterface.sol';\\n\\nimport {INFTPositionManager} from '../../interfaces/INFTPositionManager.sol';\\nimport {IPoolConfigurator} from '../../interfaces/IPoolConfigurator.sol';\\nimport {IRevokableBeaconProxy} from '../../interfaces/IRevokableBeaconProxy.sol';\\nimport {DataTypes, IPool} from '../../interfaces/pool/IPool.sol';\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IERC20Metadata} from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\ncontract UIHelper {\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n  IPoolFactory public factory;\\n  INFTPositionManager public manager;\\n  IPoolConfigurator public configurator;\\n\\n  struct ReserveConfig {\\n    address asset;\\n    address interestRateStrategy;\\n    address oracle;\\n    bool borrowable;\\n    bool collateral;\\n    bool frozen;\\n    string name;\\n    string symbol;\\n    uint256 borrowCap;\\n    uint256 decimals;\\n    uint256 liquidationBonus;\\n    uint256 liquidationThreshold;\\n    uint256 ltv;\\n    uint256 supplyCap;\\n    uint256 balanceOnchain;\\n    uint256 totalSupplyOnchain;\\n    uint128 liquidityIndex;\\n    uint128 liquidityRate;\\n    uint128 borrowIndex;\\n    uint128 borrowRate;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint256 debtShares;\\n    uint256 supplyShares;\\n    uint128 underlyingBalance;\\n    uint256 debtAssets;\\n    uint256 supplyAssets;\\n    uint256 latestPrice;\\n  }\\n\\n  struct PoolConfig {\\n    address hook;\\n    address proxyAdmin;\\n    address[] emergencyAdmins;\\n    address[] poolAdmins;\\n    address[] riskAdmins;\\n    bool proxyRevoked;\\n    ReserveConfig[] reserves;\\n    uint16 reservesCount;\\n  }\\n\\n  struct NftPositions {\\n    uint256 tokenId;\\n    address pool;\\n    uint256 healthFactor;\\n    INFTPositionManager.Asset[] assets;\\n    bool isBurnAllowed;\\n  }\\n\\n  constructor(address _factory, address _configurator, address _manager) {\\n    factory = IPoolFactory(_factory);\\n    configurator = IPoolConfigurator(_configurator);\\n    manager = INFTPositionManager(_manager);\\n  }\\n\\n  function getPoolAssetConfig(IPool pool, address asset) public view returns (ReserveConfig memory config) {\\n    DataTypes.ReserveConfigurationMap memory configRaw = pool.getConfiguration(asset);\\n    DataTypes.ReserveData memory data = pool.getReserveData(asset);\\n    DataTypes.ReserveSupplies memory supplies = pool.getTotalSupplyRaw(asset);\\n\\n    config.borrowable = configRaw.getBorrowingEnabled();\\n    config.frozen = configRaw.getFrozen();\\n    config.borrowCap = configRaw.getBorrowCap();\\n    config.decimals = configRaw.getDecimals();\\n    config.liquidationBonus = configRaw.getLiquidationBonus();\\n    config.liquidationThreshold = configRaw.getLiquidationThreshold();\\n    config.ltv = configRaw.getLtv();\\n    config.supplyCap = configRaw.getSupplyCap();\\n\\n    config.collateral = config.ltv > 0;\\n\\n    config.name = IERC20Metadata(asset).name();\\n    config.symbol = IERC20Metadata(asset).symbol();\\n    config.balanceOnchain = IERC20(asset).balanceOf(address(pool));\\n    config.totalSupplyOnchain = IERC20(asset).totalSupply();\\n\\n    config.liquidityIndex = data.liquidityIndex;\\n    config.liquidityRate = data.liquidityRate;\\n    config.borrowIndex = data.borrowIndex;\\n    config.borrowRate = data.borrowRate;\\n\\n    config.debtShares = supplies.debtShares;\\n    config.debtAssets = pool.totalDebt(asset);\\n    config.supplyShares = supplies.supplyShares;\\n    config.supplyAssets = pool.totalAssets(asset);\\n    config.underlyingBalance = supplies.underlyingBalance;\\n\\n    config.asset = asset;\\n    config.interestRateStrategy = data.interestRateStrategyAddress;\\n    config.oracle = data.oracle;\\n\\n    config.latestPrice = uint256(IAggregatorInterface(data.oracle).latestAnswer());\\n  }\\n\\n  function getPoolFullConfigByIndex(uint256 start, uint256 end) public view returns (PoolConfig[] memory configs) {\\n    uint256 count = factory.poolsLength();\\n    if (end > count) end = count;\\n    if (start >= end) return configs;\\n\\n    configs = new PoolConfig[](end - start);\\n    for (uint256 i = start; i < end; i++) {\\n      IPool pool = factory.pools(i);\\n      configs[i - start] = getPoolFullConfig(pool);\\n    }\\n  }\\n\\n  function getPoolFullConfig(IPool pool) public view returns (PoolConfig memory config) {\\n    address[] memory reserves = pool.getReservesList();\\n    IRevokableBeaconProxy proxy = IRevokableBeaconProxy(address(pool));\\n\\n    config.hook = address(pool.getHook());\\n    config.reservesCount = uint16(reserves.length);\\n    config.reserves = new ReserveConfig[](reserves.length);\\n\\n    for (uint256 i = 0; i < reserves.length; i++) {\\n      config.reserves[i] = getPoolAssetConfig(pool, reserves[i]);\\n    }\\n\\n    // details about the pool as a proxy\\n    config.proxyAdmin = proxy.admin();\\n    config.proxyRevoked = proxy.isBeaconRevoked();\\n\\n    // find all the admins and send it back\\n    config.poolAdmins = getAllRoles(pool, configurator, configurator.POOL_ADMIN_ROLE());\\n    config.emergencyAdmins = getAllRoles(pool, configurator, configurator.EMERGENCY_ADMIN_ROLE());\\n    config.riskAdmins = getAllRoles(pool, configurator, configurator.RISK_ADMIN_ROLE());\\n  }\\n\\n  function getAllRoles(IPool _pool, IPoolConfigurator _configurator, bytes32 role) public view returns (address[] memory users) {\\n    bytes32 poolRole = _configurator.getRoleFromPool(_pool, role);\\n    uint256 count = _configurator.getRoleMemberCount(poolRole);\\n    users = new address[](count);\\n    for (uint256 i = 0; i < count; i++) {\\n      users[i] = _configurator.getRoleMember(poolRole, i);\\n    }\\n  }\\n\\n  function getNftPositions(address user) public view returns (NftPositions[] memory positions) {\\n    uint256 count = manager.balanceOf(user);\\n    positions = new NftPositions[](count);\\n\\n    for (uint256 i = 0; i < count; i++) {\\n      uint256 tokenId = manager.tokenOfOwnerByIndex(user, i);\\n      INFTPositionManager.Position memory position = manager.positions(tokenId);\\n      INFTPositionManager.Asset[] memory _assets = getNftPosition(tokenId);\\n\\n      positions[i].pool = position.pool;\\n      positions[i].tokenId = tokenId;\\n      positions[i].assets = _assets;\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the balances of the user for the given tokens\\n   * @dev If the token address is 0x0, it will return the balance of the user in ETH\\n   * @param user The user to get the balances for\\n   * @param tokens The tokens to get the balances for\\n   */\\n  function getBalances(address user, address[] memory tokens) public view returns (uint256[] memory balances) {\\n    balances = new uint256[](tokens.length);\\n\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      if (tokens[i] == address(0)) balances[i] = user.balance;\\n      else balances[i] = IERC20(tokens[i]).balanceOf(user);\\n    }\\n  }\\n\\n  function getNftPosition(uint256 tokenId) public view returns (INFTPositionManager.Asset[] memory assets) {\\n    INFTPositionManager.Position memory position = manager.positions(tokenId);\\n\\n    IPool pool = IPool(position.pool);\\n    address[] memory _assets = pool.getReservesList();\\n    uint256 length = _assets.length;\\n\\n    assets = new INFTPositionManager.Asset[](length);\\n    for (uint256 i; i < length;) {\\n      address asset = assets[i].asset = _assets[i];\\n      assets[i].balance = pool.getBalance(asset, address(manager), tokenId);\\n      assets[i].debt = pool.getDebt(asset, address(manager), tokenId);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    return assets;\\n  }\\n}\\n\",\"keccak256\":\"0x433377dee3796da4653bfc11d1a5ae93f77c0df688f49f55adfad161a0184a05\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200243738038062002437833981016040819052620000349162000094565b600080546001600160a01b039485166001600160a01b031991821617909155600280549385169382169390931790925560018054919093169116179055620000de565b80516001600160a01b03811681146200008f57600080fd5b919050565b600080600060608486031215620000aa57600080fd5b620000b58462000077565b9250620000c56020850162000077565b9150620000d56040850162000077565b90509250925092565b61234980620000ee6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639f44e015116100665780639f44e0151461014a578063c082b3171461016a578063c45a01551461018a578063cda5d2491461019d578063e05c7379146101bd57600080fd5b806307b7039e146100a35780631475a64a146100cc5780632b507df8146100ec578063481c6a75146101175780636a385ae91461012a575b600080fd5b6100b66100b1366004611775565b6101dd565b6040516100c391906119ae565b60405180910390f35b6100df6100da3660046119c1565b610765565b6040516100c391906119da565b6002546100ff906001600160a01b031681565b6040516001600160a01b0390911681526020016100c3565b6001546100ff906001600160a01b031681565b61013d610138366004611ad1565b610a63565b6040516100c39190611b84565b61015d610158366004611bbc565b610bd7565b6040516100c39190611d38565b61017d610178366004611d4b565b610f98565b6040516100c39190611d8c565b6000546100ff906001600160a01b031681565b6101b06101ab366004611bbc565b611185565b6040516100c39190611d9f565b6101d06101cb366004611e87565b61140c565b6040516100c39190611ea9565b6101e56115e1565b60405163c44b11f760e01b81526001600160a01b0383811660048301526000919085169063c44b11f790602401602060405180830381865afa15801561022f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102539190611f4c565b6040516335ea6a7560e01b81526001600160a01b0385811660048301529192506000918616906335ea6a759060240161014060405180830381865afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190611fb6565b604051633383061760e11b81526001600160a01b0386811660048301529192506000918716906367060c2e90602401606060405180830381865afa158015610310573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610334919061207a565b905061034a835167040000000000000016151590565b151560608501528251600160391b161515151560a0850152825160501c640fffffffff16610100850152825160301c60ff16610120850152825160201c61ffff16610140850152825160101c61ffff166101608501526103a9836115ba565b610180850152825160741c640fffffffff166101a085015261018084015115156080850152604080516306fdde0360e01b815290516001600160a01b038716916306fdde039160048083019260009291908290030181865afa158015610413573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261043b91908101906120d9565b8460c00181905250846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610481573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104a991908101906120d9565b60e08501526040516370a0823160e01b81526001600160a01b0387811660048301528616906370a0823190602401602060405180830381865afa1580156104f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610518919061216c565b846101c0018181525050846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610584919061216c565b6101e085015260208201516001600160801b03908116610200860152604080840151821661022087015260608401518216610240870152608084015190911661026086015281516102a086015251631ff517ff60e01b81526001600160a01b038681166004830152871690631ff517ff90602401602060405180830381865afa158015610615573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610639919061216c565b61030085015260208101516102c085015260405163f3e0ffbf60e01b81526001600160a01b03868116600483015287169063f3e0ffbf90602401602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b4919061216c565b6103208501526040808201516001600160801b03166102e08601526001600160a01b03808716865260e08401518116602080880191909152610100850180518316848901525183516350d25bcd60e01b815293519216926350d25bcd92600480830193928290030181865afa158015610731573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610755919061216c565b6103408501525091949350505050565b60015460405163133f757160e31b8152600481018390526060916000916001600160a01b03909116906399fbab88906024016040805180830381865afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190612185565b90506000816000015190506000816001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610822573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261084a91908101906121e3565b8051909150806001600160401b0381111561086757610867611a3f565b6040519080825280602002602001820160405280156108c557816020015b6108b2604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816108855790505b50945060005b81811015610a595760008382815181106108e7576108e761227c565b60200260200101518783815181106109015761090161227c565b60209081029190910101516001600160a01b03918216908190526001546040516318797cd560e21b8152600481018390529083166024820152604481018b9052909250908616906361e5f35490606401602060405180830381865afa15801561096e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610992919061216c565b8783815181106109a4576109a461227c565b6020908102919091018101510152600154604051632c626df160e21b81526001600160a01b0383811660048301529182166024820152604481018a90529086169063b189b7c490606401602060405180830381865afa158015610a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2f919061216c565b878381518110610a4157610a4161227c565b602090810291909101015160400152506001016108cb565b5050505050919050565b606081516001600160401b03811115610a7e57610a7e611a3f565b604051908082528060200260200182016040528015610aa7578160200160208202803683370190505b50905060005b8251811015610bd05760006001600160a01b0316838281518110610ad357610ad361227c565b60200260200101516001600160a01b031603610b1757836001600160a01b031631828281518110610b0657610b0661227c565b602002602001018181525050610bbe565b828181518110610b2957610b2961227c565b60209081029190910101516040516370a0823160e01b81526001600160a01b038681166004830152909116906370a0823190602401602060405180830381865afa158015610b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9f919061216c565b828281518110610bb157610bb161227c565b6020026020010181815250505b80610bc8816122a8565b915050610aad565b5092915050565b610bdf611700565b6000826001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c4791908101906121e3565b90506000839050836001600160a01b031663b55bd84d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb091906122c1565b6001600160a01b03168352815161ffff1660e084015281516001600160401b03811115610cdf57610cdf611a3f565b604051908082528060200260200182016040528015610d1857816020015b610d056115e1565b815260200190600190039081610cfd5790505b5060c084015260005b8251811015610d8157610d4d85848381518110610d4057610d4061227c565b60200260200101516101dd565b8460c001518281518110610d6357610d6361227c565b60200260200101819052508080610d79906122a8565b915050610d21565b50806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de491906122c1565b83602001906001600160a01b031690816001600160a01b031681525050806001600160a01b0316633dae9a9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6391906122de565b151560a08401526002546040805163b8f6dba760e01b81529051610edf9287926001600160a01b0390911691829163b8f6dba79160048083019260209291908290030181865afa158015610ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610178919061216c565b606084015260025460408051636e76fc8f60e01b81529051610f359287926001600160a01b03909116918291636e76fc8f9160048083019260209291908290030181865afa158015610ebb573d6000803e3d6000fd5b6040808501919091526002548151634f16b42560e01b81529151610f8b9287926001600160a01b0316918291634f16b4259160048083019260209291908290030181865afa158015610ebb573d6000803e3d6000fd5b6080840152509092915050565b60405163b75a1fa160e01b81526001600160a01b0384811660048301526024820183905260609160009185169063b75a1fa190604401602060405180830381865afa158015610feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100f919061216c565b60405163ca15c87360e01b8152600481018290529091506000906001600160a01b0386169063ca15c87390602401602060405180830381865afa15801561105a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107e919061216c565b9050806001600160401b0381111561109857611098611a3f565b6040519080825280602002602001820160405280156110c1578160200160208202803683370190505b50925060005b8181101561117b57604051632404341f60e21b815260048101849052602481018290526001600160a01b03871690639010d07c90604401602060405180830381865afa15801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f91906122c1565b8482815181106111515761115161227c565b6001600160a01b039092166020928302919091019091015280611173816122a8565b9150506110c7565b5050509392505050565b6001546040516370a0823160e01b81526001600160a01b0383811660048301526060926000929116906370a0823190602401602060405180830381865afa1580156111d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f8919061216c565b9050806001600160401b0381111561121257611212611a3f565b60405190808252806020026020018201604052801561126a57816020015b6040805160a08101825260008082526020808301829052928201819052606080830152608082015282526000199092019101816112305790505b50915060005b8181101561140557600154604051632f745c5960e01b81526001600160a01b038681166004830152602482018490526000921690632f745c5990604401602060405180830381865afa1580156112ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ee919061216c565b60015460405163133f757160e31b8152600481018390529192506000916001600160a01b03909116906399fbab88906024016040805180830381865afa15801561133c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113609190612185565b9050600061136d83610765565b905081600001518685815181106113865761138661227c565b6020026020010151602001906001600160a01b031690816001600160a01b031681525050828685815181106113bd576113bd61227c565b60200260200101516000018181525050808685815181106113e0576113e061227c565b60200260200101516060018190525050505080806113fd906122a8565b915050611270565b5050919050565b600080546040805163138b573360e11b81529051606093926001600160a01b031691632716ae669160048083019260209291908290030181865afa158015611458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147c919061216c565b90508083111561148a578092505b82841061149757506115b4565b6114a18484612300565b6001600160401b038111156114b8576114b8611a3f565b6040519080825280602002602001820160405280156114f157816020015b6114de611700565b8152602001906001900390816114d65790505b509150835b838110156115b157600080546040516315895f4760e31b8152600481018490526001600160a01b039091169063ac4afa3890602401602060405180830381865afa158015611548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156c91906122c1565b905061157781610bd7565b846115828885612300565b815181106115925761159261227c565b60200260200101819052505080806115a9906122a8565b9150506114f6565b50505b92915050565b8051600090600160391b161515806115d757825161ffff166115da565b60005b9392505050565b60405180610360016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581526020016000151581526020016000151581526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160801b0316815260200160006001600160801b0316815260200160006001600160801b0316815260200160006001600160801b03168152602001600064ffffffffff168152602001600081526020016000815260200160006001600160801b031681526020016000815260200160008152602001600081525090565b60405180610100016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016060815260200160001515815260200160608152602001600061ffff1681525090565b6001600160a01b038116811461177257600080fd5b50565b6000806040838503121561178857600080fd5b82356117938161175d565b915060208301356117a38161175d565b809150509250929050565b60005b838110156117c95781810151838201526020016117b1565b50506000910152565b600081518084526117ea8160208601602086016117ae565b601f01601f19169290920160200192915050565b80516001600160a01b031682526000610360602083015161182a60208601826001600160a01b03169052565b50604083015161184560408601826001600160a01b03169052565b506060830151611859606086018215159052565b50608083015161186d608086018215159052565b5060a083015161188160a086018215159052565b5060c08301518160c0860152611899828601826117d2565b91505060e083015184820360e08601526118b382826117d2565b610100858101519087015261012080860151908701526101408086015190870152610160808601519087015261018080860151908701526101a080860151908701526101c080860151908701526101e08086015190870152610200808601516001600160801b03908116918801919091526102208087015182169088015261024080870151821690880152610260808701518216908801526102808087015164ffffffffff16908801526102a080870151908801526102c080870151908801526102e0808701519091169087015261030080860151908701526103208086015190870152610340948501519490950193909352509192915050565b6020815260006115da60208301846117fe565b6000602082840312156119d357600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015611a3357835180516001600160a01b031684526020808201519085015260409081015190840152606083019385019392506001016119f6565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b0381118282101715611a7857611a78611a3f565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611aa657611aa6611a3f565b604052919050565b60006001600160401b03821115611ac757611ac7611a3f565b5060051b60200190565b60008060408385031215611ae457600080fd5b8235611aef8161175d565b91506020838101356001600160401b03811115611b0b57600080fd5b8401601f81018613611b1c57600080fd5b8035611b2f611b2a82611aae565b611a7e565b81815260059190911b82018301908381019088831115611b4e57600080fd5b928401925b82841015611b75578335611b668161175d565b82529284019290840190611b53565b80955050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611a3357835183529284019291840191600101611ba0565b600060208284031215611bce57600080fd5b81356115da8161175d565b600081518084526020808501945080840160005b83811015611c125781516001600160a01b031687529582019590820190600101611bed565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015611c65578284038952611c538483516117fe565b98850198935090840190600101611c3b565b5091979650505050505050565b80516001600160a01b0316825260006101006020830151611c9e60208601826001600160a01b03169052565b506040830151816040860152611cb682860182611bd9565b91505060608301518482036060860152611cd08282611bd9565b91505060808301518482036080860152611cea8282611bd9565b91505060a0830151611d0060a086018215159052565b5060c083015184820360c0860152611d188282611c1d565b91505060e0830151611d3060e086018261ffff169052565b509392505050565b6020815260006115da6020830184611c72565b600080600060608486031215611d6057600080fd5b8335611d6b8161175d565b92506020840135611d7b8161175d565b929592945050506040919091013590565b6020815260006115da6020830184611bd9565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611e7857898403603f19018652825180518552888101516001600160a01b031689860152878101518886015260608082015160a0918701829052805191870182905260c0870191908b0190855b81811015611e5557825180516001600160a01b031685526020808201519086015260409081015190850152606084019350918c0191600101611e18565b505050608091820151151595909101949094529487019491870191600101611dc7565b50919998505050505050505050565b60008060408385031215611e9a57600080fd5b50508035926020909101359150565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611efe57603f19888603018452611eec858351611c72565b94509285019290850190600101611ed0565b5092979650505050505050565b600060208284031215611f1d57600080fd5b604051602081018181106001600160401b0382111715611f3f57611f3f611a3f565b6040529151825250919050565b600060208284031215611f5e57600080fd5b6115da8383611f0b565b80516001600160801b0381168114611f7f57600080fd5b919050565b805164ffffffffff81168114611f7f57600080fd5b805161ffff81168114611f7f57600080fd5b8051611f7f8161175d565b60006101408284031215611fc957600080fd5b611fd1611a55565b611fdb8484611f0b565b8152611fe960208401611f68565b6020820152611ffa60408401611f68565b604082015261200b60608401611f68565b606082015261201c60808401611f68565b608082015261202d60a08401611f84565b60a082015261203e60c08401611f99565b60c082015261204f60e08401611fab565b60e0820152610100612062818501611fab565b90820152610120928301519281019290925250919050565b60006060828403121561208c57600080fd5b604051606081018181106001600160401b03821117156120ae576120ae611a3f565b806040525082518152602083015160208201526120cd60408401611f68565b60408201529392505050565b6000602082840312156120eb57600080fd5b81516001600160401b038082111561210257600080fd5b818401915084601f83011261211657600080fd5b81518181111561212857612128611a3f565b61213b601f8201601f1916602001611a7e565b915080825285602082850101111561215257600080fd5b6121638160208401602086016117ae565b50949350505050565b60006020828403121561217e57600080fd5b5051919050565b60006040828403121561219757600080fd5b604051604081018181106001600160401b03821117156121b9576121b9611a3f565b60405282516121c78161175d565b815260208301516121d78161175d565b60208201529392505050565b600060208083850312156121f657600080fd5b82516001600160401b0381111561220c57600080fd5b8301601f8101851361221d57600080fd5b805161222b611b2a82611aae565b81815260059190911b8201830190838101908783111561224a57600080fd5b928401925b828410156122715783516122628161175d565b8252928401929084019061224f565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016122ba576122ba612292565b5060010190565b6000602082840312156122d357600080fd5b81516115da8161175d565b6000602082840312156122f057600080fd5b815180151581146115da57600080fd5b818103818111156115b4576115b461229256fea2646970667358221220092cc8d09f4a34b782ee50fefcb49c779d054f8d1463bba6383e769961b4a72564736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBalances(address,address[])": {
        "details": "If the token address is 0x0, it will return the balance of the user in ETH",
        "params": {
          "tokens": "The tokens to get the balances for",
          "user": "The user to get the balances for"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBalances(address,address[])": {
        "notice": "Returns the balances of the user for the given tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 42841,
        "contract": "contracts/periphery/ui-helpers/UIHelper.sol:UIHelper",
        "label": "factory",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IPoolFactory)39100"
      },
      {
        "astId": 42844,
        "contract": "contracts/periphery/ui-helpers/UIHelper.sol:UIHelper",
        "label": "manager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(INFTPositionManager)38548"
      },
      {
        "astId": 42847,
        "contract": "contracts/periphery/ui-helpers/UIHelper.sol:UIHelper",
        "label": "configurator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPoolConfigurator)38824"
      }
    ],
    "types": {
      "t_contract(INFTPositionManager)38548": {
        "encoding": "inplace",
        "label": "contract INFTPositionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolConfigurator)38824": {
        "encoding": "inplace",
        "label": "contract IPoolConfigurator",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolFactory)39100": {
        "encoding": "inplace",
        "label": "contract IPoolFactory",
        "numberOfBytes": "20"
      }
    }
  }
}