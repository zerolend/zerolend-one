{
  "address": "0xd7a2aDD55727Fc5a3d4FAFD92BEbC77604fB4fDE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDelay",
          "type": "uint256"
        }
      ],
      "name": "TimelockInsufficientDelay",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payloads",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "values",
          "type": "uint256"
        }
      ],
      "name": "TimelockInvalidOperationLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TimelockUnauthorizedCaller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operationId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "expectedStates",
          "type": "bytes32"
        }
      ],
      "name": "TimelockUnexpectedOperationState",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBorrowCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "BorrowCapChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "CallExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "CallScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "Cancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "MinDelayChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ReserveBorrowing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReserveFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserveFactor",
          "type": "uint256"
        }
      ],
      "name": "ReserveFactorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "frozen",
          "type": "bool"
        }
      ],
      "name": "ReserveFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldStrategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newStrategy",
          "type": "address"
        }
      ],
      "name": "ReserveInterestRateStrategyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSupplyCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "SupplyCapChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMERGENCY_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RISK_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "addEmergencyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "addPoolAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "addRiskAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "cancelAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getOperationState",
      "outputs": [
        {
          "internalType": "enum ITimelock.OperationState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getPoolAssetConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "borrowable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "frozen",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "borrowCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationBonus",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ltv",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.InitReserveConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getPoolFullConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hook",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "rateStrategyAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "sources",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "borrowable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "frozen",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "borrowCap",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationBonus",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "liquidationThreshold",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "ltv",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "supplyCap",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.InitReserveConfig[]",
              "name": "configurations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DataTypes.InitPoolParams",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleFromPool",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "hashOperation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isEmergencyAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperationDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperationPending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperationReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isPoolAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isRiskAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "removeEmergencyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "removePoolAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "removeRiskAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "setBorrowCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "freeze",
          "type": "bool"
        }
      ],
      "name": "setPoolFreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setReserveBorrowing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "freeze",
          "type": "bool"
        }
      ],
      "name": "setReserveFreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newRateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "setReserveInterestRateStrategyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "setSupplyCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf428063afcd709db2ef8bcfd9d3f1f63a236426e6506613743f8f4cf442af51b",
  "receipt": {
    "to": null,
    "from": "0xd6593B44597D90110abf5F75386f071AB9Fac605",
    "contractAddress": "0xd7a2aDD55727Fc5a3d4FAFD92BEbC77604fB4fDE",
    "transactionIndex": 4,
    "gasUsed": "3064858",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000000000000000080000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000020000000000000000000800000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000210000000000000000000000000000100000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xce36ff74f2b8a4459aed47a50981b27af1e280566062ad0d5949809c8a66d05f",
    "transactionHash": "0xf428063afcd709db2ef8bcfd9d3f1f63a236426e6506613743f8f4cf442af51b",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 6488658,
        "transactionHash": "0xf428063afcd709db2ef8bcfd9d3f1f63a236426e6506613743f8f4cf442af51b",
        "address": "0xd7a2aDD55727Fc5a3d4FAFD92BEbC77604fB4fDE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d6593b44597d90110abf5f75386f071ab9fac605",
          "0x000000000000000000000000d6593b44597d90110abf5f75386f071ab9fac605"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xce36ff74f2b8a4459aed47a50981b27af1e280566062ad0d5949809c8a66d05f"
      }
    ],
    "blockNumber": 6488658,
    "cumulativeGasUsed": "3785618",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf24A6d44e69949837111FF6f4339462534124679",
    "0xd6593B44597D90110abf5F75386f071AB9Fac605"
  ],
  "numDeployments": 1,
  "solcInputHash": "2834fe7fbbb1af748140962d71f4d6ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDelay\",\"type\":\"uint256\"}],\"name\":\"TimelockInsufficientDelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payloads\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"values\",\"type\":\"uint256\"}],\"name\":\"TimelockInvalidOperationLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TimelockUnauthorizedCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operationId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expectedStates\",\"type\":\"bytes32\"}],\"name\":\"TimelockUnexpectedOperationState\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBorrowCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"BorrowCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"CallScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"MinDelayChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ReserveBorrowing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactor\",\"type\":\"uint256\"}],\"name\":\"ReserveFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"ReserveFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldStrategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"ReserveInterestRateStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSupplyCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"SupplyCapChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RISK_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addEmergencyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addPoolAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addRiskAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancelAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getOperationState\",\"outputs\":[{\"internalType\":\"enum ITimelock.OperationState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getPoolAssetConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"borrowable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.InitReserveConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolFullConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rateStrategyAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"borrowable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.InitReserveConfig[]\",\"name\":\"configurations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DataTypes.InitPoolParams\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleFromPool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isEmergencyAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isPoolAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isRiskAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeEmergencyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removePoolAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeRiskAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"setBorrowCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"setPoolFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setReserveBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"setReserveFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"setSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements the configuration methods for the lending pools\",\"errors\":{\"TimelockInsufficientDelay(uint256,uint256)\":[{\"details\":\"The schedule operation doesn't meet the minimum delay.\"}],\"TimelockInvalidOperationLength(uint256,uint256,uint256)\":[{\"details\":\"Mismatch between the parameters length for an operation call.\"}],\"TimelockUnauthorizedCaller(address)\":[{\"details\":\"The caller account is not authorized.\"}],\"TimelockUnexpectedOperationState(bytes32,bytes32)\":[{\"details\":\"The current state of an operation is not as required. The `expectedStates` is a bitmap with the bits enabled for each OperationState enum position counting from right to left. See {_encodeStateBitmap}.\"}]},\"events\":{\"BorrowCapChanged(address,uint256,uint256)\":{\"details\":\"Emitted when the borrow cap of a reserve is updated.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newBorrowCap\":\"The new borrow cap\",\"oldBorrowCap\":\"The old borrow cap\"}},\"CallExecuted(bytes32,uint256,address,uint256,bytes32,bytes)\":{\"details\":\"Emitted when a call is performed as part of operation `id`.\"},\"CallScheduled(bytes32,uint256,address,uint256,bytes,bytes32,uint256)\":{\"details\":\"Emitted when a call is scheduled as part of operation `id`.\"},\"Cancelled(bytes32)\":{\"details\":\"Emitted when operation `id` is cancelled.\"},\"MinDelayChange(uint256,uint256)\":{\"details\":\"Emitted when the minimum delay for future operations is modified.\"},\"ReserveBorrowing(address,bool)\":{\"details\":\"Emitted when borrowing is enabled or disabled on a reserve.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"enabled\":\"True if borrowing is enabled, false otherwise\"}},\"ReserveFactorChanged(address,uint256,uint256)\":{\"details\":\"Emitted when a reserve factor is updated.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newReserveFactor\":\"The new reserve factor, expressed in bps\",\"oldReserveFactor\":\"The old reserve factor, expressed in bps\"}},\"ReserveFrozen(address,bool)\":{\"details\":\"Emitted when a reserve is frozen or unfrozen\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"frozen\":\"True if reserve is frozen, false otherwise\"}},\"ReserveInterestRateStrategyChanged(address,address,address)\":{\"details\":\"Emitted when a reserve interest strategy contract is updated.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newStrategy\":\"The address of the new interest strategy contract\",\"oldStrategy\":\"The address of the old interest strategy contract\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"SupplyCapChanged(address,uint256,uint256)\":{\"details\":\"Emitted when the supply cap of a reserve is updated.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newSupplyCap\":\"The new supply cap\",\"oldSupplyCap\":\"The old supply cap\"}}},\"kind\":\"dev\",\"methods\":{\"addEmergencyAdmin(address,address)\":{\"params\":{\"admin\":\"The address of the new admin\"}},\"addPoolAdmin(address,address)\":{\"params\":{\"admin\":\"The address of the new admin\"}},\"addRiskAdmin(address,address)\":{\"params\":{\"admin\":\"The address of the new admin\"}},\"execute(address,uint256,bytes,bytes32)\":{\"details\":\"Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role.\"},\"getMinDelay()\":{\"details\":\"Returns the minimum delay in seconds for an operation to become valid. This value can be changed by executing an operation that calls `updateDelay`.\"},\"getOperationState(bytes32)\":{\"details\":\"Returns operation state.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getTimestamp(bytes32)\":{\"details\":\"Returns the timestamp at which an operation becomes ready (0 for unset operations, 1 for done operations).\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hashOperation(address,uint256,bytes,bytes32)\":{\"details\":\"Returns the identifier of an operation containing a single transaction.\"},\"isEmergencyAdmin(address,address)\":{\"params\":{\"admin\":\"The address to check\"},\"returns\":{\"_0\":\"True if the given address is EmergencyAdmin, false otherwise\"}},\"isOperation(bytes32)\":{\"details\":\"Returns whether an id corresponds to a registered operation. This includes both Waiting, Ready, and Done operations.\"},\"isOperationDone(bytes32)\":{\"details\":\"Returns whether an operation is done or not.\"},\"isOperationPending(bytes32)\":{\"details\":\"Returns whether an operation is pending or not. Note that a \\\"pending\\\" operation may also be \\\"ready\\\".\"},\"isOperationReady(bytes32)\":{\"details\":\"Returns whether an operation is ready for execution. Note that a \\\"ready\\\" operation is also \\\"pending\\\".\"},\"isPoolAdmin(address,address)\":{\"params\":{\"admin\":\"The address to check\"},\"returns\":{\"_0\":\"True if the given address is PoolAdmin, false otherwise\"}},\"isRiskAdmin(address,address)\":{\"params\":{\"admin\":\"The address to check\"},\"returns\":{\"_0\":\"True if the given address is RiskAdmin, false otherwise\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"removeEmergencyAdmin(address,address)\":{\"params\":{\"admin\":\"The address of the admin to remove\"}},\"removePoolAdmin(address,address)\":{\"params\":{\"admin\":\"The address of the admin to remove\"}},\"removeRiskAdmin(address,address)\":{\"params\":{\"admin\":\"The address of the admin to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setBorrowCap(address,address,uint256)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newBorrowCap\":\"The new borrow cap of the reserve\"}},\"setPoolFreeze(address,bool)\":{\"params\":{\"freeze\":\"True if protocol needs to be frozen, false otherwise\"}},\"setReserveBorrowing(address,address,bool)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"enabled\":\"True if borrowing needs to be enabled, false otherwise\"}},\"setReserveFreeze(address,address,bool)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"freeze\":\"True if the reserve needs to be frozen, false otherwise\"}},\"setReserveInterestRateStrategyAddress(address,address,address)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newRateStrategyAddress\":\"The address of the new interest strategy contract\"}},\"setSupplyCap(address,address,uint256)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newSupplyCap\":\"The new supply cap of the reserve\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"PoolConfigurator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"EMERGENCY_ADMIN_ROLE()\":{\"notice\":\"Returns the identifier of the EmergencyAdmin role\"},\"POOL_ADMIN_ROLE()\":{\"notice\":\"Returns the identifier of the PoolAdmin role\"},\"RISK_ADMIN_ROLE()\":{\"notice\":\"Returns the identifier of the RiskAdmin role\"},\"addEmergencyAdmin(address,address)\":{\"notice\":\"Adds a new admin as EmergencyAdmin\"},\"addPoolAdmin(address,address)\":{\"notice\":\"Adds a new admin as PoolAdmin\"},\"addRiskAdmin(address,address)\":{\"notice\":\"Adds a new admin as RiskAdmin\"},\"isEmergencyAdmin(address,address)\":{\"notice\":\"Returns true if the address is EmergencyAdmin, false otherwise\"},\"isPoolAdmin(address,address)\":{\"notice\":\"Returns true if the address is PoolAdmin, false otherwise\"},\"isRiskAdmin(address,address)\":{\"notice\":\"Returns true if the address is RiskAdmin, false otherwise\"},\"removeEmergencyAdmin(address,address)\":{\"notice\":\"Removes an admin as EmergencyAdmin\"},\"removePoolAdmin(address,address)\":{\"notice\":\"Removes an admin as PoolAdmin\"},\"removeRiskAdmin(address,address)\":{\"notice\":\"Removes an admin as RiskAdmin\"},\"setBorrowCap(address,address,uint256)\":{\"notice\":\"Updates the borrow cap of a reserve.\"},\"setPoolFreeze(address,bool)\":{\"notice\":\"Freezes the pool reserves. In the frozen state only withdraw and repay can be done\"},\"setReserveBorrowing(address,address,bool)\":{\"notice\":\"Configures borrowing on a reserve.\"},\"setReserveFreeze(address,address,bool)\":{\"notice\":\"Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow or rate swap but allows repayments, liquidations, rate rebalances and withdrawals.\"},\"setReserveInterestRateStrategyAddress(address,address,address)\":{\"notice\":\"Sets the interest rate strategy of a reserve.\"},\"setSupplyCap(address,address,uint256)\":{\"notice\":\"Updates the supply cap of a reserve.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/pool/manager/PoolConfigurator.sol\":\"PoolConfigurator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/core/pool/configuration/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    // stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    // the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    // the current supply rate. Expressed in ray\\n    uint128 liquidityRate;\\n    // variable borrow index. Expressed in ray\\n    uint128 borrowIndex;\\n    // the current borrow rate. Expressed in ray\\n    uint128 borrowRate;\\n    // timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    // the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    // address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    // address of the oracle\\n    address oracle;\\n    // the current treasury balance in shares\\n    uint256 accruedToTreasuryShares;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    // bit 0-15: LTV\\n    // bit 16-31: Liq. threshold\\n    // bit 32-47: Liq. bonus\\n    // bit 48-55: Decimals\\n    // bit 56: reserve is active\\n    // bit 57: reserve is frozen\\n    // bit 58: borrowing is enabled\\n    // bit 59: stable rate borrowing enabled\\n    // bit 60: asset is paused\\n    // bit 61: borrowing in isolation mode is enabled\\n    // bit 62: siloed borrowing enabled\\n    // bit 63: flashloaning enabled\\n    // bit 64-79: reserve factor\\n    // bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    // bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    // bit 152-167 liquidation protocol fee\\n    // bit 168-175 eMode category\\n    // bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    // bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    // bit 252-255 unused\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct ReserveCache {\\n    ReserveConfigurationMap reserveConfiguration;\\n    uint128 currBorrowIndex;\\n    uint128 currLiquidityIndex;\\n    uint128 nextBorrowIndex;\\n    uint128 nextLiquidityIndex;\\n    uint256 currBorrowRate;\\n    uint256 currDebtShares;\\n    uint256 currLiquidityRate;\\n    uint256 nextDebtShares;\\n    uint40 reserveLastUpdateTimestamp;\\n  }\\n\\n  struct PositionBalance {\\n    uint128 lastDebtLiquidtyIndex;\\n    uint128 lastSupplyLiquidtyIndex;\\n    uint256 debtShares;\\n    uint256 supplyShares;\\n  }\\n\\n  struct ReserveSupplies {\\n    uint256 debtShares;\\n    uint256 supplyShares;\\n    uint128 underlyingBalance;\\n  }\\n\\n  struct SharesType {\\n    uint256 shares;\\n    uint256 assets;\\n  }\\n\\n  struct ExtraData {\\n    bytes hookData;\\n    bytes interestRateData;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    address collateralAsset;\\n    address debtAsset;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 debtToCover;\\n    uint256 reserveFactor;\\n    uint256 reservesCount;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address pool;\\n    address user;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n    uint256 reservesCount;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    address pool;\\n    address user;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    address destination;\\n    address pool;\\n    bytes32 position;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n    uint256 reservesCount;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address asset;\\n    address receiverAddress;\\n    bytes params;\\n    ExtraData data;\\n    uint256 amount;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 reserveFactor;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    address asset;\\n    address pool;\\n    address receiverAddress;\\n    uint256 amount;\\n    uint256 reserveFactor;\\n    uint256 totalPremium;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    address pool;\\n    bytes32 position;\\n    uint256 reservesCount;\\n    UserConfigurationMap userConfig;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    address asset;\\n    address pool;\\n    bytes32 position;\\n    ReserveCache cache;\\n    uint256 amount;\\n    uint256 reservesCount;\\n    UserConfigurationMap userConfig;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 healthFactor;\\n    uint256 totalDebt;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    address reserve;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 reserveFactor;\\n    uint256 totalDebt;\\n  }\\n\\n  struct InitReserveConfig {\\n    bool borrowable;\\n    bool frozen;\\n    uint256 borrowCap;\\n    uint256 decimals;\\n    uint256 liquidationBonus;\\n    uint256 liquidationThreshold;\\n    uint256 ltv;\\n    uint256 supplyCap;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address interestRateStrategyAddress;\\n    address oracle;\\n    InitReserveConfig configuration;\\n    uint16 reservesCount;\\n  }\\n\\n  struct InitPoolParams {\\n    address hook;\\n    address[] assets;\\n    address[] rateStrategyAddresses;\\n    address[] sources;\\n    DataTypes.InitReserveConfig[] configurations;\\n  }\\n\\n  struct SeedPoolParams {\\n    address pool;\\n    address[] assets;\\n    uint256[] amounts;\\n  }\\n}\\n\",\"keccak256\":\"0xc13736e9e066217e3d83d8a6117bdf1cd71e83a8a98dffdd4bf5873295343388\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {PoolErrorsLib} from '../../../interfaces/errors/PoolErrorsLib.sol';\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n *\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n  uint256 internal constant LTV_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_BONUS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n  uint256 internal constant DECIMALS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FLASHLOAN_ENABLED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROW_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SUPPLY_CAP_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n  uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n\\n  uint256 internal constant MAX_VALID_LTV = 65_535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65_535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65_535;\\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65_535;\\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68_719_476_735;\\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68_719_476_735;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65_535;\\n\\n  uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n  /**\\n   * @notice Sets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @param ltv The new ltv\\n   */\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n    require(ltv <= MAX_VALID_LTV, PoolErrorsLib.INVALID_LTV);\\n    self.data = (self.data & LTV_MASK) | ltv;\\n  }\\n\\n  /**\\n   * @notice Gets the Loan to Value of the reserve\\n   * @dev If the asset is frozen, then the LTV is set to 0\\n   * @param self The reserve configuration\\n   * @return The loan to value\\n   */\\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    bool frozen = (self.data & ~FROZEN_MASK) != 0;\\n    return frozen ? 0 : self.data & ~LTV_MASK;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @param threshold The new liquidation threshold\\n   */\\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, PoolErrorsLib.INVALID_LIQ_THRESHOLD);\\n\\n    self.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation threshold\\n   */\\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @param bonus The new liquidation bonus\\n   */\\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, PoolErrorsLib.INVALID_LIQ_BONUS);\\n\\n    self.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation bonus\\n   */\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @param decimals The decimals\\n   */\\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\\n    require(decimals <= MAX_VALID_DECIMALS, PoolErrorsLib.INVALID_DECIMALS);\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @return The decimals of the asset\\n   */\\n  function getDecimals(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @param frozen The frozen state\\n   */\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n    self.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @return The frozen state\\n   */\\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\n   */\\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n    self.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrowing state\\n   */\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @param borrowCap The borrow cap\\n   */\\n  function setBorrowCap(DataTypes.ReserveConfigurationMap memory self, uint256 borrowCap) internal pure {\\n    require(borrowCap <= MAX_VALID_BORROW_CAP, PoolErrorsLib.INVALID_BORROW_CAP);\\n\\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrow cap\\n   */\\n  function getBorrowCap(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @param supplyCap The supply cap\\n   */\\n  function setSupplyCap(DataTypes.ReserveConfigurationMap memory self, uint256 supplyCap) internal pure {\\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, PoolErrorsLib.INVALID_SUPPLY_CAP);\\n\\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The supply cap\\n   */\\n  function getSupplyCap(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Gets the configuration flags of the reserve\\n   * @param self The reserve configuration\\n   * @return The state flag representing frozen\\n   * @return The state flag representing borrowing enabled\\n   */\\n  function getFlags(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool, bool) {\\n    uint256 dataLocal = self.data;\\n    return ((dataLocal & ~FROZEN_MASK) != 0, (dataLocal & ~BORROWING_MASK) != 0);\\n  }\\n\\n  /**\\n   * @notice Gets the configuration parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing ltv\\n   * @return The state param representing liquidation threshold\\n   * @return The state param representing liquidation bonus\\n   * @return The state param representing reserve decimals\\n   * @return The state param representing reserve factor\\n   */\\n  function getParams(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      dataLocal & ~LTV_MASK,\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xd44f5c4ca8c5a0b9cc1bcc9ea084db3c0c0990b7ef1c832fc1b149f473a8c3d5\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/manager/PoolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IPoolConfigurator} from '../../../interfaces/IPoolConfigurator.sol';\\nimport {IPool} from '../../../interfaces/pool/IPool.sol';\\nimport {DataTypes} from '../configuration/DataTypes.sol';\\n\\nimport {PoolErrorsLib} from '../../../interfaces/errors/PoolErrorsLib.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\nimport {PoolManager} from './PoolManager.sol';\\n\\n/**\\n * @title PoolConfigurator\\n * @dev Implements the configuration methods for the lending pools\\n */\\ncontract PoolConfigurator is PoolManager, IPoolConfigurator {\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n  address public factory;\\n\\n  constructor(address _factory, address _governance) PoolManager(_governance) {\\n    factory = _factory;\\n  }\\n\\n  function initRoles(IPool pool, address admin) external override {\\n    require(msg.sender == factory, '!factory');\\n\\n    _setupRole(getRoleFromPool(pool, POOL_ADMIN_ROLE), admin);\\n    _setupRole(getRoleFromPool(pool, POOL_ADMIN_ROLE), governance);\\n\\n    _setRoleAdmin(getRoleFromPool(pool, POOL_ADMIN_ROLE), getRoleFromPool(pool, POOL_ADMIN_ROLE));\\n    _setRoleAdmin(getRoleFromPool(pool, RISK_ADMIN_ROLE), getRoleFromPool(pool, POOL_ADMIN_ROLE));\\n    _setRoleAdmin(getRoleFromPool(pool, EMERGENCY_ADMIN_ROLE), getRoleFromPool(pool, POOL_ADMIN_ROLE));\\n  }\\n\\n  /// @inheritdoc IPoolConfigurator\\n  function setReserveBorrowing(IPool pool, address asset, bool enabled) external onlyPoolAdmin(pool) {\\n    DataTypes.ReserveConfigurationMap memory config = pool.getConfiguration(asset);\\n    config.setBorrowingEnabled(enabled);\\n    pool.setReserveConfiguration(asset, address(0), address(0), config);\\n    emit ReserveBorrowing(asset, enabled);\\n  }\\n\\n  /// @inheritdoc IPoolConfigurator\\n  function setReserveFreeze(IPool pool, address asset, bool freeze) external onlyRiskOrPoolAdmins(pool) {\\n    DataTypes.ReserveConfigurationMap memory config = pool.getConfiguration(asset);\\n    config.setFrozen(freeze);\\n    pool.setReserveConfiguration(asset, address(0), address(0), config);\\n    emit ReserveFrozen(asset, freeze);\\n  }\\n\\n  /// @inheritdoc IPoolConfigurator\\n  function setPoolFreeze(IPool pool, bool freeze) external onlyEmergencyAdmin(pool) {\\n    address[] memory reserves = pool.getReservesList();\\n\\n    for (uint256 i = 0; i < reserves.length; i++) {\\n      DataTypes.ReserveConfigurationMap memory config = pool.getConfiguration(reserves[i]);\\n      config.setFrozen(freeze);\\n      pool.setReserveConfiguration(reserves[i], address(0), address(0), config);\\n      emit ReserveFrozen(reserves[i], freeze);\\n    }\\n  }\\n\\n  /// @inheritdoc IPoolConfigurator\\n  function setBorrowCap(IPool pool, address asset, uint256 newBorrowCap) external onlyRiskOrPoolAdmins(pool) {\\n    DataTypes.ReserveConfigurationMap memory config = pool.getConfiguration(asset);\\n    uint256 oldBorrowCap = config.getBorrowCap();\\n    config.setBorrowCap(newBorrowCap);\\n    pool.setReserveConfiguration(asset, address(0), address(0), config);\\n    emit BorrowCapChanged(asset, oldBorrowCap, newBorrowCap);\\n  }\\n\\n  /// @inheritdoc IPoolConfigurator\\n  function setSupplyCap(IPool pool, address asset, uint256 newSupplyCap) external onlyRiskOrPoolAdmins(pool) {\\n    DataTypes.ReserveConfigurationMap memory config = pool.getConfiguration(asset);\\n    uint256 oldSupplyCap = config.getSupplyCap();\\n    config.setSupplyCap(newSupplyCap);\\n    pool.setReserveConfiguration(asset, address(0), address(0), config);\\n    emit SupplyCapChanged(asset, oldSupplyCap, newSupplyCap);\\n  }\\n\\n  /// @inheritdoc IPoolConfigurator\\n  function setReserveInterestRateStrategyAddress(IPool pool, address asset, address newRateStrategyAddress) external onlyPoolAdmin(pool) {\\n    DataTypes.ReserveData memory reserve = pool.getReserveData(asset);\\n    DataTypes.ReserveConfigurationMap memory config = pool.getConfiguration(asset);\\n    address oldRateStrategyAddress = reserve.interestRateStrategyAddress;\\n    pool.setReserveConfiguration(asset, newRateStrategyAddress, address(0), config);\\n    emit ReserveInterestRateStrategyChanged(asset, oldRateStrategyAddress, newRateStrategyAddress);\\n  }\\n\\n  /// @inheritdoc IPoolConfigurator\\n  function getPoolAssetConfiguration(IPool pool, address asset) public view returns (DataTypes.InitReserveConfig memory config) {\\n    DataTypes.ReserveConfigurationMap memory configRaw = pool.getConfiguration(asset);\\n    config.borrowable = configRaw.getBorrowingEnabled();\\n    config.frozen = configRaw.getFrozen();\\n    config.borrowCap = configRaw.getBorrowCap();\\n    config.decimals = configRaw.getDecimals();\\n    config.liquidationBonus = configRaw.getLiquidationBonus();\\n    config.liquidationThreshold = configRaw.getLiquidationThreshold();\\n    config.ltv = configRaw.getLtv();\\n    config.supplyCap = configRaw.getSupplyCap();\\n  }\\n\\n  /// @inheritdoc IPoolConfigurator\\n  function getPoolFullConfig(IPool pool) external view returns (DataTypes.InitPoolParams memory config) {\\n    address[] memory reserves = pool.getReservesList();\\n    config.hook = address(pool.getHook());\\n\\n    address[] memory assets = new address[](reserves.length);\\n    address[] memory rateStrategyAddresses = new address[](reserves.length);\\n    address[] memory sources = new address[](reserves.length);\\n    DataTypes.InitReserveConfig[] memory configurations = new DataTypes.InitReserveConfig[](reserves.length);\\n\\n    for (uint256 i = 0; i < reserves.length; i++) {\\n      DataTypes.ReserveData memory data = pool.getReserveData(reserves[i]);\\n\\n      assets[i] = reserves[i];\\n      rateStrategyAddresses[i] = data.interestRateStrategyAddress;\\n      sources[i] = data.oracle;\\n      configurations[i] = getPoolAssetConfiguration(pool, reserves[i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf467604ceb4361463bed2a6b529d695ac4de0c0cf2144062e70fada3ad33235b\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/manager/PoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IPool, IPoolManager} from '../../../interfaces/IPoolManager.sol';\\nimport {PoolErrorsLib} from '../../../interfaces/errors/PoolErrorsLib.sol';\\nimport {TimelockedActions} from './TimelockedActions.sol';\\n\\nabstract contract PoolManager is IPoolManager, TimelockedActions {\\n  bytes32 public constant POOL_ADMIN_ROLE = keccak256('POOL_ADMIN');\\n  bytes32 public constant EMERGENCY_ADMIN_ROLE = keccak256('EMERGENCY_ADMIN');\\n  bytes32 public constant RISK_ADMIN_ROLE = keccak256('RISK_ADMIN');\\n\\n  address public governance;\\n\\n  constructor(address _governance) TimelockedActions(86_400 * 3) {\\n    governance = _governance;\\n    _setupRole(DEFAULT_ADMIN_ROLE, _governance);\\n  }\\n\\n  function _scheduleAction(IPool pool, bytes calldata data) internal {\\n    _schedule(\\n      address(pool), // address target,\\n      0, // uint256 value,\\n      data, // bytes calldata data,\\n      keccak256(abi.encode(block.timestamp)), // bytes32 salt,\\n      _minDelay // uint256 delay\\n    );\\n  }\\n\\n  function cancelAction(IPool pool, bytes32 id) external {\\n    require(\\n      isPoolAdmin(pool, msg.sender) || isRiskAdmin(pool, msg.sender) || isRiskAdmin(IPool(address(0)), msg.sender), 'not pool or risk admin'\\n    );\\n    _cancel(id);\\n  }\\n\\n  /// @inheritdoc IPoolManager\\n  function addPoolAdmin(IPool pool, address admin) public {\\n    grantRole(getRoleFromPool(pool, POOL_ADMIN_ROLE), admin);\\n  }\\n\\n  /// @inheritdoc IPoolManager\\n  function addEmergencyAdmin(IPool pool, address admin) public {\\n    grantRole(getRoleFromPool(pool, EMERGENCY_ADMIN_ROLE), admin);\\n  }\\n\\n  /// @inheritdoc IPoolManager\\n  function addRiskAdmin(IPool pool, address admin) public {\\n    grantRole(getRoleFromPool(pool, RISK_ADMIN_ROLE), admin);\\n  }\\n\\n  /// @inheritdoc IPoolManager\\n  function isPoolAdmin(IPool pool, address admin) public view returns (bool) {\\n    return hasRole(getRoleFromPool(pool, POOL_ADMIN_ROLE), admin);\\n  }\\n\\n  /// @inheritdoc IPoolManager\\n  function isEmergencyAdmin(IPool pool, address admin) public view returns (bool) {\\n    return hasRole(getRoleFromPool(pool, EMERGENCY_ADMIN_ROLE), admin);\\n  }\\n\\n  /// @inheritdoc IPoolManager\\n  function isRiskAdmin(IPool pool, address admin) public view returns (bool) {\\n    return hasRole(getRoleFromPool(pool, RISK_ADMIN_ROLE), admin);\\n  }\\n\\n  /// @inheritdoc IPoolManager\\n  function removeEmergencyAdmin(IPool pool, address admin) public {\\n    revokeRole(getRoleFromPool(pool, EMERGENCY_ADMIN_ROLE), admin);\\n  }\\n\\n  /// @inheritdoc IPoolManager\\n  function removeRiskAdmin(IPool pool, address admin) public {\\n    revokeRole(getRoleFromPool(pool, RISK_ADMIN_ROLE), admin);\\n  }\\n\\n  /// @inheritdoc IPoolManager\\n  function removePoolAdmin(IPool pool, address admin) public {\\n    revokeRole(getRoleFromPool(pool, POOL_ADMIN_ROLE), admin);\\n  }\\n\\n  /**\\n   * @dev Only pool admin can call functions marked by this modifier.\\n   */\\n  modifier onlyPoolAdmin(IPool pool) {\\n    require(hasRole(getRoleFromPool(pool, POOL_ADMIN_ROLE), msg.sender), 'not risk or pool admin');\\n    _;\\n  }\\n\\n  modifier onlyEmergencyAdmin(IPool pool) {\\n    require(\\n      hasRole(getRoleFromPool(pool, EMERGENCY_ADMIN_ROLE), msg.sender)\\n        || hasRole(getRoleFromPool(IPool(address(0)), EMERGENCY_ADMIN_ROLE), msg.sender),\\n      'not risk or pool admin'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyEmergencyOrPoolAdmin(IPool pool) {\\n    require(\\n      hasRole(getRoleFromPool(pool, EMERGENCY_ADMIN_ROLE), msg.sender)\\n        || hasRole(getRoleFromPool(IPool(address(0)), EMERGENCY_ADMIN_ROLE), msg.sender)\\n        || hasRole(getRoleFromPool(pool, POOL_ADMIN_ROLE), msg.sender),\\n      'not emergency or pool admin'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyRiskOrPoolAdmins(IPool pool) {\\n    require(\\n      hasRole(getRoleFromPool(pool, RISK_ADMIN_ROLE), msg.sender) || hasRole(getRoleFromPool(pool, POOL_ADMIN_ROLE), msg.sender),\\n      'not risk or pool admin'\\n    );\\n    _;\\n  }\\n\\n  /// @inheritdoc IPoolManager\\n  function getRoleFromPool(IPool pool, bytes32 role) public pure returns (bytes32) {\\n    return keccak256(abi.encode(pool, role));\\n  }\\n}\\n\",\"keccak256\":\"0xb3d0f438af917a1e49cb56ba9ae6bf94167d2494ee0f7eb1ecb1b0b4e7cf105f\",\"license\":\"BUSL-1.1\"},\"contracts/core/pool/manager/TimelockedActions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/TimelockController.sol)\\n\\npragma solidity 0.8.19;\\n\\nimport {ITimelock} from '../../../interfaces/ITimelock.sol';\\nimport {AccessControlEnumerable} from '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\nimport {ERC1155Holder, ERC1155Receiver} from '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\\nimport {ERC721Holder} from '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract TimelockedActions is ITimelock, AccessControlEnumerable, ERC721Holder, ERC1155Holder {\\n  uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n  mapping(bytes32 id => uint256) private _timestamps;\\n  uint256 internal _minDelay;\\n\\n  constructor(uint256 minDelay) {\\n    _minDelay = minDelay;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override (AccessControlEnumerable, ERC1155Receiver) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns whether an id corresponds to a registered operation. This\\n   * includes both Waiting, Ready, and Done operations.\\n   */\\n  function isOperation(bytes32 id) public view returns (bool) {\\n    return getOperationState(id) != OperationState.Unset;\\n  }\\n\\n  /**\\n   * @dev Returns whether an operation is pending or not. Note that a \\\"pending\\\" operation may also be \\\"ready\\\".\\n   */\\n  function isOperationPending(bytes32 id) public view returns (bool) {\\n    OperationState state = getOperationState(id);\\n    return state == OperationState.Waiting || state == OperationState.Ready;\\n  }\\n\\n  /**\\n   * @dev Returns whether an operation is ready for execution. Note that a \\\"ready\\\" operation is also \\\"pending\\\".\\n   */\\n  function isOperationReady(bytes32 id) public view returns (bool) {\\n    return getOperationState(id) == OperationState.Ready;\\n  }\\n\\n  /**\\n   * @dev Returns whether an operation is done or not.\\n   */\\n  function isOperationDone(bytes32 id) public view returns (bool) {\\n    return getOperationState(id) == OperationState.Done;\\n  }\\n\\n  /**\\n   * @dev Returns the timestamp at which an operation becomes ready (0 for\\n   * unset operations, 1 for done operations).\\n   */\\n  function getTimestamp(bytes32 id) public view virtual returns (uint256) {\\n    return _timestamps[id];\\n  }\\n\\n  /**\\n   * @dev Returns operation state.\\n   */\\n  function getOperationState(bytes32 id) public view virtual returns (OperationState) {\\n    uint256 timestamp = getTimestamp(id);\\n    if (timestamp == 0) return OperationState.Unset;\\n    else if (timestamp == _DONE_TIMESTAMP) return OperationState.Done;\\n    else if (timestamp > block.timestamp) return OperationState.Waiting;\\n    return OperationState.Ready;\\n  }\\n\\n  /**\\n   * @dev Returns the minimum delay in seconds for an operation to become valid.\\n   *\\n   * This value can be changed by executing an operation that calls `updateDelay`.\\n   */\\n  function getMinDelay() public view virtual returns (uint256) {\\n    return _minDelay;\\n  }\\n\\n  /**\\n   * @dev Returns the identifier of an operation containing a single\\n   * transaction.\\n   */\\n  function hashOperation(address target, uint256 value, bytes calldata data, bytes32 salt) public pure virtual returns (bytes32) {\\n    return keccak256(abi.encode(target, value, data, salt));\\n  }\\n\\n  /**\\n   * @dev Schedule an operation containing a single transaction.\\n   *\\n   * Emits {CallSalt} if salt is nonzero, and {CallScheduled}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the 'proposer' role.\\n   */\\n  function _schedule(address target, uint256 value, bytes calldata data, bytes32 salt, uint256 delay) internal virtual {\\n    bytes32 id = hashOperation(target, value, data, salt);\\n    _scheduleOp(id, delay);\\n    emit CallScheduled(id, 0, target, value, data, salt, delay);\\n  }\\n\\n  /**\\n   * @dev Schedule an operation that is to become valid after a given delay.\\n   */\\n  function _scheduleOp(bytes32 id, uint256 delay) private {\\n    if (isOperation(id)) {\\n      revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Unset));\\n    }\\n    uint256 minDelay = getMinDelay();\\n    if (delay < minDelay) {\\n      revert TimelockInsufficientDelay(delay, minDelay);\\n    }\\n    _timestamps[id] = block.timestamp + delay;\\n  }\\n\\n  /**\\n   * @dev Cancel an operation.\\n   */\\n  function _cancel(bytes32 id) internal {\\n    if (!isOperationPending(id)) {\\n      revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Waiting) | _encodeStateBitmap(OperationState.Ready));\\n    }\\n    delete _timestamps[id];\\n\\n    emit Cancelled(id);\\n  }\\n\\n  /**\\n   * @dev Execute an (ready) operation containing a single transaction.\\n   *\\n   * Emits a {CallExecuted} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the 'executor' role.\\n   */\\n  // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n  // thus any modifications to the operation during reentrancy should be caught.\\n  // slither-disable-next-line reentrancy-eth\\n  function execute(address target, uint256 value, bytes calldata payload, bytes32 salt) public payable virtual {\\n    bytes32 id = hashOperation(target, value, payload, salt);\\n    _beforeCall(id);\\n    _execute(target, value, payload);\\n    emit CallExecuted(id, 0, target, value, salt, payload);\\n    _afterCall(id);\\n  }\\n\\n  /**\\n   * @dev Execute an operation's call.\\n   */\\n  function _execute(address target, uint256 value, bytes calldata data) internal virtual {\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    Address.verifyCallResult(success, returndata, 'call failed');\\n  }\\n\\n  /**\\n   * @dev Checks before execution of an operation's calls.\\n   */\\n  function _beforeCall(bytes32 id) private view {\\n    if (!isOperationReady(id)) {\\n      revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Ready));\\n    }\\n  }\\n\\n  /**\\n   * @dev Checks after execution of an operation's calls.\\n   */\\n  function _afterCall(bytes32 id) private {\\n    if (!isOperationReady(id)) {\\n      revert TimelockUnexpectedOperationState(id, _encodeStateBitmap(OperationState.Ready));\\n    }\\n    _timestamps[id] = _DONE_TIMESTAMP;\\n  }\\n\\n  /**\\n   * @dev Encodes a `OperationState` into a `bytes32` representation where each bit enabled corresponds to\\n   * the underlying position in the `OperationState` enum. For example:\\n   *\\n   * 0x000...1000\\n   *   ^^^^^^----- ...\\n   *         ^---- Done\\n   *          ^--- Ready\\n   *           ^-- Waiting\\n   *            ^- Unset\\n   */\\n  function _encodeStateBitmap(OperationState operationState) internal pure returns (bytes32) {\\n    return bytes32(1 << uint8(operationState));\\n  }\\n}\\n\",\"keccak256\":\"0xf21adf7e5171e72dca365bf2eb81d8c4892bc4e43c6272fd223440c5519a1561\",\"license\":\"MIT\"},\"contracts/interfaces/IHook.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\ninterface IHook {\\n  function afterInitialize(address sender, address pool) external returns (bytes4);\\n\\n  function beforeSupply(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterSupply(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeWithdraw(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterWithdraw(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeRepay(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterRepay(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeBorrow(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function afterBorrow(address sender, bytes32 position, address asset, address pool, uint256 amount, bytes calldata hookData) external;\\n\\n  function beforeLiquidate(\\n    address liquidator,\\n    bytes32 position,\\n    address collateralAsset,\\n    address debtAsset,\\n    uint256 debtToCover,\\n    address pool,\\n    bytes calldata hookData\\n  ) external;\\n\\n  function afterLiquidate(\\n    address liquidator,\\n    bytes32 position,\\n    address collateralAsset,\\n    address debtAsset,\\n    uint256 debtToCover,\\n    address pool,\\n    bytes calldata hookData\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe52fad9c754d28923fb0e53ac7ab463889c9f2ba5511bccf1bfd1347502640ef\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\nimport {IPool} from './pool/IPool.sol';\\n\\n/**\\n * @title IPoolConfigurator\\n * @notice Defines the basic interface for a Pool configurator.\\n */\\ninterface IPoolConfigurator {\\n  /**\\n   * @dev Emitted when borrowing is enabled or disabled on a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if borrowing is enabled, false otherwise\\n   */\\n  event ReserveBorrowing(address indexed asset, bool enabled);\\n\\n  /**\\n   * @dev Emitted when a reserve is frozen or unfrozen\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param frozen True if reserve is frozen, false otherwise\\n   */\\n  event ReserveFrozen(address indexed asset, bool frozen);\\n\\n  /**\\n   * @dev Emitted when a reserve factor is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldReserveFactor The old reserve factor, expressed in bps\\n   * @param newReserveFactor The new reserve factor, expressed in bps\\n   */\\n  event ReserveFactorChanged(address indexed asset, uint256 oldReserveFactor, uint256 newReserveFactor);\\n\\n  /**\\n   * @dev Emitted when the borrow cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldBorrowCap The old borrow cap\\n   * @param newBorrowCap The new borrow cap\\n   */\\n  event BorrowCapChanged(address indexed asset, uint256 oldBorrowCap, uint256 newBorrowCap);\\n\\n  /**\\n   * @dev Emitted when the supply cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldSupplyCap The old supply cap\\n   * @param newSupplyCap The new supply cap\\n   */\\n  event SupplyCapChanged(address indexed asset, uint256 oldSupplyCap, uint256 newSupplyCap);\\n\\n  /**\\n   * @dev Emitted when a reserve interest strategy contract is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldStrategy The address of the old interest strategy contract\\n   * @param newStrategy The address of the new interest strategy contract\\n   */\\n  event ReserveInterestRateStrategyChanged(address indexed asset, address oldStrategy, address newStrategy);\\n\\n  /**\\n   * @notice Configures borrowing on a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if borrowing needs to be enabled, false otherwise\\n   */\\n  function setReserveBorrowing(IPool pool, address asset, bool enabled) external;\\n\\n  /**\\n   * @notice Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow\\n   * or rate swap but allows repayments, liquidations, rate rebalances and withdrawals.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param freeze True if the reserve needs to be frozen, false otherwise\\n   */\\n  function setReserveFreeze(IPool pool, address asset, bool freeze) external;\\n\\n  function initRoles(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Sets the interest rate strategy of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newRateStrategyAddress The address of the new interest strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(IPool pool, address asset, address newRateStrategyAddress) external;\\n\\n  /**\\n   * @notice Freezes the pool reserves. In the frozen state only withdraw and repay can be done\\n   * @param freeze True if protocol needs to be frozen, false otherwise\\n   */\\n  function setPoolFreeze(IPool pool, bool freeze) external;\\n\\n  /**\\n   * @notice Updates the borrow cap of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newBorrowCap The new borrow cap of the reserve\\n   */\\n  function setBorrowCap(IPool pool, address asset, uint256 newBorrowCap) external;\\n\\n  /**\\n   * @notice Updates the supply cap of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newSupplyCap The new supply cap of the reserve\\n   */\\n  function setSupplyCap(IPool pool, address asset, uint256 newSupplyCap) external;\\n\\n  function getPoolAssetConfiguration(IPool pool, address asset) external view returns (DataTypes.InitReserveConfig memory config);\\n\\n  function getPoolFullConfig(IPool pool) external view returns (DataTypes.InitPoolParams memory config);\\n}\\n\",\"keccak256\":\"0x6c74e4c79eec6caaada4ed103fc09edd00f638a62e159f65cfa1ff0c1818cc5e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../core/pool/configuration/DataTypes.sol';\\n\\nimport {IPoolConfigurator} from './IPoolConfigurator.sol';\\nimport {IPool} from './pool/IPool.sol';\\nimport {IBeacon} from '@openzeppelin/contracts/proxy/beacon/IBeacon.sol';\\n\\ninterface IPoolFactory is IBeacon {\\n  event PoolCreated(IPool indexed pool, uint256 indexed index, address creator);\\n  event ImplementationUpdated(address indexed old, address indexed updated, address owner);\\n  event TreasuryUpdated(address indexed old, address indexed updated, address owner);\\n  event ReserveFactorUpdated(uint256 indexed old, uint256 indexed updated, address owner);\\n  event ConfiguratorUpdated(address indexed old, address indexed updated, address owner);\\n  event RewardsControllerUpdated(address indexed old, address indexed updated, address owner);\\n  event FlashLoanPremiumToProtocolUpdated(uint256 indexed old, uint256 indexed updated, address owner);\\n\\n  function configurator() external view returns (IPoolConfigurator);\\n\\n  function createPool(DataTypes.InitPoolParams memory params) external returns (IPool pool);\\n\\n  function setConfigurator(address impl) external;\\n\\n  function flashLoanPremiumToProtocol() external view returns (uint256);\\n\\n  function liquidationProtocolFeePercentage() external view returns (uint256);\\n\\n  function pools(uint256 index) external view returns (IPool);\\n\\n  function isPool(address pool) external view returns (bool);\\n\\n  function poolsLength() external view returns (uint256);\\n\\n  function reserveFactor() external view returns (uint256);\\n\\n  function rewardsController() external view returns (address);\\n\\n  function setFlashloanPremium(uint256 updated) external;\\n\\n  function setImplementation(address updated) external;\\n\\n  function setReserveFactor(uint256 updated) external;\\n\\n  function setRewardsController(address _controller) external;\\n\\n  function setTreasury(address updated) external;\\n\\n  function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4c9bdad8e9b261f8aa51e551ffbd407894f06091ec1d82afb308ffeb7efa00b5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {IPool} from './pool/IPool.sol';\\n\\n/**\\n * @title IPoolManager\\n * @notice Defines the basic interface for the ACL Manager\\n */\\ninterface IPoolManager {\\n  /**\\n   * @notice Returns the identifier of the PoolAdmin role\\n   * @return The id of the PoolAdmin role\\n   */\\n  function POOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the EmergencyAdmin role\\n   * @return The id of the EmergencyAdmin role\\n   */\\n  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the RiskAdmin role\\n   * @return The id of the RiskAdmin role\\n   */\\n  function RISK_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Adds a new admin as PoolAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addPoolAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as PoolAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removePoolAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is PoolAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is PoolAdmin, false otherwise\\n   */\\n  function isPoolAdmin(IPool pool, address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as EmergencyAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addEmergencyAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as EmergencyAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeEmergencyAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is EmergencyAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is EmergencyAdmin, false otherwise\\n   */\\n  function isEmergencyAdmin(IPool pool, address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as RiskAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addRiskAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as RiskAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeRiskAdmin(IPool pool, address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is RiskAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is RiskAdmin, false otherwise\\n   */\\n  function isRiskAdmin(IPool pool, address admin) external view returns (bool);\\n\\n  function getRoleFromPool(IPool pool, bytes32 role) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb507a2345318d51e690cf6ea10a46e4158ea515a4b996460f4e3b60b34c94d25\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITimelock.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n */\\ninterface ITimelock {\\n  enum OperationState {\\n    Unset,\\n    Waiting,\\n    Ready,\\n    Done\\n  }\\n\\n  /**\\n   * @dev Mismatch between the parameters length for an operation call.\\n   */\\n  error TimelockInvalidOperationLength(uint256 targets, uint256 payloads, uint256 values);\\n\\n  /**\\n   * @dev The schedule operation doesn't meet the minimum delay.\\n   */\\n  error TimelockInsufficientDelay(uint256 delay, uint256 minDelay);\\n\\n  /**\\n   * @dev The current state of an operation is not as required.\\n   * The `expectedStates` is a bitmap with the bits enabled for each OperationState enum position\\n   * counting from right to left.\\n   *\\n   * See {_encodeStateBitmap}.\\n   */\\n  error TimelockUnexpectedOperationState(bytes32 operationId, bytes32 expectedStates);\\n\\n  /**\\n   * @dev The caller account is not authorized.\\n   */\\n  error TimelockUnauthorizedCaller(address caller);\\n\\n  /**\\n   * @dev Emitted when a call is scheduled as part of operation `id`.\\n   */\\n  event CallScheduled(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data, bytes32 salt, uint256 delay);\\n\\n  /**\\n   * @dev Emitted when a call is performed as part of operation `id`.\\n   */\\n  event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes32 salt, bytes data);\\n\\n  /**\\n   * @dev Emitted when operation `id` is cancelled.\\n   */\\n  event Cancelled(bytes32 indexed id);\\n\\n  /**\\n   * @dev Emitted when the minimum delay for future operations is modified.\\n   */\\n  event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n}\\n\",\"keccak256\":\"0x4ecc5444688e58daa76f9d6c2e56e2110abca2818be4c9bb54b47d881764061b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/errors/PoolErrorsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\n/**\\n * @title PoolErrorsLib\\n * @notice Defines the errors for a ZeroLend Pool.\\n */\\nlibrary PoolErrorsLib {\\n  string public constant CALLER_NOT_POOL_ADMIN = 'CALLER_NOT_POOL_ADMIN'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = 'CALLER_NOT_EMERGENCY_ADMIN'; // 'The caller of the function is not an emergency\\n  // admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = 'CALLER_NOT_POOL_OR_EMERGENCY_ADMIN'; // 'The caller of the function is not a\\n  // pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = 'CALLER_NOT_RISK_OR_POOL_ADMIN'; // 'The caller of the function is not a risk or\\n  // pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = 'CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN'; // 'The caller of the function\\n  // is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = 'CALLER_NOT_BRIDGE'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = 'ADDRESSES_PROVIDER_NOT_REGISTERED'; // 'Pool addresses provider is not\\n  // registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = 'INVALID_ADDRESSES_PROVIDER_ID'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = 'NOT_CONTRACT'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = 'CALLER_NOT_POOL_CONFIGURATOR'; // 'The caller of the function is not the pool\\n  // configurator'\\n  string public constant CALLER_NOT_ATOKEN = 'CALLER_NOT_ATOKEN'; // 'The caller of the function is not an AToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = 'INVALID_ADDRESSES_PROVIDER'; // 'The address of the pool addresses provider is\\n  // invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = 'INVALID_FLASHLOAN_EXECUTOR_RETURN'; // 'Invalid return value of the flashloan\\n  // executor function'\\n  string public constant RESERVE_ALREADY_ADDED = 'RESERVE_ALREADY_ADDED'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = 'NO_MORE_RESERVES_ALLOWED'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = 'RESERVE_LIQUIDITY_NOT_ZERO'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = 'FLASHLOAN_PREMIUM_INVALID'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = 'INVALID_RESERVE_PARAMS'; // 'Invalid risk parameters for the reserve'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = 'BRIDGE_PROTOCOL_FEE_INVALID'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = 'CALLER_MUST_BE_POOL'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = 'INVALID_MINT_AMOUNT'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = 'INVALID_BURN_AMOUNT'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = 'INVALID_AMOUNT'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = 'RESERVE_INACTIVE'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = 'RESERVE_FROZEN'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = 'RESERVE_PAUSED'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = 'BORROWING_NOT_ENABLED'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = 'STABLE_BORROWING_NOT_ENABLED'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = 'NOT_ENOUGH_AVAILABLE_USER_BALANCE'; // 'User cannot withdraw more than the\\n  // available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = 'INVALID_INTEREST_RATE_MODE_SELECTED'; // 'Invalid interest rate mode\\n  // selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = 'COLLATERAL_BALANCE_IS_ZERO'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = 'HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD'; // 'Health\\n  // factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = 'COLLATERAL_CANNOT_COVER_NEW_BORROW'; // 'There is not enough collateral to\\n  // cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = 'COLLATERAL_SAME_AS_BORROWING_CURRENCY'; // 'Collateral is (mostly) the\\n  // same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = 'AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE'; // 'The requested amount is\\n  // greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = 'NO_DEBT_OF_SELECTED_TYPE'; // 'For repayment of a specific type of debt, the user needs\\n  // to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = 'NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF'; // 'To repay on behalf of a user\\n  // an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = 'NO_OUTSTANDING_STABLE_DEBT'; // 'User does not have outstanding stable rate debt on\\n  // this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = 'NO_OUTSTANDING_VARIABLE_DEBT'; // 'User does not have outstanding variable rate\\n  // debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = 'UNDERLYING_BALANCE_ZERO'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = 'INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET'; // 'Interest rate\\n  // rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = 'HEALTH_FACTOR_NOT_BELOW_THRESHOLD'; // 'Health factor is not below the\\n  // threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = 'COLLATERAL_CANNOT_BE_LIQUIDATED'; // 'The collateral chosen cannot be\\n  // liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = 'SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER'; // 'User did not borrow the\\n  // specified currency'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = 'INCONSISTENT_FLASHLOAN_PARAMS'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = 'BORROW_CAP_EXCEEDED'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = 'SUPPLY_CAP_EXCEEDED'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = 'UNBACKED_MINT_CAP_EXCEEDED'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = 'DEBT_CEILING_EXCEEDED'; // 'Debt ceiling is exceeded'\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = 'UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO'; // 'Claimable rights over underlying\\n  // not zero (aToken supply or accruedToTreasuryShares)'\\n  string public constant STABLE_DEBT_NOT_ZERO = 'STABLE_DEBT_NOT_ZERO'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = 'VARIABLE_DEBT_SUPPLY_NOT_ZERO'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = 'LTV_VALIDATION_FAILED'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = 'INCONSISTENT_EMODE_CATEGORY'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = 'PRICE_ORACLE_SENTINEL_CHECK_FAILED'; // 'Price oracle sentinel validation\\n  // failed'\\n  string public constant RESERVE_ALREADY_INITIALIZED = 'RESERVE_ALREADY_INITIALIZED'; // 'Reserve has already been initialized'\\n  string public constant LTV_ZERO = 'LTV_ZERO'; // 'ltv is zero'\\n  string public constant INVALID_LTV = 'INVALID_LTV'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = 'INVALID_LIQ_THRESHOLD'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = 'INVALID_LIQ_BONUS'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = 'INVALID_DECIMALS'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = 'INVALID_RESERVE_FACTOR'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = 'INVALID_BORROW_CAP'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = 'INVALID_SUPPLY_CAP'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = 'INVALID_LIQUIDATION_PROTOCOL_FEE'; // 'Invalid liquidation protocol fee for the\\n  // reserve'\\n  string public constant INVALID_EMODE_CATEGORY = 'INVALID_EMODE_CATEGORY'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = 'INVALID_UNBACKED_MINT_CAP'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = 'INVALID_DEBT_CEILING'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = 'INVALID_RESERVE_INDEX'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = 'ACL_ADMIN_CANNOT_BE_ZERO'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = 'INCONSISTENT_PARAMS_LENGTH'; // 'Array parameters that should be equal length are\\n  // not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = 'ZERO_ADDRESS_NOT_VALID'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = 'INVALID_EXPIRATION'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = 'INVALID_SIGNATURE'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = 'OPERATION_NOT_SUPPORTED'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = 'DEBT_CEILING_NOT_ZERO'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = 'ASSET_NOT_LISTED'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = 'INVALID_OPTIMAL_USAGE_RATIO'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = 'INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO'; // 'Invalid optimal\\n  // stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = 'UNDERLYING_CANNOT_BE_RESCUED'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = 'ADDRESSES_PROVIDER_ALREADY_ADDED'; // 'Reserve has already been added to\\n  // reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = 'POOL_ADDRESSES_DO_NOT_MATCH'; // 'The token implementation pool address and the pool\\n  // address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = 'STABLE_BORROWING_ENABLED'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = 'SILOED_BORROWING_VIOLATION'; // 'User is trying to borrow multiple assets including a\\n  // siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = 'RESERVE_DEBT_NOT_ZERO'; // the total debt of the reserve needs to be 0\\n  string public constant FLASHLOAN_DISABLED = 'FLASHLOAN_DISABLED'; // FlashLoaning for this asset is disabled\\n}\\n\",\"keccak256\":\"0xc03b563005a3864189c39646769eaf33108e46864a754b57aecef2f40c5362b4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\nimport {IHook} from '../IHook.sol';\\n\\nimport {IPoolFactory} from '../IPoolFactory.sol';\\nimport {IPoolGetters} from './IPoolGetters.sol';\\nimport {IPoolSetters} from './IPoolSetters.sol';\\n\\n/**\\n * @title IPool\\n * @notice Defines the basic interface for a ZeroLend Pool.\\n */\\ninterface IPool is IPoolGetters, IPoolSetters {\\n  /**\\n   * Returns the version of the pool implementation\\n   * @return version The version of this pool's implementation\\n   */\\n  function revision() external view returns (uint256 version);\\n\\n  /**\\n   * @notice Initializes the pool with the given parameters. This call sets all the assets and their configs (LTV/LT/Oracle etc..)\\n   * in one call. Since assets once created cannot be changed, this has to be done within the initialize call itself.\\n   * @dev This is function is called by the factory contract.\\n   * @param params The init parameters for the pool. See {DataTypes-InitPoolParams}\\n   */\\n  function initialize(DataTypes.InitPoolParams memory params) external;\\n}\\n\",\"keccak256\":\"0x402265219fd814693ca335b97ecdfc397d707997596336e96facdcd26eb2d8b4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPoolGetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\nimport {IHook} from '../IHook.sol';\\nimport {IPoolFactory} from '../IPoolFactory.sol';\\n\\ninterface IPoolGetters {\\n  /**\\n   * @notice Get the balance of a specific asset in a specific position.\\n   * @param asset The address of the asset.\\n   * @param positionId The ID of the position.\\n   * @return balance The balance of the specified asset in the specified position.\\n   */\\n  function getBalanceByPosition(address asset, bytes32 positionId) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Get the balance of a specific asset for a user given a position index\\n   * @param asset The address of the asset.\\n   * @param who The user to find the balance of\\n   * @param index The index of the user's position\\n   * @return balance The balance of the specified asset for the given user and position idnex.\\n   */\\n  function getBalance(address asset, address who, uint256 index) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Get the debt of a specific asset for a user given a position index\\n   * @param asset The address of the asset.\\n   * @param who The user to find the debt of\\n   * @param index The index of the user's position\\n   * @return debt The debt of the specified asset for the given user and position idnex.\\n   */\\n  function getDebt(address asset, address who, uint256 index) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Get the debt of a specific asset in a specific position.\\n   * @param asset The address of the asset.\\n   * @param positionId The ID of the position.\\n   * @return debt The debt of the specified asset in the specified position.\\n   */\\n  function getDebtByPosition(address asset, bytes32 positionId) external view returns (uint256 debt);\\n\\n  /**\\n   * @notice Gets the reserve factor that this pool charges. The reserve factory is the percentage of\\n   * revenue that the pool shares with the governance.\\n   * @dev This parameter is immutable.\\n   * @return reseveFactor The amount of revenue that gets shared to governance.\\n   */\\n  function getReserveFactor() external view returns (uint256 reseveFactor);\\n\\n  /**\\n   * @notice The factory contract that created this contract\\n   */\\n  function factory() external view returns (IPoolFactory f);\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @param index The index of the user's position\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user,\\n    uint256 index\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @param index The index of the user's position\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(address user, uint256 index) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the number of initialized reserves\\n   * @return The count\\n   */\\n  function getReservesCount() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the current hook for the pool.\\n   * @dev The hook is immutable. Once it is set, it cannot be changed.\\n   * @return The hook for the pool, if set.\\n   */\\n  function getHook() external view returns (IHook);\\n\\n  /**\\n   * @notice Gets the raw balance object for the asset for a given position id\\n   */\\n  function getBalanceRawByPositionId(address asset, bytes32 positionId) external view returns (DataTypes.PositionBalance memory);\\n\\n  /**\\n   * @notice Gets the raw balance object for the asset for a given user and the position index.\\n   * @param asset The address of the asset\\n   * @param who The address of the user\\n   * @param index The index of the user's position\\n   */\\n  function getBalanceRaw(address asset, address who, uint256 index) external view returns (DataTypes.PositionBalance memory);\\n\\n  /**\\n   * @notice Gets the raw reserve supply object for a given asset.\\n   * @param asset The address of the asset\\n   * @return data The reserve supply information of the given asset\\n   */\\n  function getTotalSupplyRaw(address asset) external view returns (DataTypes.ReserveSupplies memory data);\\n\\n  /**\\n   * @notice Gets the Pool Configurator\\n   * @return The address of the Pool Configurator\\n   */\\n  function getConfigurator() external view returns (address);\\n\\n  function totalAssets(address asset) external view returns (uint256 balance);\\n\\n  function totalDebt(address asset) external view returns (uint256 balance);\\n\\n  function supplyShares(address asset, bytes32 positionId) external view returns (uint256 shares);\\n\\n  function marketBalances(address asset)\\n    external\\n    view\\n    returns (uint256 totalSupplyAssets, uint256 totalSupplyShares, uint256 totalBorrowAssets, uint256 totalBorrowShares);\\n\\n  function supplyAssets(address asset, bytes32 positionId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc58b1c9b2920e038ad3229012b0ff8e587f2fedef0c4ae397351ea9a44a98065\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/pool/IPoolSetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n// Telegram: https://t.me/zerolendxyz\\n\\nimport {DataTypes} from '../../core/pool/configuration/DataTypes.sol';\\nimport {IHook} from '../IHook.sol';\\nimport {IPoolFactory} from '../IPoolFactory.sol';\\n\\ninterface IPoolSetters {\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the rate strategy for the reserve\\n   * @param source The address of the oracle for the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setReserveConfiguration(\\n    address asset,\\n    address rateStrategyAddress,\\n    address source,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return minted The amount of shares minted\\n   */\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory minted);\\n\\n  /**\\n   * @dev See [supply(...)](#supply) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function supplySimple(address asset, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return burnt The amount of shares burnt\\n   */\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory burnt);\\n\\n  /**\\n   * @dev See [withdraw(...)](#withdraw) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function withdrawSimple(address asset, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory minted);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return borrowed The amount of shares borrowed\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory borrowed);\\n\\n  /**\\n   * @dev See [borrow(...)](#borrow) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function borrowSimple(address asset, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param index The index of the user's position\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   * @return repaid The amount of shares repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 index,\\n    DataTypes.ExtraData memory data\\n  ) external returns (DataTypes.SharesType memory repaid);\\n\\n  /**\\n   * @dev See [repay(...)](#repay) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function repaySimple(address asset, uint256 amount, uint256 index) external returns (DataTypes.SharesType memory);\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param index The index of the user's position\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, uint256 index, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  function liquidate(\\n    address collateralAsset,\\n    address debtAsset,\\n    bytes32 position,\\n    uint256 debtToCover,\\n    DataTypes.ExtraData memory data\\n  ) external;\\n\\n  /**\\n   * @dev See [liquidate(...)](#liquidate) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function liquidateSimple(address collateralAsset, address debtAsset, bytes32 position, uint256 debtToCover) external;\\n\\n  /**\\n   * @dev See [flashLoan(...)](#flashLoan) for the full documentation. This call executes the same function with\\n   * dummy data params\\n   */\\n  function flashLoanSimple(address receiverAddress, address asset, uint256 amount, bytes calldata params) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration.\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param data Extra data that gets passed to the hook and to the interest rate strategy\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    DataTypes.ExtraData memory data\\n  ) external;\\n\\n  function forceUpdateReserves() external;\\n\\n  function forceUpdateReserve(address asset) external;\\n}\\n\",\"keccak256\":\"0xcb7319c0582e232d0fca0963acc984465e6a1d0acd6de529c78125434fb47dd5\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620035b7380380620035b78339810160408190526200003491620001f6565b6203f480600355600480546001600160a01b0319166001600160a01b03831617905580620000646000826200008c565b5050600580546001600160a01b0319166001600160a01b03929092169190911790556200022e565b6200009882826200009c565b5050565b620000a88282620000c7565b6000828152600160205260409020620000c2908262000167565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000098576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001233390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200017e836001600160a01b03841662000187565b90505b92915050565b6000818152600183016020526040812054620001d05750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000181565b50600062000181565b80516001600160a01b0381168114620001f157600080fd5b919050565b600080604083850312156200020a57600080fd5b6200021583620001d9565b91506200022560208401620001d9565b90509250929050565b613379806200023e6000396000f3fe60806040526004361061027d5760003560e01c806389f744c11161014f578063b8f6dba7116100c1578063d547741f1161007a578063d547741f14610821578063e84d791f14610841578063ec2a5b4514610861578063ed8d3f0414610881578063f23a6e61146108a1578063f27a0c92146108cd57600080fd5b8063b8f6dba714610746578063bc197c8114610768578063c45a015514610794578063c97a073e146107b4578063ca15c873146107d4578063d45c4435146107f457600080fd5b80639b98e5de116101135780639b98e5de146106845780639f44e015146106a4578063a217fddf146106d1578063a99ae7db146106e6578063b2a478d414610706578063b75a1fa11461072657600080fd5b806389f744c1146105e45780638b352e61146106045780638e12d637146106245780639010d07c1461064457806391d148541461066457600080fd5b80634f16b425116101f35780636e76fc8f116101ac5780636e76fc8f14610522578063785907f4146105445780637958004c146105645780637dc8e76c146105915780637fabe86f146105b157806388aa4c12146105d157600080fd5b80634f16b4251461043b578063574a3d971461045d578063584b153e1461047d5780635aa6e6751461049d5780635d90a21c146104d55780636ab3d6661461050257600080fd5b80632ab0f529116102455780632ab0f5291461037b5780632f2ff15d1461039b57806331d50750146103bb57806336568abe146103db5780634792ee63146103fb57806348fca5a61461041b57600080fd5b806301ffc9a71461028257806313bc9f20146102b7578063150b7a02146102d75780631944f68f1461031b578063248a9ca31461033d575b600080fd5b34801561028e57600080fd5b506102a261029d3660046126f1565b6108e2565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b506102a26102d236600461271b565b6108f3565b3480156102e357600080fd5b506103026102f2366004612827565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016102ae565b34801561032757600080fd5b5061033b610336366004612892565b610919565b005b34801561034957600080fd5b5061036d61035836600461271b565b60009081526020819052604090206001015490565b6040519081526020016102ae565b34801561038757600080fd5b506102a261039636600461271b565b61093e565b3480156103a757600080fd5b5061033b6103b63660046128cb565b610947565b3480156103c757600080fd5b506102a26103d636600461271b565b610971565b3480156103e757600080fd5b5061033b6103f63660046128cb565b610996565b34801561040757600080fd5b506102a2610416366004612892565b610a15565b34801561042757600080fd5b5061033b6104363660046128f0565b610a3f565b34801561044757600080fd5b5061036d60008051602061330483398151915281565b34801561046957600080fd5b5061033b61047836600461293b565b610c1a565b34801561048957600080fd5b506102a261049836600461271b565b610dac565b3480156104a957600080fd5b506004546104bd906001600160a01b031681565b6040516001600160a01b0390911681526020016102ae565b3480156104e157600080fd5b506104f56104f0366004612892565b610df1565b6040516102ae91906129ce565b34801561050e57600080fd5b5061033b61051d366004612892565b610ef2565b34801561052e57600080fd5b5061036d60008051602061332483398151915281565b34801561055057600080fd5b5061033b61055f366004612892565b610f13565b34801561057057600080fd5b5061058461057f36600461271b565b610f2e565b6040516102ae91906129f3565b34801561059d57600080fd5b5061033b6105ac366004612a30565b610f79565b3480156105bd57600080fd5b5061033b6105cc366004612a77565b6110dc565b61033b6105df366004612aa3565b611155565b3480156105f057600080fd5b5061033b6105ff366004612892565b6111ce565b34801561061057600080fd5b5061033b61061f36600461293b565b6111e9565b34801561063057600080fd5b506102a261063f366004612892565b61136f565b34801561065057600080fd5b506104bd61065f366004612b33565b61138c565b34801561067057600080fd5b506102a261067f3660046128cb565b6113a4565b34801561069057600080fd5b5061033b61069f366004612a30565b6113cd565b3480156106b057600080fd5b506106c46106bf366004612b55565b611542565b6040516102ae9190612bb6565b3480156106dd57600080fd5b5061036d600081565b3480156106f257600080fd5b506102a2610701366004612892565b611941565b34801561071257600080fd5b5061033b610721366004612892565b61195e565b34801561073257600080fd5b5061036d610741366004612a77565b611975565b34801561075257600080fd5b5061036d6000805160206132e483398151915281565b34801561077457600080fd5b50610302610783366004612cfb565b63bc197c8160e01b95945050505050565b3480156107a057600080fd5b506005546104bd906001600160a01b031681565b3480156107c057600080fd5b5061033b6107cf366004612892565b6119b2565b3480156107e057600080fd5b5061036d6107ef36600461271b565b6119cd565b34801561080057600080fd5b5061036d61080f36600461271b565b60009081526002602052604090205490565b34801561082d57600080fd5b5061033b61083c3660046128cb565b6119e4565b34801561084d57600080fd5b5061033b61085c366004612892565b611a09565b34801561086d57600080fd5b5061036d61087c366004612aa3565b611b09565b34801561088d57600080fd5b5061033b61089c366004612da8565b611b45565b3480156108ad57600080fd5b506103026108bc366004612ddd565b63f23a6e6160e01b95945050505050565b3480156108d957600080fd5b5060035461036d565b60006108ed82611dae565b92915050565b600060025b61090183610f2e565b6003811115610912576109126129dd565b1492915050565b61093a610934836000805160206132e4833981519152611975565b826119e4565b5050565b600060036108f8565b60008281526020819052604090206001015461096281611dd3565b61096c8383611de0565b505050565b60008061097d83610f2e565b600381111561098e5761098e6129dd565b141592915050565b6001600160a01b0381163314610a0b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61093a8282611e02565b6000610a38610a32846000805160206132e4833981519152611975565b836113a4565b9392505050565b82610a61610a5b826000805160206132e4833981519152611975565b336113a4565b610a7d5760405162461bcd60e51b8152600401610a0290612e45565b6040516335ea6a7560e01b81526001600160a01b038481166004830152600091908616906335ea6a759060240161014060405180830381865afa158015610ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aec9190612f08565b60405163c44b11f760e01b81526001600160a01b03868116600483015291925060009187169063c44b11f790602401602060405180830381865afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c9190612fcc565b60e083015160405163507b811560e11b8152919250906001600160a01b0388169063a0f7022a90610b9890899089906000908890600401612fe8565b600060405180830381600087803b158015610bb257600080fd5b505af1158015610bc6573d6000803e3d6000fd5b5050604080516001600160a01b03858116825289811660208301528a1693507fdb8dada53709ce4988154324196790c2e4a60c377e1256790946f83b87db3c3392500160405180910390a250505050505050565b82610c36610a5b82600080516020613304833981519152611975565b80610c575750610c57610a5b826000805160206132e4833981519152611975565b610c735760405162461bcd60e51b8152600401610a0290612e45565b60405163c44b11f760e01b81526001600160a01b0384811660048301526000919086169063c44b11f790602401602060405180830381865afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce19190612fcc565b805190915060741c640fffffffff16610cfa8285611e24565b60405163507b811560e11b81526001600160a01b0387169063a0f7022a90610d2d90889060009081908890600401612fe8565b600060405180830381600087803b158015610d4757600080fd5b505af1158015610d5b573d6000803e3d6000fd5b505060408051848152602081018890526001600160a01b03891693507f0263602682188540a2d633561c0b4453b7d8566285e99f9f6018b8ef2facef499250015b60405180910390a2505050505050565b600080610db883610f2e565b90506001816003811115610dce57610dce6129dd565b1480610a3857506002816003811115610de957610de96129dd565b149392505050565b610df96126a8565b60405163c44b11f760e01b81526001600160a01b0383811660048301526000919085169063c44b11f790602401602060405180830381865afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e679190612fcc565b9050610e7d815167040000000000000016151590565b151582528051600160391b16151515156020830152805160501c640fffffffff166040830152805160301c60ff166060830152805160201c61ffff166080830152805160101c61ffff1660a0830152610ed581611e8c565b60c0830152805160741c640fffffffff1660e08301525092915050565b61093a610f0d83600080516020613324833981519152611975565b82610947565b61093a61093483600080516020613324833981519152611975565b60008181526002602052604081205480600003610f4e5750600092915050565b60018103610f5f5750600392915050565b42811115610f705750600192915050565b50600292915050565b82610f95610a5b826000805160206132e4833981519152611975565b610fb15760405162461bcd60e51b8152600401610a0290612e45565b60405163c44b11f760e01b81526001600160a01b0384811660048301526000919086169063c44b11f790602401602060405180830381865afa158015610ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101f9190612fcc565b905061102b8184611eb2565b60405163507b811560e11b81526001600160a01b0386169063a0f7022a9061105e90879060009081908790600401612fe8565b600060405180830381600087803b15801561107857600080fd5b505af115801561108c573d6000803e3d6000fd5b50505050836001600160a01b03167f2443ba28e8d1d88d531a3d90b981816a4f3b3c7f1fd4085c6029e81d1b7a570d846040516110cd911515815260200190565b60405180910390a25050505050565b6110e68233610a15565b806110f657506110f6823361136f565b80611107575061110760003361136f565b61114c5760405162461bcd60e51b81526020600482015260166024820152753737ba103837b7b61037b9103934b9b59030b236b4b760511b6044820152606401610a02565b61093a81611ee0565b60006111648686868686611b09565b905061116f81611f60565b61117b86868686611f9a565b6000817f4c791a3ff54e27964b9a9527e64fb66fb7d1eaacec7dd0420439e94f9d6aea3b88888689896040516111b595949392919061303a565b60405180910390a36111c681612036565b505050505050565b61093a61093483600080516020613304833981519152611975565b82611205610a5b82600080516020613304833981519152611975565b806112265750611226610a5b826000805160206132e4833981519152611975565b6112425760405162461bcd60e51b8152600401610a0290612e45565b60405163c44b11f760e01b81526001600160a01b0384811660048301526000919086169063c44b11f790602401602060405180830381865afa15801561128c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b09190612fcc565b805190915060501c640fffffffff166112c98285612062565b60405163507b811560e11b81526001600160a01b0387169063a0f7022a906112fc90889060009081908890600401612fe8565b600060405180830381600087803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505060408051848152602081018890526001600160a01b03891693507fc51aca575985d521c5072ad11549bad77013bb786d57f30f94b40ed8f8dc9bc4925001610d9c565b6000610a38610a3284600080516020613304833981519152611975565b6000828152600160205260408120610a3890836120ca565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b826113e9610a5b82600080516020613304833981519152611975565b8061140a575061140a610a5b826000805160206132e4833981519152611975565b6114265760405162461bcd60e51b8152600401610a0290612e45565b60405163c44b11f760e01b81526001600160a01b0384811660048301526000919086169063c44b11f790602401602060405180830381865afa158015611470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114949190612fcc565b90506114a081846120d6565b60405163507b811560e11b81526001600160a01b0386169063a0f7022a906114d390879060009081908790600401612fe8565b600060405180830381600087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b50505050836001600160a01b03167f0c4443d258a350d27dc50c378b2ebf165e6469725f786d21b30cab16823f5587846040516110cd911515815260200190565b61157d6040518060a0016040528060006001600160a01b03168152602001606081526020016060815260200160608152602001606081525090565b6000826001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156115bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115e59190810190613073565b9050826001600160a01b031663b55bd84d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116499190613101565b6001600160a01b0316825280516000906001600160401b0381111561167057611670612749565b604051908082528060200260200182016040528015611699578160200160208202803683370190505b509050600082516001600160401b038111156116b7576116b7612749565b6040519080825280602002602001820160405280156116e0578160200160208202803683370190505b509050600083516001600160401b038111156116fe576116fe612749565b604051908082528060200260200182016040528015611727578160200160208202803683370190505b509050600084516001600160401b0381111561174557611745612749565b60405190808252806020026020018201604052801561177e57816020015b61176b6126a8565b8152602001906001900390816117635790505b50905060005b8551811015611936576000886001600160a01b03166335ea6a758884815181106117b0576117b061311e565b60200260200101516040518263ffffffff1660e01b81526004016117e391906001600160a01b0391909116815260200190565b61014060405180830381865afa158015611801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118259190612f08565b90508682815181106118395761183961311e565b60200260200101518683815181106118535761185361311e565b60200260200101906001600160a01b031690816001600160a01b0316815250508060e0015185838151811061188a5761188a61311e565b60200260200101906001600160a01b031690816001600160a01b0316815250508061010001518483815181106118c2576118c261311e565b60200260200101906001600160a01b031690816001600160a01b031681525050611905898884815181106118f8576118f861311e565b6020026020010151610df1565b8383815181106119175761191761311e565b602002602001018190525050808061192e9061314a565b915050611784565b505050505050919050565b6000610a38610a3284600080516020613324833981519152611975565b61093a610f0d836000805160206133048339815191525b604080516001600160a01b038416602082015290810182905260009060600160405160208183030381529060405280519060200120905092915050565b61093a610f0d836000805160206132e4833981519152611975565b60008181526001602052604081206108ed90612104565b6000828152602081905260409020600101546119ff81611dd3565b61096c8383611e02565b6005546001600160a01b03163314611a4e5760405162461bcd60e51b815260206004820152600860248201526721666163746f727960c01b6044820152606401610a02565b611a6f611a69836000805160206132e4833981519152611975565b8261210e565b611a9b611a8a836000805160206132e4833981519152611975565b6004546001600160a01b031661210e565b611ad3611ab6836000805160206132e4833981519152611975565b611ace846000805160206132e4833981519152611975565b612118565b611aee611ab683600080516020613304833981519152611975565b61093a611ab683600080516020613324833981519152611975565b60008585858585604051602001611b24959493929190613163565b60405160208183030381529060405280519060200120905095945050505050565b81611b61610a5b82600080516020613324833981519152611975565b80611b835750611b83610a5b6000600080516020613324833981519152611975565b611b9f5760405162461bcd60e51b8152600401610a0290612e45565b6000836001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611bdf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c079190810190613073565b905060005b8151811015611da7576000856001600160a01b031663c44b11f7848481518110611c3857611c3861311e565b60200260200101516040518263ffffffff1660e01b8152600401611c6b91906001600160a01b0391909116815260200190565b602060405180830381865afa158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cac9190612fcc565b9050611cb881866120d6565b856001600160a01b031663a0f7022a848481518110611cd957611cd961311e565b6020026020010151600080856040518563ffffffff1660e01b8152600401611d049493929190612fe8565b600060405180830381600087803b158015611d1e57600080fd5b505af1158015611d32573d6000803e3d6000fd5b50505050828281518110611d4857611d4861311e565b60200260200101516001600160a01b03167f0c4443d258a350d27dc50c378b2ebf165e6469725f786d21b30cab16823f558786604051611d8c911515815260200190565b60405180910390a25080611d9f8161314a565b915050611c0c565b5050505050565b60006001600160e01b03198216630271189760e51b14806108ed57506108ed82612163565b611ddd8133612188565b50565b611dea82826121e1565b600082815260016020526040902061096c9082612265565b611e0c828261227a565b600082815260016020526040902061096c90826122df565b6040805180820190915260128152710494e56414c49445f535550504c595f4341560741b6020820152640fffffffff821115611e735760405162461bcd60e51b8152600401610a0291906131c1565b508151640fffffffff60741b191660749190911b179052565b8051600090600160391b16151580611ea957825161ffff16610a38565b60009392505050565b603a81611ec0576000611ec3565b60015b8351670400000000000000191660ff9190911690911b1790915250565b611ee981610dac565b611f255780611ef860026122f4565b611f0260016122f4565b604051635ead8eb560e01b81526004810193909352176024820152604401610a02565b6000818152600260205260408082208290555182917fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb7091a250565b611f69816108f3565b611ddd5780611f7860026122f4565b604051635ead8eb560e01b815260048101929092526024820152604401610a02565b600080856001600160a01b0316858585604051611fb89291906131f4565b60006040518083038185875af1925050503d8060008114611ff5576040519150601f19603f3d011682016040523d82523d6000602084013e611ffa565b606091505b509150915061202d82826040518060400160405280600b81526020016a18d85b1b0819985a5b195960aa1b815250612317565b50505050505050565b61203f816108f3565b61204e5780611f7860026122f4565b600090815260026020526040902060019055565b6040805180820190915260128152710494e56414c49445f424f52524f575f4341560741b6020820152640fffffffff8211156120b15760405162461bcd60e51b8152600401610a0291906131c1565b508151640fffffffff60501b191660509190911b179052565b6000610a388383612330565b6039816120e45760006120e7565b60015b8351670200000000000000191660ff9190911690911b1790915250565b60006108ed825490565b61093a8282611de0565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160e01b03198216635a05180f60e01b14806108ed57506108ed8261235a565b61219282826113a4565b61093a5761219f8161238f565b6121aa8360206123a1565b6040516020016121bb929190613204565b60408051601f198184030181529082905262461bcd60e51b8252610a02916004016131c1565b6121eb82826113a4565b61093a576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556122213390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610a38836001600160a01b03841661253c565b61228482826113a4565b1561093a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610a38836001600160a01b03841661258b565b6000816003811115612308576123086129dd565b600160ff919091161b92915050565b60608315612326575081610a38565b610a38838361267e565b60008260000182815481106123475761234761311e565b9060005260206000200154905092915050565b60006001600160e01b03198216637965db0b60e01b14806108ed57506301ffc9a760e01b6001600160e01b03198316146108ed565b60606108ed6001600160a01b03831660145b606060006123b0836002613279565b6123bb906002613290565b6001600160401b038111156123d2576123d2612749565b6040519080825280601f01601f1916602001820160405280156123fc576020820181803683370190505b509050600360fc1b816000815181106124175761241761311e565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124465761244661311e565b60200101906001600160f81b031916908160001a905350600061246a846002613279565b612475906001613290565b90505b60018111156124ed576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106124a9576124a961311e565b1a60f81b8282815181106124bf576124bf61311e565b60200101906001600160f81b031916908160001a90535060049490941c936124e6816132a3565b9050612478565b508315610a385760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a02565b6000818152600183016020526040812054612583575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108ed565b5060006108ed565b600081815260018301602052604081205480156126745760006125af6001836132ba565b85549091506000906125c3906001906132ba565b90508181146126285760008660000182815481106125e3576125e361311e565b90600052602060002001549050808760000184815481106126065761260661311e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612639576126396132cd565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108ed565b60009150506108ed565b81511561268e5781518083602001fd5b8060405162461bcd60e51b8152600401610a0291906131c1565b6040518061010001604052806000151581526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006020828403121561270357600080fd5b81356001600160e01b031981168114610a3857600080fd5b60006020828403121561272d57600080fd5b5035919050565b6001600160a01b0381168114611ddd57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561278257612782612749565b60405290565b604051601f8201601f191681016001600160401b03811182821017156127b0576127b0612749565b604052919050565b600082601f8301126127c957600080fd5b81356001600160401b038111156127e2576127e2612749565b6127f5601f8201601f1916602001612788565b81815284602083860101111561280a57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561283d57600080fd5b843561284881612734565b9350602085013561285881612734565b92506040850135915060608501356001600160401b0381111561287a57600080fd5b612886878288016127b8565b91505092959194509250565b600080604083850312156128a557600080fd5b82356128b081612734565b915060208301356128c081612734565b809150509250929050565b600080604083850312156128de57600080fd5b8235915060208301356128c081612734565b60008060006060848603121561290557600080fd5b833561291081612734565b9250602084013561292081612734565b9150604084013561293081612734565b809150509250925092565b60008060006060848603121561295057600080fd5b833561295b81612734565b9250602084013561296b81612734565b929592945050506040919091013590565b80511515825260208101511515602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b61010081016108ed828461297c565b634e487b7160e01b600052602160045260246000fd5b6020810160048310612a1557634e487b7160e01b600052602160045260246000fd5b91905290565b80358015158114612a2b57600080fd5b919050565b600080600060608486031215612a4557600080fd5b8335612a5081612734565b92506020840135612a6081612734565b9150612a6e60408501612a1b565b90509250925092565b60008060408385031215612a8a57600080fd5b8235612a9581612734565b946020939093013593505050565b600080600080600060808688031215612abb57600080fd5b8535612ac681612734565b94506020860135935060408601356001600160401b0380821115612ae957600080fd5b818801915088601f830112612afd57600080fd5b813581811115612b0c57600080fd5b896020828501011115612b1e57600080fd5b96999598505060200195606001359392505050565b60008060408385031215612b4657600080fd5b50508035926020909101359150565b600060208284031215612b6757600080fd5b8135610a3881612734565b600081518084526020808501945080840160005b83811015612bab5781516001600160a01b031687529582019590820190600101612b86565b509495945050505050565b602080825282516001600160a01b0316828201528281015160a0604084015260009190612be660c0850182612b72565b90506040850151601f1980868403016060870152612c048383612b72565b92506060870151915080868403016080870152612c218383612b72565b608088015187820390920160a088015281518082529185019350600092508401905b80831015612c6d57612c5682855161297c565b610100820191508484019350600183019250612c43565b509695505050505050565b60006001600160401b03821115612c9157612c91612749565b5060051b60200190565b600082601f830112612cac57600080fd5b81356020612cc1612cbc83612c78565b612788565b82815260059290921b84018101918181019086841115612ce057600080fd5b8286015b84811015612c6d5780358352918301918301612ce4565b600080600080600060a08688031215612d1357600080fd5b8535612d1e81612734565b94506020860135612d2e81612734565b935060408601356001600160401b0380821115612d4a57600080fd5b612d5689838a01612c9b565b94506060880135915080821115612d6c57600080fd5b612d7889838a01612c9b565b93506080880135915080821115612d8e57600080fd5b50612d9b888289016127b8565b9150509295509295909350565b60008060408385031215612dbb57600080fd5b8235612dc681612734565b9150612dd460208401612a1b565b90509250929050565b600080600080600060a08688031215612df557600080fd5b8535612e0081612734565b94506020860135612e1081612734565b9350604086013592506060860135915060808601356001600160401b03811115612e3957600080fd5b612d9b888289016127b8565b6020808252601690820152753737ba103934b9b59037b9103837b7b61030b236b4b760511b604082015260600190565b600060208284031215612e8757600080fd5b604051602081018181106001600160401b0382111715612ea957612ea9612749565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff81168114612a2b57600080fd5b805164ffffffffff81168114612a2b57600080fd5b805161ffff81168114612a2b57600080fd5b8051612a2b81612734565b60006101408284031215612f1b57600080fd5b612f2361275f565b612f2d8484612e75565b8152612f3b60208401612eb6565b6020820152612f4c60408401612eb6565b6040820152612f5d60608401612eb6565b6060820152612f6e60808401612eb6565b6080820152612f7f60a08401612ed6565b60a0820152612f9060c08401612eeb565b60c0820152612fa160e08401612efd565b60e0820152610100612fb4818501612efd565b90820152610120928301519281019290925250919050565b600060208284031215612fde57600080fd5b610a388383612e75565b6001600160a01b0394851681529284166020840152921660408201529051606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0386168152846020820152836040820152608060608201526000613068608083018486613011565b979650505050505050565b6000602080838503121561308657600080fd5b82516001600160401b0381111561309c57600080fd5b8301601f810185136130ad57600080fd5b80516130bb612cbc82612c78565b81815260059190911b820183019083810190878311156130da57600080fd5b928401925b828410156130685783516130f281612734565b825292840192908401906130df565b60006020828403121561311357600080fd5b8151610a3881612734565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161315c5761315c613134565b5060010190565b60018060a01b038616815284602082015260806040820152600061318b608083018587613011565b90508260608301529695505050505050565b60005b838110156131b85781810151838201526020016131a0565b50506000910152565b60208152600082518060208401526131e081604085016020870161319d565b601f01601f19169190910160400192915050565b8183823760009101908152919050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161323c81601785016020880161319d565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161326d81602884016020880161319d565b01602801949350505050565b80820281158282048414176108ed576108ed613134565b808201808211156108ed576108ed613134565b6000816132b2576132b2613134565b506000190190565b818103818111156108ed576108ed613134565b634e487b7160e01b600052603160045260246000fdfe12ad05bde78c5ab75238ce885307f96ecd482bb402ef831f99e7018a0f169b7b8aa855a911518ecfbe5bc3088c8f3dda7badf130faaf8ace33fdc33828e181675c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fba26469706673582212209b2ef50d42a31e16d526e999d029c9e1e29343a871985f66cbf4ab67f56aa03764736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061027d5760003560e01c806389f744c11161014f578063b8f6dba7116100c1578063d547741f1161007a578063d547741f14610821578063e84d791f14610841578063ec2a5b4514610861578063ed8d3f0414610881578063f23a6e61146108a1578063f27a0c92146108cd57600080fd5b8063b8f6dba714610746578063bc197c8114610768578063c45a015514610794578063c97a073e146107b4578063ca15c873146107d4578063d45c4435146107f457600080fd5b80639b98e5de116101135780639b98e5de146106845780639f44e015146106a4578063a217fddf146106d1578063a99ae7db146106e6578063b2a478d414610706578063b75a1fa11461072657600080fd5b806389f744c1146105e45780638b352e61146106045780638e12d637146106245780639010d07c1461064457806391d148541461066457600080fd5b80634f16b425116101f35780636e76fc8f116101ac5780636e76fc8f14610522578063785907f4146105445780637958004c146105645780637dc8e76c146105915780637fabe86f146105b157806388aa4c12146105d157600080fd5b80634f16b4251461043b578063574a3d971461045d578063584b153e1461047d5780635aa6e6751461049d5780635d90a21c146104d55780636ab3d6661461050257600080fd5b80632ab0f529116102455780632ab0f5291461037b5780632f2ff15d1461039b57806331d50750146103bb57806336568abe146103db5780634792ee63146103fb57806348fca5a61461041b57600080fd5b806301ffc9a71461028257806313bc9f20146102b7578063150b7a02146102d75780631944f68f1461031b578063248a9ca31461033d575b600080fd5b34801561028e57600080fd5b506102a261029d3660046126f1565b6108e2565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b506102a26102d236600461271b565b6108f3565b3480156102e357600080fd5b506103026102f2366004612827565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016102ae565b34801561032757600080fd5b5061033b610336366004612892565b610919565b005b34801561034957600080fd5b5061036d61035836600461271b565b60009081526020819052604090206001015490565b6040519081526020016102ae565b34801561038757600080fd5b506102a261039636600461271b565b61093e565b3480156103a757600080fd5b5061033b6103b63660046128cb565b610947565b3480156103c757600080fd5b506102a26103d636600461271b565b610971565b3480156103e757600080fd5b5061033b6103f63660046128cb565b610996565b34801561040757600080fd5b506102a2610416366004612892565b610a15565b34801561042757600080fd5b5061033b6104363660046128f0565b610a3f565b34801561044757600080fd5b5061036d60008051602061330483398151915281565b34801561046957600080fd5b5061033b61047836600461293b565b610c1a565b34801561048957600080fd5b506102a261049836600461271b565b610dac565b3480156104a957600080fd5b506004546104bd906001600160a01b031681565b6040516001600160a01b0390911681526020016102ae565b3480156104e157600080fd5b506104f56104f0366004612892565b610df1565b6040516102ae91906129ce565b34801561050e57600080fd5b5061033b61051d366004612892565b610ef2565b34801561052e57600080fd5b5061036d60008051602061332483398151915281565b34801561055057600080fd5b5061033b61055f366004612892565b610f13565b34801561057057600080fd5b5061058461057f36600461271b565b610f2e565b6040516102ae91906129f3565b34801561059d57600080fd5b5061033b6105ac366004612a30565b610f79565b3480156105bd57600080fd5b5061033b6105cc366004612a77565b6110dc565b61033b6105df366004612aa3565b611155565b3480156105f057600080fd5b5061033b6105ff366004612892565b6111ce565b34801561061057600080fd5b5061033b61061f36600461293b565b6111e9565b34801561063057600080fd5b506102a261063f366004612892565b61136f565b34801561065057600080fd5b506104bd61065f366004612b33565b61138c565b34801561067057600080fd5b506102a261067f3660046128cb565b6113a4565b34801561069057600080fd5b5061033b61069f366004612a30565b6113cd565b3480156106b057600080fd5b506106c46106bf366004612b55565b611542565b6040516102ae9190612bb6565b3480156106dd57600080fd5b5061036d600081565b3480156106f257600080fd5b506102a2610701366004612892565b611941565b34801561071257600080fd5b5061033b610721366004612892565b61195e565b34801561073257600080fd5b5061036d610741366004612a77565b611975565b34801561075257600080fd5b5061036d6000805160206132e483398151915281565b34801561077457600080fd5b50610302610783366004612cfb565b63bc197c8160e01b95945050505050565b3480156107a057600080fd5b506005546104bd906001600160a01b031681565b3480156107c057600080fd5b5061033b6107cf366004612892565b6119b2565b3480156107e057600080fd5b5061036d6107ef36600461271b565b6119cd565b34801561080057600080fd5b5061036d61080f36600461271b565b60009081526002602052604090205490565b34801561082d57600080fd5b5061033b61083c3660046128cb565b6119e4565b34801561084d57600080fd5b5061033b61085c366004612892565b611a09565b34801561086d57600080fd5b5061036d61087c366004612aa3565b611b09565b34801561088d57600080fd5b5061033b61089c366004612da8565b611b45565b3480156108ad57600080fd5b506103026108bc366004612ddd565b63f23a6e6160e01b95945050505050565b3480156108d957600080fd5b5060035461036d565b60006108ed82611dae565b92915050565b600060025b61090183610f2e565b6003811115610912576109126129dd565b1492915050565b61093a610934836000805160206132e4833981519152611975565b826119e4565b5050565b600060036108f8565b60008281526020819052604090206001015461096281611dd3565b61096c8383611de0565b505050565b60008061097d83610f2e565b600381111561098e5761098e6129dd565b141592915050565b6001600160a01b0381163314610a0b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61093a8282611e02565b6000610a38610a32846000805160206132e4833981519152611975565b836113a4565b9392505050565b82610a61610a5b826000805160206132e4833981519152611975565b336113a4565b610a7d5760405162461bcd60e51b8152600401610a0290612e45565b6040516335ea6a7560e01b81526001600160a01b038481166004830152600091908616906335ea6a759060240161014060405180830381865afa158015610ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aec9190612f08565b60405163c44b11f760e01b81526001600160a01b03868116600483015291925060009187169063c44b11f790602401602060405180830381865afa158015610b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5c9190612fcc565b60e083015160405163507b811560e11b8152919250906001600160a01b0388169063a0f7022a90610b9890899089906000908890600401612fe8565b600060405180830381600087803b158015610bb257600080fd5b505af1158015610bc6573d6000803e3d6000fd5b5050604080516001600160a01b03858116825289811660208301528a1693507fdb8dada53709ce4988154324196790c2e4a60c377e1256790946f83b87db3c3392500160405180910390a250505050505050565b82610c36610a5b82600080516020613304833981519152611975565b80610c575750610c57610a5b826000805160206132e4833981519152611975565b610c735760405162461bcd60e51b8152600401610a0290612e45565b60405163c44b11f760e01b81526001600160a01b0384811660048301526000919086169063c44b11f790602401602060405180830381865afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce19190612fcc565b805190915060741c640fffffffff16610cfa8285611e24565b60405163507b811560e11b81526001600160a01b0387169063a0f7022a90610d2d90889060009081908890600401612fe8565b600060405180830381600087803b158015610d4757600080fd5b505af1158015610d5b573d6000803e3d6000fd5b505060408051848152602081018890526001600160a01b03891693507f0263602682188540a2d633561c0b4453b7d8566285e99f9f6018b8ef2facef499250015b60405180910390a2505050505050565b600080610db883610f2e565b90506001816003811115610dce57610dce6129dd565b1480610a3857506002816003811115610de957610de96129dd565b149392505050565b610df96126a8565b60405163c44b11f760e01b81526001600160a01b0383811660048301526000919085169063c44b11f790602401602060405180830381865afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e679190612fcc565b9050610e7d815167040000000000000016151590565b151582528051600160391b16151515156020830152805160501c640fffffffff166040830152805160301c60ff166060830152805160201c61ffff166080830152805160101c61ffff1660a0830152610ed581611e8c565b60c0830152805160741c640fffffffff1660e08301525092915050565b61093a610f0d83600080516020613324833981519152611975565b82610947565b61093a61093483600080516020613324833981519152611975565b60008181526002602052604081205480600003610f4e5750600092915050565b60018103610f5f5750600392915050565b42811115610f705750600192915050565b50600292915050565b82610f95610a5b826000805160206132e4833981519152611975565b610fb15760405162461bcd60e51b8152600401610a0290612e45565b60405163c44b11f760e01b81526001600160a01b0384811660048301526000919086169063c44b11f790602401602060405180830381865afa158015610ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101f9190612fcc565b905061102b8184611eb2565b60405163507b811560e11b81526001600160a01b0386169063a0f7022a9061105e90879060009081908790600401612fe8565b600060405180830381600087803b15801561107857600080fd5b505af115801561108c573d6000803e3d6000fd5b50505050836001600160a01b03167f2443ba28e8d1d88d531a3d90b981816a4f3b3c7f1fd4085c6029e81d1b7a570d846040516110cd911515815260200190565b60405180910390a25050505050565b6110e68233610a15565b806110f657506110f6823361136f565b80611107575061110760003361136f565b61114c5760405162461bcd60e51b81526020600482015260166024820152753737ba103837b7b61037b9103934b9b59030b236b4b760511b6044820152606401610a02565b61093a81611ee0565b60006111648686868686611b09565b905061116f81611f60565b61117b86868686611f9a565b6000817f4c791a3ff54e27964b9a9527e64fb66fb7d1eaacec7dd0420439e94f9d6aea3b88888689896040516111b595949392919061303a565b60405180910390a36111c681612036565b505050505050565b61093a61093483600080516020613304833981519152611975565b82611205610a5b82600080516020613304833981519152611975565b806112265750611226610a5b826000805160206132e4833981519152611975565b6112425760405162461bcd60e51b8152600401610a0290612e45565b60405163c44b11f760e01b81526001600160a01b0384811660048301526000919086169063c44b11f790602401602060405180830381865afa15801561128c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b09190612fcc565b805190915060501c640fffffffff166112c98285612062565b60405163507b811560e11b81526001600160a01b0387169063a0f7022a906112fc90889060009081908890600401612fe8565b600060405180830381600087803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505060408051848152602081018890526001600160a01b03891693507fc51aca575985d521c5072ad11549bad77013bb786d57f30f94b40ed8f8dc9bc4925001610d9c565b6000610a38610a3284600080516020613304833981519152611975565b6000828152600160205260408120610a3890836120ca565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b826113e9610a5b82600080516020613304833981519152611975565b8061140a575061140a610a5b826000805160206132e4833981519152611975565b6114265760405162461bcd60e51b8152600401610a0290612e45565b60405163c44b11f760e01b81526001600160a01b0384811660048301526000919086169063c44b11f790602401602060405180830381865afa158015611470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114949190612fcc565b90506114a081846120d6565b60405163507b811560e11b81526001600160a01b0386169063a0f7022a906114d390879060009081908790600401612fe8565b600060405180830381600087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b50505050836001600160a01b03167f0c4443d258a350d27dc50c378b2ebf165e6469725f786d21b30cab16823f5587846040516110cd911515815260200190565b61157d6040518060a0016040528060006001600160a01b03168152602001606081526020016060815260200160608152602001606081525090565b6000826001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156115bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115e59190810190613073565b9050826001600160a01b031663b55bd84d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116499190613101565b6001600160a01b0316825280516000906001600160401b0381111561167057611670612749565b604051908082528060200260200182016040528015611699578160200160208202803683370190505b509050600082516001600160401b038111156116b7576116b7612749565b6040519080825280602002602001820160405280156116e0578160200160208202803683370190505b509050600083516001600160401b038111156116fe576116fe612749565b604051908082528060200260200182016040528015611727578160200160208202803683370190505b509050600084516001600160401b0381111561174557611745612749565b60405190808252806020026020018201604052801561177e57816020015b61176b6126a8565b8152602001906001900390816117635790505b50905060005b8551811015611936576000886001600160a01b03166335ea6a758884815181106117b0576117b061311e565b60200260200101516040518263ffffffff1660e01b81526004016117e391906001600160a01b0391909116815260200190565b61014060405180830381865afa158015611801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118259190612f08565b90508682815181106118395761183961311e565b60200260200101518683815181106118535761185361311e565b60200260200101906001600160a01b031690816001600160a01b0316815250508060e0015185838151811061188a5761188a61311e565b60200260200101906001600160a01b031690816001600160a01b0316815250508061010001518483815181106118c2576118c261311e565b60200260200101906001600160a01b031690816001600160a01b031681525050611905898884815181106118f8576118f861311e565b6020026020010151610df1565b8383815181106119175761191761311e565b602002602001018190525050808061192e9061314a565b915050611784565b505050505050919050565b6000610a38610a3284600080516020613324833981519152611975565b61093a610f0d836000805160206133048339815191525b604080516001600160a01b038416602082015290810182905260009060600160405160208183030381529060405280519060200120905092915050565b61093a610f0d836000805160206132e4833981519152611975565b60008181526001602052604081206108ed90612104565b6000828152602081905260409020600101546119ff81611dd3565b61096c8383611e02565b6005546001600160a01b03163314611a4e5760405162461bcd60e51b815260206004820152600860248201526721666163746f727960c01b6044820152606401610a02565b611a6f611a69836000805160206132e4833981519152611975565b8261210e565b611a9b611a8a836000805160206132e4833981519152611975565b6004546001600160a01b031661210e565b611ad3611ab6836000805160206132e4833981519152611975565b611ace846000805160206132e4833981519152611975565b612118565b611aee611ab683600080516020613304833981519152611975565b61093a611ab683600080516020613324833981519152611975565b60008585858585604051602001611b24959493929190613163565b60405160208183030381529060405280519060200120905095945050505050565b81611b61610a5b82600080516020613324833981519152611975565b80611b835750611b83610a5b6000600080516020613324833981519152611975565b611b9f5760405162461bcd60e51b8152600401610a0290612e45565b6000836001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611bdf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c079190810190613073565b905060005b8151811015611da7576000856001600160a01b031663c44b11f7848481518110611c3857611c3861311e565b60200260200101516040518263ffffffff1660e01b8152600401611c6b91906001600160a01b0391909116815260200190565b602060405180830381865afa158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cac9190612fcc565b9050611cb881866120d6565b856001600160a01b031663a0f7022a848481518110611cd957611cd961311e565b6020026020010151600080856040518563ffffffff1660e01b8152600401611d049493929190612fe8565b600060405180830381600087803b158015611d1e57600080fd5b505af1158015611d32573d6000803e3d6000fd5b50505050828281518110611d4857611d4861311e565b60200260200101516001600160a01b03167f0c4443d258a350d27dc50c378b2ebf165e6469725f786d21b30cab16823f558786604051611d8c911515815260200190565b60405180910390a25080611d9f8161314a565b915050611c0c565b5050505050565b60006001600160e01b03198216630271189760e51b14806108ed57506108ed82612163565b611ddd8133612188565b50565b611dea82826121e1565b600082815260016020526040902061096c9082612265565b611e0c828261227a565b600082815260016020526040902061096c90826122df565b6040805180820190915260128152710494e56414c49445f535550504c595f4341560741b6020820152640fffffffff821115611e735760405162461bcd60e51b8152600401610a0291906131c1565b508151640fffffffff60741b191660749190911b179052565b8051600090600160391b16151580611ea957825161ffff16610a38565b60009392505050565b603a81611ec0576000611ec3565b60015b8351670400000000000000191660ff9190911690911b1790915250565b611ee981610dac565b611f255780611ef860026122f4565b611f0260016122f4565b604051635ead8eb560e01b81526004810193909352176024820152604401610a02565b6000818152600260205260408082208290555182917fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb7091a250565b611f69816108f3565b611ddd5780611f7860026122f4565b604051635ead8eb560e01b815260048101929092526024820152604401610a02565b600080856001600160a01b0316858585604051611fb89291906131f4565b60006040518083038185875af1925050503d8060008114611ff5576040519150601f19603f3d011682016040523d82523d6000602084013e611ffa565b606091505b509150915061202d82826040518060400160405280600b81526020016a18d85b1b0819985a5b195960aa1b815250612317565b50505050505050565b61203f816108f3565b61204e5780611f7860026122f4565b600090815260026020526040902060019055565b6040805180820190915260128152710494e56414c49445f424f52524f575f4341560741b6020820152640fffffffff8211156120b15760405162461bcd60e51b8152600401610a0291906131c1565b508151640fffffffff60501b191660509190911b179052565b6000610a388383612330565b6039816120e45760006120e7565b60015b8351670200000000000000191660ff9190911690911b1790915250565b60006108ed825490565b61093a8282611de0565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160e01b03198216635a05180f60e01b14806108ed57506108ed8261235a565b61219282826113a4565b61093a5761219f8161238f565b6121aa8360206123a1565b6040516020016121bb929190613204565b60408051601f198184030181529082905262461bcd60e51b8252610a02916004016131c1565b6121eb82826113a4565b61093a576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556122213390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610a38836001600160a01b03841661253c565b61228482826113a4565b1561093a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610a38836001600160a01b03841661258b565b6000816003811115612308576123086129dd565b600160ff919091161b92915050565b60608315612326575081610a38565b610a38838361267e565b60008260000182815481106123475761234761311e565b9060005260206000200154905092915050565b60006001600160e01b03198216637965db0b60e01b14806108ed57506301ffc9a760e01b6001600160e01b03198316146108ed565b60606108ed6001600160a01b03831660145b606060006123b0836002613279565b6123bb906002613290565b6001600160401b038111156123d2576123d2612749565b6040519080825280601f01601f1916602001820160405280156123fc576020820181803683370190505b509050600360fc1b816000815181106124175761241761311e565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124465761244661311e565b60200101906001600160f81b031916908160001a905350600061246a846002613279565b612475906001613290565b90505b60018111156124ed576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106124a9576124a961311e565b1a60f81b8282815181106124bf576124bf61311e565b60200101906001600160f81b031916908160001a90535060049490941c936124e6816132a3565b9050612478565b508315610a385760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a02565b6000818152600183016020526040812054612583575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108ed565b5060006108ed565b600081815260018301602052604081205480156126745760006125af6001836132ba565b85549091506000906125c3906001906132ba565b90508181146126285760008660000182815481106125e3576125e361311e565b90600052602060002001549050808760000184815481106126065761260661311e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612639576126396132cd565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108ed565b60009150506108ed565b81511561268e5781518083602001fd5b8060405162461bcd60e51b8152600401610a0291906131c1565b6040518061010001604052806000151581526020016000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60006020828403121561270357600080fd5b81356001600160e01b031981168114610a3857600080fd5b60006020828403121561272d57600080fd5b5035919050565b6001600160a01b0381168114611ddd57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561278257612782612749565b60405290565b604051601f8201601f191681016001600160401b03811182821017156127b0576127b0612749565b604052919050565b600082601f8301126127c957600080fd5b81356001600160401b038111156127e2576127e2612749565b6127f5601f8201601f1916602001612788565b81815284602083860101111561280a57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561283d57600080fd5b843561284881612734565b9350602085013561285881612734565b92506040850135915060608501356001600160401b0381111561287a57600080fd5b612886878288016127b8565b91505092959194509250565b600080604083850312156128a557600080fd5b82356128b081612734565b915060208301356128c081612734565b809150509250929050565b600080604083850312156128de57600080fd5b8235915060208301356128c081612734565b60008060006060848603121561290557600080fd5b833561291081612734565b9250602084013561292081612734565b9150604084013561293081612734565b809150509250925092565b60008060006060848603121561295057600080fd5b833561295b81612734565b9250602084013561296b81612734565b929592945050506040919091013590565b80511515825260208101511515602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b61010081016108ed828461297c565b634e487b7160e01b600052602160045260246000fd5b6020810160048310612a1557634e487b7160e01b600052602160045260246000fd5b91905290565b80358015158114612a2b57600080fd5b919050565b600080600060608486031215612a4557600080fd5b8335612a5081612734565b92506020840135612a6081612734565b9150612a6e60408501612a1b565b90509250925092565b60008060408385031215612a8a57600080fd5b8235612a9581612734565b946020939093013593505050565b600080600080600060808688031215612abb57600080fd5b8535612ac681612734565b94506020860135935060408601356001600160401b0380821115612ae957600080fd5b818801915088601f830112612afd57600080fd5b813581811115612b0c57600080fd5b896020828501011115612b1e57600080fd5b96999598505060200195606001359392505050565b60008060408385031215612b4657600080fd5b50508035926020909101359150565b600060208284031215612b6757600080fd5b8135610a3881612734565b600081518084526020808501945080840160005b83811015612bab5781516001600160a01b031687529582019590820190600101612b86565b509495945050505050565b602080825282516001600160a01b0316828201528281015160a0604084015260009190612be660c0850182612b72565b90506040850151601f1980868403016060870152612c048383612b72565b92506060870151915080868403016080870152612c218383612b72565b608088015187820390920160a088015281518082529185019350600092508401905b80831015612c6d57612c5682855161297c565b610100820191508484019350600183019250612c43565b509695505050505050565b60006001600160401b03821115612c9157612c91612749565b5060051b60200190565b600082601f830112612cac57600080fd5b81356020612cc1612cbc83612c78565b612788565b82815260059290921b84018101918181019086841115612ce057600080fd5b8286015b84811015612c6d5780358352918301918301612ce4565b600080600080600060a08688031215612d1357600080fd5b8535612d1e81612734565b94506020860135612d2e81612734565b935060408601356001600160401b0380821115612d4a57600080fd5b612d5689838a01612c9b565b94506060880135915080821115612d6c57600080fd5b612d7889838a01612c9b565b93506080880135915080821115612d8e57600080fd5b50612d9b888289016127b8565b9150509295509295909350565b60008060408385031215612dbb57600080fd5b8235612dc681612734565b9150612dd460208401612a1b565b90509250929050565b600080600080600060a08688031215612df557600080fd5b8535612e0081612734565b94506020860135612e1081612734565b9350604086013592506060860135915060808601356001600160401b03811115612e3957600080fd5b612d9b888289016127b8565b6020808252601690820152753737ba103934b9b59037b9103837b7b61030b236b4b760511b604082015260600190565b600060208284031215612e8757600080fd5b604051602081018181106001600160401b0382111715612ea957612ea9612749565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff81168114612a2b57600080fd5b805164ffffffffff81168114612a2b57600080fd5b805161ffff81168114612a2b57600080fd5b8051612a2b81612734565b60006101408284031215612f1b57600080fd5b612f2361275f565b612f2d8484612e75565b8152612f3b60208401612eb6565b6020820152612f4c60408401612eb6565b6040820152612f5d60608401612eb6565b6060820152612f6e60808401612eb6565b6080820152612f7f60a08401612ed6565b60a0820152612f9060c08401612eeb565b60c0820152612fa160e08401612efd565b60e0820152610100612fb4818501612efd565b90820152610120928301519281019290925250919050565b600060208284031215612fde57600080fd5b610a388383612e75565b6001600160a01b0394851681529284166020840152921660408201529051606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0386168152846020820152836040820152608060608201526000613068608083018486613011565b979650505050505050565b6000602080838503121561308657600080fd5b82516001600160401b0381111561309c57600080fd5b8301601f810185136130ad57600080fd5b80516130bb612cbc82612c78565b81815260059190911b820183019083810190878311156130da57600080fd5b928401925b828410156130685783516130f281612734565b825292840192908401906130df565b60006020828403121561311357600080fd5b8151610a3881612734565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161315c5761315c613134565b5060010190565b60018060a01b038616815284602082015260806040820152600061318b608083018587613011565b90508260608301529695505050505050565b60005b838110156131b85781810151838201526020016131a0565b50506000910152565b60208152600082518060208401526131e081604085016020870161319d565b601f01601f19169190910160400192915050565b8183823760009101908152919050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161323c81601785016020880161319d565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161326d81602884016020880161319d565b01602801949350505050565b80820281158282048414176108ed576108ed613134565b808201808211156108ed576108ed613134565b6000816132b2576132b2613134565b506000190190565b818103818111156108ed576108ed613134565b634e487b7160e01b600052603160045260246000fdfe12ad05bde78c5ab75238ce885307f96ecd482bb402ef831f99e7018a0f169b7b8aa855a911518ecfbe5bc3088c8f3dda7badf130faaf8ace33fdc33828e181675c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fba26469706673582212209b2ef50d42a31e16d526e999d029c9e1e29343a871985f66cbf4ab67f56aa03764736f6c63430008130033",
  "devdoc": {
    "details": "Implements the configuration methods for the lending pools",
    "errors": {
      "TimelockInsufficientDelay(uint256,uint256)": [
        {
          "details": "The schedule operation doesn't meet the minimum delay."
        }
      ],
      "TimelockInvalidOperationLength(uint256,uint256,uint256)": [
        {
          "details": "Mismatch between the parameters length for an operation call."
        }
      ],
      "TimelockUnauthorizedCaller(address)": [
        {
          "details": "The caller account is not authorized."
        }
      ],
      "TimelockUnexpectedOperationState(bytes32,bytes32)": [
        {
          "details": "The current state of an operation is not as required. The `expectedStates` is a bitmap with the bits enabled for each OperationState enum position counting from right to left. See {_encodeStateBitmap}."
        }
      ]
    },
    "events": {
      "BorrowCapChanged(address,uint256,uint256)": {
        "details": "Emitted when the borrow cap of a reserve is updated.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newBorrowCap": "The new borrow cap",
          "oldBorrowCap": "The old borrow cap"
        }
      },
      "CallExecuted(bytes32,uint256,address,uint256,bytes32,bytes)": {
        "details": "Emitted when a call is performed as part of operation `id`."
      },
      "CallScheduled(bytes32,uint256,address,uint256,bytes,bytes32,uint256)": {
        "details": "Emitted when a call is scheduled as part of operation `id`."
      },
      "Cancelled(bytes32)": {
        "details": "Emitted when operation `id` is cancelled."
      },
      "MinDelayChange(uint256,uint256)": {
        "details": "Emitted when the minimum delay for future operations is modified."
      },
      "ReserveBorrowing(address,bool)": {
        "details": "Emitted when borrowing is enabled or disabled on a reserve.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "enabled": "True if borrowing is enabled, false otherwise"
        }
      },
      "ReserveFactorChanged(address,uint256,uint256)": {
        "details": "Emitted when a reserve factor is updated.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newReserveFactor": "The new reserve factor, expressed in bps",
          "oldReserveFactor": "The old reserve factor, expressed in bps"
        }
      },
      "ReserveFrozen(address,bool)": {
        "details": "Emitted when a reserve is frozen or unfrozen",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "frozen": "True if reserve is frozen, false otherwise"
        }
      },
      "ReserveInterestRateStrategyChanged(address,address,address)": {
        "details": "Emitted when a reserve interest strategy contract is updated.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newStrategy": "The address of the new interest strategy contract",
          "oldStrategy": "The address of the old interest strategy contract"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "SupplyCapChanged(address,uint256,uint256)": {
        "details": "Emitted when the supply cap of a reserve is updated.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newSupplyCap": "The new supply cap",
          "oldSupplyCap": "The old supply cap"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addEmergencyAdmin(address,address)": {
        "params": {
          "admin": "The address of the new admin"
        }
      },
      "addPoolAdmin(address,address)": {
        "params": {
          "admin": "The address of the new admin"
        }
      },
      "addRiskAdmin(address,address)": {
        "params": {
          "admin": "The address of the new admin"
        }
      },
      "execute(address,uint256,bytes,bytes32)": {
        "details": "Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role."
      },
      "getMinDelay()": {
        "details": "Returns the minimum delay in seconds for an operation to become valid. This value can be changed by executing an operation that calls `updateDelay`."
      },
      "getOperationState(bytes32)": {
        "details": "Returns operation state."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getTimestamp(bytes32)": {
        "details": "Returns the timestamp at which an operation becomes ready (0 for unset operations, 1 for done operations)."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hashOperation(address,uint256,bytes,bytes32)": {
        "details": "Returns the identifier of an operation containing a single transaction."
      },
      "isEmergencyAdmin(address,address)": {
        "params": {
          "admin": "The address to check"
        },
        "returns": {
          "_0": "True if the given address is EmergencyAdmin, false otherwise"
        }
      },
      "isOperation(bytes32)": {
        "details": "Returns whether an id corresponds to a registered operation. This includes both Waiting, Ready, and Done operations."
      },
      "isOperationDone(bytes32)": {
        "details": "Returns whether an operation is done or not."
      },
      "isOperationPending(bytes32)": {
        "details": "Returns whether an operation is pending or not. Note that a \"pending\" operation may also be \"ready\"."
      },
      "isOperationReady(bytes32)": {
        "details": "Returns whether an operation is ready for execution. Note that a \"ready\" operation is also \"pending\"."
      },
      "isPoolAdmin(address,address)": {
        "params": {
          "admin": "The address to check"
        },
        "returns": {
          "_0": "True if the given address is PoolAdmin, false otherwise"
        }
      },
      "isRiskAdmin(address,address)": {
        "params": {
          "admin": "The address to check"
        },
        "returns": {
          "_0": "True if the given address is RiskAdmin, false otherwise"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "removeEmergencyAdmin(address,address)": {
        "params": {
          "admin": "The address of the admin to remove"
        }
      },
      "removePoolAdmin(address,address)": {
        "params": {
          "admin": "The address of the admin to remove"
        }
      },
      "removeRiskAdmin(address,address)": {
        "params": {
          "admin": "The address of the admin to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setBorrowCap(address,address,uint256)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newBorrowCap": "The new borrow cap of the reserve"
        }
      },
      "setPoolFreeze(address,bool)": {
        "params": {
          "freeze": "True if protocol needs to be frozen, false otherwise"
        }
      },
      "setReserveBorrowing(address,address,bool)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "enabled": "True if borrowing needs to be enabled, false otherwise"
        }
      },
      "setReserveFreeze(address,address,bool)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "freeze": "True if the reserve needs to be frozen, false otherwise"
        }
      },
      "setReserveInterestRateStrategyAddress(address,address,address)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newRateStrategyAddress": "The address of the new interest strategy contract"
        }
      },
      "setSupplyCap(address,address,uint256)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newSupplyCap": "The new supply cap of the reserve"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "PoolConfigurator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "EMERGENCY_ADMIN_ROLE()": {
        "notice": "Returns the identifier of the EmergencyAdmin role"
      },
      "POOL_ADMIN_ROLE()": {
        "notice": "Returns the identifier of the PoolAdmin role"
      },
      "RISK_ADMIN_ROLE()": {
        "notice": "Returns the identifier of the RiskAdmin role"
      },
      "addEmergencyAdmin(address,address)": {
        "notice": "Adds a new admin as EmergencyAdmin"
      },
      "addPoolAdmin(address,address)": {
        "notice": "Adds a new admin as PoolAdmin"
      },
      "addRiskAdmin(address,address)": {
        "notice": "Adds a new admin as RiskAdmin"
      },
      "isEmergencyAdmin(address,address)": {
        "notice": "Returns true if the address is EmergencyAdmin, false otherwise"
      },
      "isPoolAdmin(address,address)": {
        "notice": "Returns true if the address is PoolAdmin, false otherwise"
      },
      "isRiskAdmin(address,address)": {
        "notice": "Returns true if the address is RiskAdmin, false otherwise"
      },
      "removeEmergencyAdmin(address,address)": {
        "notice": "Removes an admin as EmergencyAdmin"
      },
      "removePoolAdmin(address,address)": {
        "notice": "Removes an admin as PoolAdmin"
      },
      "removeRiskAdmin(address,address)": {
        "notice": "Removes an admin as RiskAdmin"
      },
      "setBorrowCap(address,address,uint256)": {
        "notice": "Updates the borrow cap of a reserve."
      },
      "setPoolFreeze(address,bool)": {
        "notice": "Freezes the pool reserves. In the frozen state only withdraw and repay can be done"
      },
      "setReserveBorrowing(address,address,bool)": {
        "notice": "Configures borrowing on a reserve."
      },
      "setReserveFreeze(address,address,bool)": {
        "notice": "Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow or rate swap but allows repayments, liquidations, rate rebalances and withdrawals."
      },
      "setReserveInterestRateStrategyAddress(address,address,address)": {
        "notice": "Sets the interest rate strategy of a reserve."
      },
      "setSupplyCap(address,address,uint256)": {
        "notice": "Updates the supply cap of a reserve."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7673,
        "contract": "contracts/core/pool/manager/PoolConfigurator.sol:PoolConfigurator",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)7668_storage)"
      },
      {
        "astId": 7983,
        "contract": "contracts/core/pool/manager/PoolConfigurator.sol:PoolConfigurator",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)21434_storage)"
      },
      {
        "astId": 31276,
        "contract": "contracts/core/pool/manager/PoolConfigurator.sol:PoolConfigurator",
        "label": "_timestamps",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 31278,
        "contract": "contracts/core/pool/manager/PoolConfigurator.sol:PoolConfigurator",
        "label": "_minDelay",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 30848,
        "contract": "contracts/core/pool/manager/PoolConfigurator.sol:PoolConfigurator",
        "label": "governance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 30156,
        "contract": "contracts/core/pool/manager/PoolConfigurator.sol:PoolConfigurator",
        "label": "factory",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)21434_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)21434_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)7668_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)7668_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)21434_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 21433,
            "contract": "contracts/core/pool/manager/PoolConfigurator.sol:PoolConfigurator",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)21119_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)7668_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 7665,
            "contract": "contracts/core/pool/manager/PoolConfigurator.sol:PoolConfigurator",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7667,
            "contract": "contracts/core/pool/manager/PoolConfigurator.sol:PoolConfigurator",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)21119_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 21114,
            "contract": "contracts/core/pool/manager/PoolConfigurator.sol:PoolConfigurator",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 21118,
            "contract": "contracts/core/pool/manager/PoolConfigurator.sol:PoolConfigurator",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}